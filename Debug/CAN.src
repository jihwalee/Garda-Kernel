	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v4.1r1 Build 669 SN 00581034"
	.compiler_invocation	"ctc -f cc1148a -H sfr/regtc1797.sfr -c99 --dep-file=.CAN.o.d -D__CPU__=tc1797 -D__CPU_TC1797__ --core=tc1.3.1 -F -D__TC1797__=1 -DFREQ_CPU_MHZ=180 -IC:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin -g --make-target=CAN.o -t4 --language=-gcc,-volatile,+strings --default-near-size=8 -O2 --default-a1-size=0 --default-a0-size=0 --source --align=0 --compact-max-size=200 --switch=auto -o CAN.src ..\\CAN.c"
	.compiler_name		"ctc"
	.name	"CAN"

	
$TC131
	.sdecl	'.zrodata.CAN.__const_f0004000',data,rom
	.sect	'.zrodata.CAN.__const_f0004000'
	.align	2
__const_f0004000:	.type	object
	.size	__const_f0004000,4
	.word	-268419072
	.sdecl	'.zrodata.CAN.__const_f00041c5',data,rom
	.sect	'.zrodata.CAN.__const_f00041c5'
	.align	2
__const_f00041c5:	.type	object
	.size	__const_f00041c5,4
	.word	-268418619
	.sdecl	'.zrodata.CAN.__const_f0004300',data,rom
	.sect	'.zrodata.CAN.__const_f0004300'
	.align	2
__const_f0004300:	.type	object
	.size	__const_f0004300,4
	.word	-268418304
	.sdecl	'.zrodata.CAN.__const_f00041c4',data,rom
	.sect	'.zrodata.CAN.__const_f00041c4'
	.align	2
__const_f00041c4:	.type	object
	.size	__const_f00041c4,4
	.word	-268418620
	.sdecl	'.zrodata.CAN.__const_02000002',data,rom
	.sect	'.zrodata.CAN.__const_02000002'
	.align	2
__const_02000002:	.type	object
	.size	__const_02000002,4
	.word	33554434
	.sdecl	'.zrodata.CAN.__const_02010002',data,rom
	.sect	'.zrodata.CAN.__const_02010002'
	.align	2
__const_02010002:	.type	object
	.size	__const_02010002,4
	.word	33619970
	.sdecl	'.zrodata.CAN.__const_02020002',data,rom
	.sect	'.zrodata.CAN.__const_02020002'
	.align	2
__const_02020002:	.type	object
	.size	__const_02020002,4
	.word	33685506
	.sdecl	'.zrodata.CAN.__const_02030002',data,rom
	.sect	'.zrodata.CAN.__const_02030002'
	.align	2
__const_02030002:	.type	object
	.size	__const_02030002,4
	.word	33751042
	.sdecl	'.zrodata.CAN.__const_02040002',data,rom
	.sect	'.zrodata.CAN.__const_02040002'
	.align	2
__const_02040002:	.type	object
	.size	__const_02040002,4
	.word	33816578
	.sdecl	'.zrodata.CAN.__const_02050002',data,rom
	.sect	'.zrodata.CAN.__const_02050002'
	.align	2
__const_02050002:	.type	object
	.size	__const_02050002,4
	.word	33882114
	.sdecl	'.zrodata.CAN.__const_02060002',data,rom
	.sect	'.zrodata.CAN.__const_02060002'
	.align	2
__const_02060002:	.type	object
	.size	__const_02060002,4
	.word	33947650
	.sdecl	'.zrodata.CAN.__const_02070002',data,rom
	.sect	'.zrodata.CAN.__const_02070002'
	.align	2
__const_02070002:	.type	object
	.size	__const_02070002,4
	.word	34013186
	.sdecl	'.zrodata.CAN.__const_02080002',data,rom
	.sect	'.zrodata.CAN.__const_02080002'
	.align	2
__const_02080002:	.type	object
	.size	__const_02080002,4
	.word	34078722
	.sdecl	'.zrodata.CAN.__const_02090002',data,rom
	.sect	'.zrodata.CAN.__const_02090002'
	.align	2
__const_02090002:	.type	object
	.size	__const_02090002,4
	.word	34144258
	.sdecl	'.zrodata.CAN.__const_020a0002',data,rom
	.sect	'.zrodata.CAN.__const_020a0002'
	.align	2
__const_020a0002:	.type	object
	.size	__const_020a0002,4
	.word	34209794
	.sdecl	'.zrodata.CAN.__const_020b0002',data,rom
	.sect	'.zrodata.CAN.__const_020b0002'
	.align	2
__const_020b0002:	.type	object
	.size	__const_020b0002,4
	.word	34275330
	.sdecl	'.zrodata.CAN.__const_020c0002',data,rom
	.sect	'.zrodata.CAN.__const_020c0002'
	.align	2
__const_020c0002:	.type	object
	.size	__const_020c0002,4
	.word	34340866
	.sdecl	'.zrodata.CAN.__const_020d0002',data,rom
	.sect	'.zrodata.CAN.__const_020d0002'
	.align	2
__const_020d0002:	.type	object
	.size	__const_020d0002,4
	.word	34406402
	.sdecl	'.zrodata.CAN.__const_020e0002',data,rom
	.sect	'.zrodata.CAN.__const_020e0002'
	.align	2
__const_020e0002:	.type	object
	.size	__const_020e0002,4
	.word	34471938
	.sdecl	'.zrodata.CAN.__const_020f0002',data,rom
	.sect	'.zrodata.CAN.__const_020f0002'
	.align	2
__const_020f0002:	.type	object
	.size	__const_020f0002,4
	.word	34537474
	.sdecl	'.zrodata.CAN.__const_02100002',data,rom
	.sect	'.zrodata.CAN.__const_02100002'
	.align	2
__const_02100002:	.type	object
	.size	__const_02100002,4
	.word	34603010
	.sdecl	'.zrodata.CAN.__const_02110002',data,rom
	.sect	'.zrodata.CAN.__const_02110002'
	.align	2
__const_02110002:	.type	object
	.size	__const_02110002,4
	.word	34668546
	.sdecl	'.zrodata.CAN.__const_02120002',data,rom
	.sect	'.zrodata.CAN.__const_02120002'
	.align	2
__const_02120002:	.type	object
	.size	__const_02120002,4
	.word	34734082
	.sdecl	'.zrodata.CAN.__const_02130002',data,rom
	.sect	'.zrodata.CAN.__const_02130002'
	.align	2
__const_02130002:	.type	object
	.size	__const_02130002,4
	.word	34799618
	.sdecl	'.zrodata.CAN.__const_02140002',data,rom
	.sect	'.zrodata.CAN.__const_02140002'
	.align	2
__const_02140002:	.type	object
	.size	__const_02140002,4
	.word	34865154
	.sdecl	'.zrodata.CAN.__const_02150002',data,rom
	.sect	'.zrodata.CAN.__const_02150002'
	.align	2
__const_02150002:	.type	object
	.size	__const_02150002,4
	.word	34930690
	.sdecl	'.zrodata.CAN.__const_02160002',data,rom
	.sect	'.zrodata.CAN.__const_02160002'
	.align	2
__const_02160002:	.type	object
	.size	__const_02160002,4
	.word	34996226
	.sdecl	'.zrodata.CAN.__const_02170002',data,rom
	.sect	'.zrodata.CAN.__const_02170002'
	.align	2
__const_02170002:	.type	object
	.size	__const_02170002,4
	.word	35061762
	.sdecl	'.zrodata.CAN.__const_02180002',data,rom
	.sect	'.zrodata.CAN.__const_02180002'
	.align	2
__const_02180002:	.type	object
	.size	__const_02180002,4
	.word	35127298
	.sdecl	'.zrodata.CAN.__const_02190002',data,rom
	.sect	'.zrodata.CAN.__const_02190002'
	.align	2
__const_02190002:	.type	object
	.size	__const_02190002,4
	.word	35192834
	.sdecl	'.zrodata.CAN.__const_021a0002',data,rom
	.sect	'.zrodata.CAN.__const_021a0002'
	.align	2
__const_021a0002:	.type	object
	.size	__const_021a0002,4
	.word	35258370
	.sdecl	'.zrodata.CAN.__const_021b0002',data,rom
	.sect	'.zrodata.CAN.__const_021b0002'
	.align	2
__const_021b0002:	.type	object
	.size	__const_021b0002,4
	.word	35323906
	.sdecl	'.zrodata.CAN.__const_021c0002',data,rom
	.sect	'.zrodata.CAN.__const_021c0002'
	.align	2
__const_021c0002:	.type	object
	.size	__const_021c0002,4
	.word	35389442
	.sdecl	'.zrodata.CAN.__const_021d0002',data,rom
	.sect	'.zrodata.CAN.__const_021d0002'
	.align	2
__const_021d0002:	.type	object
	.size	__const_021d0002,4
	.word	35454978
	.sdecl	'.zrodata.CAN.__const_f000501c',data,rom
	.sect	'.zrodata.CAN.__const_f000501c'
	.align	2
__const_f000501c:	.type	object
	.size	__const_f000501c,4
	.word	-268414948
	.sdecl	'.zrodata.CAN.__const_3fffffff',data,rom
	.sect	'.zrodata.CAN.__const_3fffffff'
	.align	2
__const_3fffffff:	.type	object
	.size	__const_3fffffff,4
	.word	1073741823
	.sdecl	'.zrodata.CAN.__const_f000503c',data,rom
	.sect	'.zrodata.CAN.__const_f000503c'
	.align	2
__const_f000503c:	.type	object
	.size	__const_f000503c,4
	.word	-268414916
	.sdecl	'.zrodata.CAN.__const_f000505c',data,rom
	.sect	'.zrodata.CAN.__const_f000505c'
	.align	2
__const_f000505c:	.type	object
	.size	__const_f000505c,4
	.word	-268414884
	.sdecl	'.zrodata.CAN.__const_f000507c',data,rom
	.sect	'.zrodata.CAN.__const_f000507c'
	.align	2
__const_f000507c:	.type	object
	.size	__const_f000507c,4
	.word	-268414852
	.sdecl	'.zrodata.CAN.__const_f000509c',data,rom
	.sect	'.zrodata.CAN.__const_f000509c'
	.align	2
__const_f000509c:	.type	object
	.size	__const_f000509c,4
	.word	-268414820
	.sdecl	'.zrodata.CAN.__const_f00050bc',data,rom
	.sect	'.zrodata.CAN.__const_f00050bc'
	.align	2
__const_f00050bc:	.type	object
	.size	__const_f00050bc,4
	.word	-268414788
	.sdecl	'.zrodata.CAN.__const_f00050dc',data,rom
	.sect	'.zrodata.CAN.__const_f00050dc'
	.align	2
__const_f00050dc:	.type	object
	.size	__const_f00050dc,4
	.word	-268414756
	.sdecl	'.zrodata.CAN.__const_f00050fc',data,rom
	.sect	'.zrodata.CAN.__const_f00050fc'
	.align	2
__const_f00050fc:	.type	object
	.size	__const_f00050fc,4
	.word	-268414724
	.sdecl	'.zrodata.CAN.__const_f000511c',data,rom
	.sect	'.zrodata.CAN.__const_f000511c'
	.align	2
__const_f000511c:	.type	object
	.size	__const_f000511c,4
	.word	-268414692
	.sdecl	'.zrodata.CAN.__const_f000513c',data,rom
	.sect	'.zrodata.CAN.__const_f000513c'
	.align	2
__const_f000513c:	.type	object
	.size	__const_f000513c,4
	.word	-268414660
	.sdecl	'.zrodata.CAN.__const_f000515c',data,rom
	.sect	'.zrodata.CAN.__const_f000515c'
	.align	2
__const_f000515c:	.type	object
	.size	__const_f000515c,4
	.word	-268414628
	.sdecl	'.zrodata.CAN.__const_f000517c',data,rom
	.sect	'.zrodata.CAN.__const_f000517c'
	.align	2
__const_f000517c:	.type	object
	.size	__const_f000517c,4
	.word	-268414596
	.sdecl	'.zrodata.CAN.__const_f000519c',data,rom
	.sect	'.zrodata.CAN.__const_f000519c'
	.align	2
__const_f000519c:	.type	object
	.size	__const_f000519c,4
	.word	-268414564
	.sdecl	'.zrodata.CAN.__const_f00051bc',data,rom
	.sect	'.zrodata.CAN.__const_f00051bc'
	.align	2
__const_f00051bc:	.type	object
	.size	__const_f00051bc,4
	.word	-268414532
	.sdecl	'.zrodata.CAN.__const_f00051dc',data,rom
	.sect	'.zrodata.CAN.__const_f00051dc'
	.align	2
__const_f00051dc:	.type	object
	.size	__const_f00051dc,4
	.word	-268414500
	.sdecl	'.zrodata.CAN.__const_f00051fc',data,rom
	.sect	'.zrodata.CAN.__const_f00051fc'
	.align	2
__const_f00051fc:	.type	object
	.size	__const_f00051fc,4
	.word	-268414468
	.sdecl	'.zrodata.CAN.__const_f000521c',data,rom
	.sect	'.zrodata.CAN.__const_f000521c'
	.align	2
__const_f000521c:	.type	object
	.size	__const_f000521c,4
	.word	-268414436
	.sdecl	'.zrodata.CAN.__const_f000523c',data,rom
	.sect	'.zrodata.CAN.__const_f000523c'
	.align	2
__const_f000523c:	.type	object
	.size	__const_f000523c,4
	.word	-268414404
	.sdecl	'.zrodata.CAN.__const_f000525c',data,rom
	.sect	'.zrodata.CAN.__const_f000525c'
	.align	2
__const_f000525c:	.type	object
	.size	__const_f000525c,4
	.word	-268414372
	.sdecl	'.zrodata.CAN.__const_f000527c',data,rom
	.sect	'.zrodata.CAN.__const_f000527c'
	.align	2
__const_f000527c:	.type	object
	.size	__const_f000527c,4
	.word	-268414340
	.sdecl	'.zrodata.CAN.__const_f000529c',data,rom
	.sect	'.zrodata.CAN.__const_f000529c'
	.align	2
__const_f000529c:	.type	object
	.size	__const_f000529c,4
	.word	-268414308
	.sdecl	'.zrodata.CAN.__const_f00052bc',data,rom
	.sect	'.zrodata.CAN.__const_f00052bc'
	.align	2
__const_f00052bc:	.type	object
	.size	__const_f00052bc,4
	.word	-268414276
	.sdecl	'.zrodata.CAN.__const_f00052dc',data,rom
	.sect	'.zrodata.CAN.__const_f00052dc'
	.align	2
__const_f00052dc:	.type	object
	.size	__const_f00052dc,4
	.word	-268414244
	.sdecl	'.zrodata.CAN.__const_f00052fc',data,rom
	.sect	'.zrodata.CAN.__const_f00052fc'
	.align	2
__const_f00052fc:	.type	object
	.size	__const_f00052fc,4
	.word	-268414212
	.sdecl	'.zrodata.CAN.__const_f000531c',data,rom
	.sect	'.zrodata.CAN.__const_f000531c'
	.align	2
__const_f000531c:	.type	object
	.size	__const_f000531c,4
	.word	-268414180
	.sdecl	'.zrodata.CAN.__const_f000533c',data,rom
	.sect	'.zrodata.CAN.__const_f000533c'
	.align	2
__const_f000533c:	.type	object
	.size	__const_f000533c,4
	.word	-268414148
	.sdecl	'.zrodata.CAN.__const_f000535c',data,rom
	.sect	'.zrodata.CAN.__const_f000535c'
	.align	2
__const_f000535c:	.type	object
	.size	__const_f000535c,4
	.word	-268414116
	.sdecl	'.zrodata.CAN.__const_f000537c',data,rom
	.sect	'.zrodata.CAN.__const_f000537c'
	.align	2
__const_f000537c:	.type	object
	.size	__const_f000537c,4
	.word	-268414084
	.sdecl	'.zrodata.CAN.__const_f000539c',data,rom
	.sect	'.zrodata.CAN.__const_f000539c'
	.align	2
__const_f000539c:	.type	object
	.size	__const_f000539c,4
	.word	-268414052
	.sdecl	'.zrodata.CAN.__const_f00053bc',data,rom
	.sect	'.zrodata.CAN.__const_f00053bc'
	.align	2
__const_f00053bc:	.type	object
	.size	__const_f00053bc,4
	.word	-268414020
	.sdecl	'.zrodata.CAN.__const_f0005000',data,rom
	.sect	'.zrodata.CAN.__const_f0005000'
	.align	2
__const_f0005000:	.type	object
	.size	__const_f0005000,4
	.word	-268414976
	.sdecl	'.zrodata.CAN.__const_1fffffff',data,rom
	.sect	'.zrodata.CAN.__const_1fffffff'
	.align	2
__const_1fffffff:	.type	object
	.size	__const_1fffffff,4
	.word	536870911
	.sdecl	'.zrodata.CAN.__const_06280040',data,rom
	.sect	'.zrodata.CAN.__const_06280040'
	.align	2
__const_06280040:	.type	object
	.size	__const_06280040,4
	.word	103284800
	.sdecl	'.zrodata.CAN.__const_00200040',data,rom
	.sect	'.zrodata.CAN.__const_00200040'
	.align	2
__const_00200040:	.type	object
	.size	__const_00200040,4
	.word	2097216
	.sdecl	'.zrodata.CAN.__const_f0004180',data,rom
	.sect	'.zrodata.CAN.__const_f0004180'
	.align	2
__const_f0004180:	.type	object
	.size	__const_f0004180,4
	.word	-268418688
	.sdecl	'.zrodata.CAN.__const_20000008',data,rom
	.sect	'.zrodata.CAN.__const_20000008'
	.align	2
__const_20000008:	.type	object
	.size	__const_20000008,4
	.word	536870920
	.sdecl	'.zrodata.CAN.__const_dfffffff',data,rom
	.sect	'.zrodata.CAN.__const_dfffffff'
	.align	2
__const_dfffffff:	.type	object
	.size	__const_dfffffff,4
	.word	-536870913
	
	.sdecl	'.text.CAN.CAN_vInit',code,cluster('CAN_vInit')
	.sect	'.text.CAN.CAN_vInit'
	.align	2
	
	.global	CAN_vInit

; ..\CAN.c	     1  //****************************************************************************
; ..\CAN.c	     2  // @Module        MultiCAN Controller 
; ..\CAN.c	     3  // @Filename      CAN.c
; ..\CAN.c	     4  // @Project       DAVE_SG.dav
; ..\CAN.c	     5  //----------------------------------------------------------------------------
; ..\CAN.c	     6  // @Controller    Infineon TC1797
; ..\CAN.c	     7  //
; ..\CAN.c	     8  // @Compiler      Tasking 3.1
; ..\CAN.c	     9  //
; ..\CAN.c	    10  // @Codegenerator 1.0
; ..\CAN.c	    11  //
; ..\CAN.c	    12  // @Description   This file contains functions that use the CAN module.
; ..\CAN.c	    13  //
; ..\CAN.c	    14  //----------------------------------------------------------------------------
; ..\CAN.c	    15  // @Date          2013-11-20 13:40:30
; ..\CAN.c	    16  //
; ..\CAN.c	    17  //****************************************************************************
; ..\CAN.c	    18  
; ..\CAN.c	    19  // USER CODE BEGIN (CAN_General,1)
; ..\CAN.c	    20  
; ..\CAN.c	    21  // USER CODE END
; ..\CAN.c	    22  
; ..\CAN.c	    23  
; ..\CAN.c	    24  
; ..\CAN.c	    25  //****************************************************************************
; ..\CAN.c	    26  // @Project Includes
; ..\CAN.c	    27  //****************************************************************************
; ..\CAN.c	    28  
; ..\CAN.c	    29  #include "MAIN.h"
; ..\CAN.c	    30  
; ..\CAN.c	    31  // USER CODE BEGIN (CAN_General,2)
; ..\CAN.c	    32  #include <string.h>
; ..\CAN.c	    33  #include <sfr/regtc1797.sfr>
; ..\CAN.c	    34  #include "constants.h"
; ..\CAN.c	    35  #include "configs.h"
; ..\CAN.c	    36  #include "kernel.h"
; ..\CAN.c	    37  #include "led.h"
; ..\CAN.c	    38  #include <time.h>
; ..\CAN.c	    39  
; ..\CAN.c	    40  // USER CODE END
; ..\CAN.c	    41  
; ..\CAN.c	    42  
; ..\CAN.c	    43  //****************************************************************************
; ..\CAN.c	    44  // @Macros
; ..\CAN.c	    45  //****************************************************************************
; ..\CAN.c	    46  
; ..\CAN.c	    47  #define SetListCommand(Value) CAN_PANCTR.U = Value; while (CAN_PANCTR.B.BUSY);
; ..\CAN.c	    48  
; ..\CAN.c	    49  // USER CODE BEGIN (CAN_General,3)
; ..\CAN.c	    50  #if 0
; ..\CAN.c	    51  extern swc_t swc_1;
; ..\CAN.c	    52  extern swc_t swc_2;
; ..\CAN.c	    53  extern swc_t swc_3;
; ..\CAN.c	    54  extern swc_t swc_4;
; ..\CAN.c	    55  extern swc_t swc_5;
; ..\CAN.c	    56  #endif
; ..\CAN.c	    57  
; ..\CAN.c	    58  void callback(uint32_t swc_id, uint32_t flag);
; ..\CAN.c	    59  
; ..\CAN.c	    60  // USER CODE END
; ..\CAN.c	    61  
; ..\CAN.c	    62  
; ..\CAN.c	    63  //****************************************************************************
; ..\CAN.c	    64  // @Defines
; ..\CAN.c	    65  //****************************************************************************
; ..\CAN.c	    66  
; ..\CAN.c	    67  // Structure for a single MultiCAN object
; ..\CAN.c	    68  // A total of 128 such object structures exists
; ..\CAN.c	    69  
; ..\CAN.c	    70  struct stCanObj 
; ..\CAN.c	    71  {
; ..\CAN.c	    72    uword  uwMOFCR;    // Function Control Register
; ..\CAN.c	    73    uword  uwMOFGPR;   // FIFO/Gateway Pointer Register
; ..\CAN.c	    74    uword  uwMOIPR;    // Interrupt Pointer Register
; ..\CAN.c	    75    uword  uwMOAMR;    // Acceptance Mask Register
; ..\CAN.c	    76    ubyte  ubData[8];  // Message Data 0..7
; ..\CAN.c	    77    uword  uwMOAR;     // Arbitration Register
; ..\CAN.c	    78    uword  uwMOCTR;    // Control Register
; ..\CAN.c	    79  };
; ..\CAN.c	    80  
; ..\CAN.c	    81  #define CAN_HWOBJ ((struct stCanObj volatile *) 0xF0005000)
; ..\CAN.c	    82  
; ..\CAN.c	    83  // USER CODE BEGIN (CAN_General,4)
; ..\CAN.c	    84  
; ..\CAN.c	    85  // USER CODE END
; ..\CAN.c	    86  
; ..\CAN.c	    87  
; ..\CAN.c	    88  //****************************************************************************
; ..\CAN.c	    89  // @Typedefs
; ..\CAN.c	    90  //****************************************************************************
; ..\CAN.c	    91  
; ..\CAN.c	    92  // USER CODE BEGIN (CAN_General,5)
; ..\CAN.c	    93  
; ..\CAN.c	    94  // USER CODE END
; ..\CAN.c	    95  
; ..\CAN.c	    96  
; ..\CAN.c	    97  //****************************************************************************
; ..\CAN.c	    98  // @Imported Global Variables
; ..\CAN.c	    99  //****************************************************************************
; ..\CAN.c	   100  
; ..\CAN.c	   101  // USER CODE BEGIN (CAN_General,6)
; ..\CAN.c	   102  
; ..\CAN.c	   103  // USER CODE END
; ..\CAN.c	   104  
; ..\CAN.c	   105  
; ..\CAN.c	   106  //****************************************************************************
; ..\CAN.c	   107  // @Global Variables
; ..\CAN.c	   108  //****************************************************************************
; ..\CAN.c	   109  
; ..\CAN.c	   110  static ubyte aubFIFOWritePtr[128];
; ..\CAN.c	   111  static ubyte aubFIFOReadPtr[128];
; ..\CAN.c	   112  
; ..\CAN.c	   113  // USER CODE BEGIN (CAN_General,7)
; ..\CAN.c	   114  
; ..\CAN.c	   115  // USER CODE END
; ..\CAN.c	   116  
; ..\CAN.c	   117  
; ..\CAN.c	   118  //****************************************************************************
; ..\CAN.c	   119  // @External Prototypes
; ..\CAN.c	   120  //****************************************************************************
; ..\CAN.c	   121  
; ..\CAN.c	   122  // USER CODE BEGIN (CAN_General,8)
; ..\CAN.c	   123  
; ..\CAN.c	   124  // USER CODE END
; ..\CAN.c	   125  
; ..\CAN.c	   126  
; ..\CAN.c	   127  //****************************************************************************
; ..\CAN.c	   128  // @Prototypes Of Local Functions
; ..\CAN.c	   129  //****************************************************************************
; ..\CAN.c	   130  
; ..\CAN.c	   131  // USER CODE BEGIN (CAN_General,9)
; ..\CAN.c	   132  
; ..\CAN.c	   133  // USER CODE END
; ..\CAN.c	   134  
; ..\CAN.c	   135  
; ..\CAN.c	   136  //****************************************************************************
; ..\CAN.c	   137  // @Function      void CAN_vInit(void) 
; ..\CAN.c	   138  //
; ..\CAN.c	   139  //----------------------------------------------------------------------------
; ..\CAN.c	   140  // @Description   This is the initialization function of the CAN function 
; ..\CAN.c	   141  //                library. It is assumed that the SFRs used by this library 
; ..\CAN.c	   142  //                are in their reset state. 
; ..\CAN.c	   143  //
; ..\CAN.c	   144  //----------------------------------------------------------------------------
; ..\CAN.c	   145  // @Returnvalue   None
; ..\CAN.c	   146  //
; ..\CAN.c	   147  //----------------------------------------------------------------------------
; ..\CAN.c	   148  // @Parameters    None
; ..\CAN.c	   149  //
; ..\CAN.c	   150  //----------------------------------------------------------------------------
; ..\CAN.c	   151  // @Date          2013-11-20
; ..\CAN.c	   152  //
; ..\CAN.c	   153  //****************************************************************************
; ..\CAN.c	   154  
; ..\CAN.c	   155  // USER CODE BEGIN (Init,1)
; ..\CAN.c	   156  
; ..\CAN.c	   157  // USER CODE END
; ..\CAN.c	   158  
; ..\CAN.c	   159  void CAN_vInit(void)
; Function CAN_vInit
.L137:
CAN_vInit:	.type	func

; ..\CAN.c	   160  {
; ..\CAN.c	   161  ubyte i;
; ..\CAN.c	   162  
; ..\CAN.c	   163    // USER CODE BEGIN (Init,2)
; ..\CAN.c	   164  
; ..\CAN.c	   165    // USER CODE END
; ..\CAN.c	   166  
; ..\CAN.c	   167    ///  -----------------------------------------------------------------------
; ..\CAN.c	   168    ///  Configuration of the Module Clock:
; ..\CAN.c	   169    ///  -----------------------------------------------------------------------
; ..\CAN.c	   170  
; ..\CAN.c	   171    ///  - the CAN module is stopped during sleep mode
; ..\CAN.c	   172    ///  - normal divider mode is selected
; ..\CAN.c	   173    ///  - required CAN module clock is 90.00 MHz
; ..\CAN.c	   174    ///  - real CAN module clock is 90.00 MHz
; ..\CAN.c	   175  
; ..\CAN.c	   176    MAIN_vResetENDINIT();
	lea	a15,0xf00005f0
	ld.w	d15,[a15]
	insert	d4,d15,#0,#0,#1
	call	MAIN_vWriteWDTCON0
.L2:
	ld.bu	d15,0xf00005f0
	jnz.t	d15:0,.L2				; predicted taken
.L415:

; ..\CAN.c	   177    CAN_CLC.U      = 0x00000000;   // load clock control register
	ld.w	d15,__const_f0004000
	mov.a	a2,d15
.L416:
	mov	d15,#0
	st.w	[a2],d15

; ..\CAN.c	   178    while ((CAN_CLC.U & 0x00000002)==2);  //wait until module is enabled
.L3:
	ld.w	d15,[a2]
.L417:
	jnz.t	d15:1,.L3				; predicted taken
.L418:

; ..\CAN.c	   179    CAN_FDR.U      = 0x000043FF;   // load fractional divider register
	mov	d15,#17407
	movh.a	a2,#61440
	st.w	[a2]@los(0xf000400c),d15
.L419:

; ..\CAN.c	   180    MAIN_vSetENDINIT();
	ld.w	d15,[a15]
	or	d4,d15,#1
	call	MAIN_vWriteWDTCON0
.L420:

; ..\CAN.c	   181  
; ..\CAN.c	   182    //   - wait until Panel has finished the initialisation
; ..\CAN.c	   183    while (CAN_PANCTR.B.BUSY);
	ld.w	d15,__const_f00041c5
.L421:
	mov.a	a15,d15
.L4:
	ld.bu	d15,[a15]
.L422:
	jnz.t	d15:0,.L4				; predicted taken
.L423:

; ..\CAN.c	   184  
; ..\CAN.c	   185    ///  -----------------------------------------------------------------------
; ..\CAN.c	   186    ///  Configuration of CAN Node 0:
; ..\CAN.c	   187    ///  -----------------------------------------------------------------------
; ..\CAN.c	   188  
; ..\CAN.c	   189    ///  General Configuration of the Node 0:
; ..\CAN.c	   190    ///  - set INIT and CCE
; ..\CAN.c	   191  
; ..\CAN.c	   192    CAN_NCR0.U     = 0x00000041;   // load node 0 control register
	mov	d15,#65
	movh.a	a2,#61440
	st.w	[a2]@los(0xf0004200),d15
.L424:

; ..\CAN.c	   193  
; ..\CAN.c	   194    ///  -----------------------------------------------------------------------
; ..\CAN.c	   195    ///  Configuration of CAN Node 1:
; ..\CAN.c	   196    ///  -----------------------------------------------------------------------
; ..\CAN.c	   197  
; ..\CAN.c	   198    ///  General Configuration of the Node 1:
; ..\CAN.c	   199    ///  - set INIT and CCE
; ..\CAN.c	   200  
; ..\CAN.c	   201    CAN_NCR1.U     = 0x00000041;   // load node 1 control register
	ld.w	d0,__const_f0004300
	mov.a	a5,d0
.L425:

; ..\CAN.c	   202    CAN_NIPR1.U    = 0x00000000;   // load node 1 interrupt pointer register
	mov	d0,#0
	st.w	[a5],d15
.L426:

; ..\CAN.c	   203  
; ..\CAN.c	   204    ///  Configuration of the Node 1 Error Counter:
; ..\CAN.c	   205    ///  - the error warning threshold value (warning level) is 96
; ..\CAN.c	   206  
; ..\CAN.c	   207    CAN_NECNT1.U   = 0x00600000;   // load node 1 error counter register
	movh	d1,#96
	st.w	[a2]@los(0xf0004308),d0
.L427:
	st.w	[a2]@los(0xf0004314),d1
.L428:

; ..\CAN.c	   208  
; ..\CAN.c	   209  
; ..\CAN.c	   210    CAN_NPCR1.U    = 0x00000000;   // load node 1 port control register
	st.w	[a2]@los(0xf000430c),d0
.L429:

; ..\CAN.c	   211  
; ..\CAN.c	   212    ///  Configuration of the used CAN Port Pins:
; ..\CAN.c	   213    ///  - P6.10 is used as  CAN node 1 input signal 1 ( RXDCAN1)
; ..\CAN.c	   214    ///  - the pull-up device is assigned
; ..\CAN.c	   215    ///  - output driver characteristic: strong driver, sharp edge
; ..\CAN.c	   216  
; ..\CAN.c	   217    P6_IOCR8.U     = (P6_IOCR8.U & ~0x00F00000) | 0x00200000; // load control 
	lea	a4,0xf0001218
	ld.w	d1,[a4]
.L430:
	insert	d1,d1,#2,#20,#4
	st.w	[a4],d1
.L431:

; ..\CAN.c	   218                                                              // register
; ..\CAN.c	   219  
; ..\CAN.c	   220    ///  - P6.11 is used as  CAN node 1 output signal 1 ( TXDCAN1)
; ..\CAN.c	   221    ///  - the push/pull function is activated
; ..\CAN.c	   222    ///  - output driver characteristic: strong driver, sharp edge
; ..\CAN.c	   223  
; ..\CAN.c	   224    P6_IOCR8.U     = (P6_IOCR8.U & ~0xF0000000) | 0x90000000; // load control 
	movh	d2,#36864
	ld.w	d1,[a4]
.L432:
	insert	d1,d1,#0,#28,#4
.L433:
	or	d1,d2
	st.w	[a4],d1
.L434:

; ..\CAN.c	   225                                                              // register
; ..\CAN.c	   226  
; ..\CAN.c	   227    ///  Configuration of the Node 1 Baud Rate:
; ..\CAN.c	   228    ///  - required baud rate = 1000000 baud
; ..\CAN.c	   229    ///  - real baud rate     = 1000000 baud
; ..\CAN.c	   230    ///  - sample point       = 80.00 %
; ..\CAN.c	   231    ///  - there are 11 time quanta before sample point
; ..\CAN.c	   232    ///  - there are 3 time quanta after sample point
; ..\CAN.c	   233    ///  - the (re)synchronization jump width is 1 time quanta
; ..\CAN.c	   234  
; ..\CAN.c	   235    CAN_NBTR1.U    = 0x00002A05;   // load  node 1 bit timing register
	mov	d1,#10757
	st.w	[a2]@los(0xf0004310),d1
.L435:

; ..\CAN.c	   236  
; ..\CAN.c	   237    ///  Configuration of the Frame Counter:
; ..\CAN.c	   238    ///  - Frame Counter Mode: the counter is incremented upon the reception 
; ..\CAN.c	   239    ///    and transmission of frames
; ..\CAN.c	   240    ///  - frame counter: 0x0000
; ..\CAN.c	   241  
; ..\CAN.c	   242    CAN_NFCR1.U    = 0x00000000;   // load  node 1 frame counter register
	st.w	[a2]@los(0xf0004318),d0
.L436:

; ..\CAN.c	   243  
; ..\CAN.c	   244    ///  -----------------------------------------------------------------------
; ..\CAN.c	   245    ///  Configuration of CAN Node 2:
; ..\CAN.c	   246    ///  -----------------------------------------------------------------------
; ..\CAN.c	   247  
; ..\CAN.c	   248    ///  General Configuration of the Node 2:
; ..\CAN.c	   249    ///  - set INIT and CCE
; ..\CAN.c	   250  
; ..\CAN.c	   251    CAN_NCR2.U     = 0x00000041;   // load node 2 control register
	st.w	[a2]@los(0xf0004400),d15
.L437:

; ..\CAN.c	   252  
; ..\CAN.c	   253    ///  -----------------------------------------------------------------------
; ..\CAN.c	   254    ///  Configuration of CAN Node 3:
; ..\CAN.c	   255    ///  -----------------------------------------------------------------------
; ..\CAN.c	   256  
; ..\CAN.c	   257    ///  General Configuration of the Node 3:
; ..\CAN.c	   258    ///  - set INIT and CCE
; ..\CAN.c	   259  
; ..\CAN.c	   260    CAN_NCR3.U     = 0x00000041;   // load node 3 control register
	st.w	[a2]@los(0xf0004500),d15
.L438:

; ..\CAN.c	   261  
; ..\CAN.c	   262    ///  -----------------------------------------------------------------------
; ..\CAN.c	   263    ///  Configuration of the CAN Message Object List Structure:
; ..\CAN.c	   264    ///  -----------------------------------------------------------------------
; ..\CAN.c	   265    ///  Allocate MOs for list 2:
; ..\CAN.c	   266    SetListCommand(0x02000002);  // MO0 for list 2
	ld.w	d15,__const_f00041c4
	mov.a	a2,d15
.L439:
	movh	d3,#32
	ld.w	d15,__const_02000002
	st.w	[a2],d15
.L5:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L5				; predicted taken
.L440:

; ..\CAN.c	   267    SetListCommand(0x02010002);  // MO1 for list 2
	ld.w	d15,__const_02010002
	st.w	[a2],d15
.L6:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L6				; predicted taken
.L441:

; ..\CAN.c	   268    SetListCommand(0x02020002);  // MO2 for list 2
	ld.w	d15,__const_02020002
	st.w	[a2],d15
.L7:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L7				; predicted taken
.L442:

; ..\CAN.c	   269    SetListCommand(0x02030002);  // MO3 for list 2
	ld.w	d15,__const_02030002
	st.w	[a2],d15
.L8:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L8				; predicted taken
.L443:

; ..\CAN.c	   270    SetListCommand(0x02040002);  // MO4 for list 2
	ld.w	d15,__const_02040002
	st.w	[a2],d15
.L9:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L9				; predicted taken
.L444:

; ..\CAN.c	   271    SetListCommand(0x02050002);  // MO5 for list 2
	ld.w	d15,__const_02050002
	st.w	[a2],d15
.L10:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L10				; predicted taken
.L445:

; ..\CAN.c	   272    SetListCommand(0x02060002);  // MO6 for list 2
	ld.w	d15,__const_02060002
	st.w	[a2],d15
.L11:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L11				; predicted taken
.L446:

; ..\CAN.c	   273    SetListCommand(0x02070002);  // MO7 for list 2
	ld.w	d15,__const_02070002
	st.w	[a2],d15
.L12:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L12				; predicted taken
.L447:

; ..\CAN.c	   274    SetListCommand(0x02080002);  // MO8 for list 2
	ld.w	d15,__const_02080002
	st.w	[a2],d15
.L13:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L13				; predicted taken
.L448:

; ..\CAN.c	   275    SetListCommand(0x02090002);  // MO9 for list 2
	ld.w	d15,__const_02090002
	st.w	[a2],d15
.L14:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L14				; predicted taken
.L449:

; ..\CAN.c	   276    SetListCommand(0x020A0002);  // MO10 for list 2
	ld.w	d15,__const_020a0002
	st.w	[a2],d15
.L15:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L15				; predicted taken
.L450:

; ..\CAN.c	   277    SetListCommand(0x020B0002);  // MO11 for list 2
	ld.w	d15,__const_020b0002
	st.w	[a2],d15
.L16:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L16				; predicted taken
.L451:

; ..\CAN.c	   278    SetListCommand(0x020C0002);  // MO12 for list 2
	ld.w	d15,__const_020c0002
	st.w	[a2],d15
.L17:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L17				; predicted taken
.L452:

; ..\CAN.c	   279    SetListCommand(0x020D0002);  // MO13 for list 2
	ld.w	d15,__const_020d0002
	st.w	[a2],d15
.L18:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L18				; predicted taken
.L453:

; ..\CAN.c	   280    SetListCommand(0x020E0002);  // MO14 for list 2
	ld.w	d15,__const_020e0002
	st.w	[a2],d15
.L19:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L19				; predicted taken
.L454:

; ..\CAN.c	   281    SetListCommand(0x020F0002);  // MO15 for list 2
	ld.w	d15,__const_020f0002
	st.w	[a2],d15
.L20:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L20				; predicted taken
.L455:

; ..\CAN.c	   282    SetListCommand(0x02100002);  // MO16 for list 2
	ld.w	d15,__const_02100002
	st.w	[a2],d15
.L21:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L21				; predicted taken
.L456:

; ..\CAN.c	   283    SetListCommand(0x02110002);  // MO17 for list 2
	ld.w	d15,__const_02110002
	st.w	[a2],d15
.L22:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L22				; predicted taken
.L457:

; ..\CAN.c	   284    SetListCommand(0x02120002);  // MO18 for list 2
	ld.w	d15,__const_02120002
	st.w	[a2],d15
.L23:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L23				; predicted taken
.L458:

; ..\CAN.c	   285    SetListCommand(0x02130002);  // MO19 for list 2
	ld.w	d15,__const_02130002
	st.w	[a2],d15
.L24:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L24				; predicted taken
.L459:

; ..\CAN.c	   286    SetListCommand(0x02140002);  // MO20 for list 2
	ld.w	d15,__const_02140002
	st.w	[a2],d15
.L25:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L25				; predicted taken
.L460:

; ..\CAN.c	   287    SetListCommand(0x02150002);  // MO21 for list 2
	ld.w	d15,__const_02150002
	st.w	[a2],d15
.L26:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L26				; predicted taken
.L461:

; ..\CAN.c	   288    SetListCommand(0x02160002);  // MO22 for list 2
	ld.w	d15,__const_02160002
	st.w	[a2],d15
.L27:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L27				; predicted taken
.L462:

; ..\CAN.c	   289    SetListCommand(0x02170002);  // MO23 for list 2
	ld.w	d15,__const_02170002
	st.w	[a2],d15
.L28:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L28				; predicted taken
.L463:

; ..\CAN.c	   290    SetListCommand(0x02180002);  // MO24 for list 2
	ld.w	d15,__const_02180002
	st.w	[a2],d15
.L29:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L29				; predicted taken
.L464:

; ..\CAN.c	   291    SetListCommand(0x02190002);  // MO25 for list 2
	ld.w	d15,__const_02190002
	st.w	[a2],d15
.L30:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L30				; predicted taken
.L465:

; ..\CAN.c	   292    SetListCommand(0x021A0002);  // MO26 for list 2
	ld.w	d15,__const_021a0002
	st.w	[a2],d15
.L31:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L31				; predicted taken
.L466:

; ..\CAN.c	   293    SetListCommand(0x021B0002);  // MO27 for list 2
	ld.w	d15,__const_021b0002
	st.w	[a2],d15
.L32:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L32				; predicted taken
.L467:

; ..\CAN.c	   294    SetListCommand(0x021C0002);  // MO28 for list 2
	ld.w	d15,__const_021c0002
	st.w	[a2],d15
.L33:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L33				; predicted taken
.L468:

; ..\CAN.c	   295    SetListCommand(0x021D0002);  // MO29 for list 2
	ld.w	d15,__const_021d0002
	st.w	[a2],d15
.L34:
	ld.bu	d15,[a15]
	jnz.t	d15:0,.L34				; predicted taken
.L469:

; ..\CAN.c	   296  
; ..\CAN.c	   297    ///  -----------------------------------------------------------------------
; ..\CAN.c	   298    ///  Configuration of the CAN Message Objects 0 - 127:
; ..\CAN.c	   299    ///  -----------------------------------------------------------------------
; ..\CAN.c	   300    ///  -----------------------------------------------------------------------
; ..\CAN.c	   301    ///  Configuration of Message Object 0:
; ..\CAN.c	   302    ///  -----------------------------------------------------------------------
; ..\CAN.c	   303    ///  - message object 0 is valid
; ..\CAN.c	   304    ///  - message object is used as transmit object
; ..\CAN.c	   305    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   306  
; ..\CAN.c	   307    CAN_MOCTR0.U   = 0x0EA80000;   // load MO0 control register
	movh	d2,#3752
	ld.w	d15,__const_f000501c
	mov.a	a15,d15
.L470:
	st.w	[a15],d2
.L471:

; ..\CAN.c	   308  
; ..\CAN.c	   309    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   310    ///  - 8 valid data bytes
; ..\CAN.c	   311  
; ..\CAN.c	   312    CAN_MOFCR0.U   = 0x08000000;   // load MO0 function control register
	movh	d0,#2048
	movh.a	a2,#61440
	st.w	[a2]@los(0xf0005000),d0
.L472:

; ..\CAN.c	   313  
; ..\CAN.c	   314  
; ..\CAN.c	   315    CAN_MOFGPR0.U  = 0x00000000;   // load MO0 FIFO/gateway pointer register
	mov	d1,#0
	st.w	[a2]@los(0xf0005004),d1
.L368:

; ..\CAN.c	   316  
; ..\CAN.c	   317    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   318    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   319  
; ..\CAN.c	   320    CAN_MOAMR0.U   = 0x3FFFFFFF;   // load MO0 acceptance mask register
	ld.w	d4,__const_3fffffff
.L473:
	st.w	[a2]@los(0xf000500c),d4
.L474:

; ..\CAN.c	   321  
; ..\CAN.c	   322    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   323    ///    order (like class 1)
; ..\CAN.c	   324    ///  - standard 11-bit identifier
; ..\CAN.c	   325    ///  - identifier 11-bit:      0x7FF
; ..\CAN.c	   326  
; ..\CAN.c	   327    CAN_MOAR0.U    = 0xDFFC0000;   // load MO0 arbitration register
	movh	d15,#57340
	st.w	[a2]@los(0xf0005018),d15
.L475:

; ..\CAN.c	   328  
; ..\CAN.c	   329    CAN_MODATAL0.U  = 0x00000000;  // load MO0 data register low
	st.w	[a2]@los(0xf0005010),d1
.L476:

; ..\CAN.c	   330    CAN_MODATAH0.U  = 0x00000000;  // load MO0 data register high
	st.w	[a2]@los(0xf0005014),d1
.L477:

; ..\CAN.c	   331  
; ..\CAN.c	   332    ///  - use message pending register 0 bit position 0
; ..\CAN.c	   333  
; ..\CAN.c	   334    CAN_MOIPR0.U   = 0x00000000;   // load MO0 interrupt pointer register
	st.w	[a2]@los(0xf0005008),d1
.L478:

; ..\CAN.c	   335    CAN_MOCTR0.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L479:

; ..\CAN.c	   336  
; ..\CAN.c	   337    ///  -----------------------------------------------------------------------
; ..\CAN.c	   338    ///  Configuration of Message Object 1:
; ..\CAN.c	   339    ///  -----------------------------------------------------------------------
; ..\CAN.c	   340    ///  - message object 1 is valid
; ..\CAN.c	   341    ///  - message object is used as transmit object
; ..\CAN.c	   342    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   343  
; ..\CAN.c	   344    CAN_MOCTR1.U   = 0x0EA80000;   // load MO1 control register
	ld.w	d15,__const_f000503c
	mov.a	a15,d15
.L480:
	st.w	[a15],d2
.L481:

; ..\CAN.c	   345  
; ..\CAN.c	   346    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   347    ///  - 8 valid data bytes
; ..\CAN.c	   348  
; ..\CAN.c	   349    CAN_MOFCR1.U   = 0x08000000;   // load MO1 function control register
	st.w	[a2]@los(0xf0005020),d0
.L482:

; ..\CAN.c	   350  
; ..\CAN.c	   351  
; ..\CAN.c	   352    CAN_MOFGPR1.U  = 0x00000000;   // load MO1 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005024),d1
.L483:

; ..\CAN.c	   353  
; ..\CAN.c	   354    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   355    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   356  
; ..\CAN.c	   357    CAN_MOAMR1.U   = 0x3FFFFFFF;   // load MO1 acceptance mask register
	st.w	[a2]@los(0xf000502c),d4
.L484:

; ..\CAN.c	   358  
; ..\CAN.c	   359    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   360    ///    order (like class 1)
; ..\CAN.c	   361    ///  - standard 11-bit identifier
; ..\CAN.c	   362    ///  - identifier 11-bit:      0x7FE
; ..\CAN.c	   363  
; ..\CAN.c	   364    CAN_MOAR1.U    = 0xDFF80000;   // load MO1 arbitration register
	movh	d15,#57336
	st.w	[a2]@los(0xf0005038),d15
.L485:

; ..\CAN.c	   365  
; ..\CAN.c	   366    CAN_MODATAL1.U  = 0x00000000;  // load MO1 data register low
	st.w	[a2]@los(0xf0005030),d1
.L486:

; ..\CAN.c	   367    CAN_MODATAH1.U  = 0x00000000;  // load MO1 data register high
	st.w	[a2]@los(0xf0005034),d1
.L487:

; ..\CAN.c	   368  
; ..\CAN.c	   369    ///  - use message pending register 0 bit position 1
; ..\CAN.c	   370  
; ..\CAN.c	   371    CAN_MOIPR1.U   = 0x00000101;   // load MO1 interrupt pointer register
	mov	d15,#257
	st.w	[a2]@los(0xf0005028),d15
.L488:

; ..\CAN.c	   372    CAN_MOCTR1.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L489:

; ..\CAN.c	   373  
; ..\CAN.c	   374    ///  -----------------------------------------------------------------------
; ..\CAN.c	   375    ///  Configuration of Message Object 2:
; ..\CAN.c	   376    ///  -----------------------------------------------------------------------
; ..\CAN.c	   377    ///  - message object 2 is valid
; ..\CAN.c	   378    ///  - message object is used as receive object
; ..\CAN.c	   379    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   380  
; ..\CAN.c	   381    CAN_MOCTR2.U   = 0x00A00000;   // load MO2 control register
	movh	d5,#160
	ld.w	d15,__const_f000505c
	mov.a	a15,d15
.L490:
	st.w	[a15],d5
.L491:

; ..\CAN.c	   382  
; ..\CAN.c	   383    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   384    ///  - 8 valid data bytes
; ..\CAN.c	   385    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	   386    ///    reception of a frame
; ..\CAN.c	   387  
; ..\CAN.c	   388    CAN_MOFCR2.U   = 0x08010000;   // load MO2 function control register
	movh	d6,#2049
	st.w	[a2]@los(0xf0005040),d6
.L492:

; ..\CAN.c	   389  
; ..\CAN.c	   390  
; ..\CAN.c	   391    CAN_MOFGPR2.U  = 0x00000000;   // load MO2 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005044),d1
.L493:

; ..\CAN.c	   392  
; ..\CAN.c	   393    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   394    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   395  
; ..\CAN.c	   396    CAN_MOAMR2.U   = 0x3FFFFFFF;   // load MO2 acceptance mask register
	st.w	[a2]@los(0xf000504c),d4
.L494:

; ..\CAN.c	   397  
; ..\CAN.c	   398    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   399    ///    order (like class 1)
; ..\CAN.c	   400    ///  - standard 11-bit identifier
; ..\CAN.c	   401    ///  - identifier 11-bit:      0x7FD
; ..\CAN.c	   402  
; ..\CAN.c	   403    CAN_MOAR2.U    = 0xDFF40000;   // load MO2 arbitration register
	movh	d15,#57332
	st.w	[a2]@los(0xf0005058),d15
.L495:

; ..\CAN.c	   404  
; ..\CAN.c	   405    ///  - use message pending register 0 bit position 2
; ..\CAN.c	   406    ///  - receive interrupt node pointer: MultiCAN SRN 2
; ..\CAN.c	   407  
; ..\CAN.c	   408    CAN_MOIPR2.U   = 0x00000202;   // load MO2 interrupt pointer register
	mov	d15,#514
	st.w	[a2]@los(0xf0005048),d15
.L496:

; ..\CAN.c	   409    CAN_MOCTR2.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L497:

; ..\CAN.c	   410  
; ..\CAN.c	   411    ///  -----------------------------------------------------------------------
; ..\CAN.c	   412    ///  Configuration of Message Object 3:
; ..\CAN.c	   413    ///  -----------------------------------------------------------------------
; ..\CAN.c	   414    ///  - message object 3 is valid
; ..\CAN.c	   415    ///  - message object is used as receive object
; ..\CAN.c	   416    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   417  
; ..\CAN.c	   418    CAN_MOCTR3.U   = 0x00A00000;   // load MO3 control register
	ld.w	d15,__const_f000507c
	mov.a	a15,d15
.L498:
	st.w	[a15],d5
.L499:

; ..\CAN.c	   419  
; ..\CAN.c	   420    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   421    ///  - 8 valid data bytes
; ..\CAN.c	   422    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	   423    ///    reception of a frame
; ..\CAN.c	   424  
; ..\CAN.c	   425    CAN_MOFCR3.U   = 0x08010000;   // load MO3 function control register
	st.w	[a2]@los(0xf0005060),d6
.L500:

; ..\CAN.c	   426  
; ..\CAN.c	   427  
; ..\CAN.c	   428    CAN_MOFGPR3.U  = 0x00000000;   // load MO3 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005064),d1
.L501:

; ..\CAN.c	   429  
; ..\CAN.c	   430    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   431    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   432  
; ..\CAN.c	   433    CAN_MOAMR3.U   = 0x3FFFFFFF;   // load MO3 acceptance mask register
	st.w	[a2]@los(0xf000506c),d4
.L502:

; ..\CAN.c	   434  
; ..\CAN.c	   435    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   436    ///    order (like class 1)
; ..\CAN.c	   437    ///  - standard 11-bit identifier
; ..\CAN.c	   438    ///  - identifier 11-bit:      0x7FC
; ..\CAN.c	   439  
; ..\CAN.c	   440    CAN_MOAR3.U    = 0xDFF00000;   // load MO3 arbitration register
	movh	d15,#57328
	st.w	[a2]@los(0xf0005078),d15
.L503:

; ..\CAN.c	   441  
; ..\CAN.c	   442    ///  - use message pending register 0 bit position 3
; ..\CAN.c	   443    ///  - receive interrupt node pointer: MultiCAN SRN 3
; ..\CAN.c	   444  
; ..\CAN.c	   445    CAN_MOIPR3.U   = 0x00000303;   // load MO3 interrupt pointer register
	mov	d15,#771
	st.w	[a2]@los(0xf0005068),d15
.L504:

; ..\CAN.c	   446    CAN_MOCTR3.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L505:

; ..\CAN.c	   447  
; ..\CAN.c	   448    ///  -----------------------------------------------------------------------
; ..\CAN.c	   449    ///  Configuration of Message Object 4:
; ..\CAN.c	   450    ///  -----------------------------------------------------------------------
; ..\CAN.c	   451    ///  - message object 4 is valid
; ..\CAN.c	   452    ///  - message object is used as receive object
; ..\CAN.c	   453    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   454  
; ..\CAN.c	   455    CAN_MOCTR4.U   = 0x00A00000;   // load MO4 control register
	ld.w	d15,__const_f000509c
	mov.a	a15,d15
.L506:
	st.w	[a15],d5
.L507:

; ..\CAN.c	   456  
; ..\CAN.c	   457    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   458    ///  - 8 valid data bytes
; ..\CAN.c	   459    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	   460    ///    reception of a frame
; ..\CAN.c	   461  
; ..\CAN.c	   462    CAN_MOFCR4.U   = 0x08010000;   // load MO4 function control register
	st.w	[a2]@los(0xf0005080),d6
.L508:

; ..\CAN.c	   463  
; ..\CAN.c	   464  
; ..\CAN.c	   465    CAN_MOFGPR4.U  = 0x00000000;   // load MO4 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005084),d1
.L509:

; ..\CAN.c	   466  
; ..\CAN.c	   467    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   468    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   469  
; ..\CAN.c	   470    CAN_MOAMR4.U   = 0x3FFFFFFF;   // load MO4 acceptance mask register
	st.w	[a2]@los(0xf000508c),d4
.L510:

; ..\CAN.c	   471  
; ..\CAN.c	   472    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   473    ///    order (like class 1)
; ..\CAN.c	   474    ///  - standard 11-bit identifier
; ..\CAN.c	   475    ///  - identifier 11-bit:      0x7FB
; ..\CAN.c	   476  
; ..\CAN.c	   477    CAN_MOAR4.U    = 0xDFEC0000;   // load MO4 arbitration register
	movh	d15,#57324
	st.w	[a2]@los(0xf0005098),d15
.L511:

; ..\CAN.c	   478  
; ..\CAN.c	   479    ///  - use message pending register 0 bit position 4
; ..\CAN.c	   480    ///  - receive interrupt node pointer: MultiCAN SRN 4
; ..\CAN.c	   481  
; ..\CAN.c	   482    CAN_MOIPR4.U   = 0x00000404;   // load MO4 interrupt pointer register
	mov	d15,#1028
	st.w	[a2]@los(0xf0005088),d15
.L512:

; ..\CAN.c	   483    CAN_MOCTR4.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L513:

; ..\CAN.c	   484  
; ..\CAN.c	   485    ///  -----------------------------------------------------------------------
; ..\CAN.c	   486    ///  Configuration of Message Object 5:
; ..\CAN.c	   487    ///  -----------------------------------------------------------------------
; ..\CAN.c	   488    ///  - message object 5 is valid
; ..\CAN.c	   489    ///  - message object is used as receive object
; ..\CAN.c	   490    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   491  
; ..\CAN.c	   492    CAN_MOCTR5.U   = 0x00A00000;   // load MO5 control register
	ld.w	d15,__const_f00050bc
	mov.a	a15,d15
.L514:
	st.w	[a15],d5
.L515:

; ..\CAN.c	   493  
; ..\CAN.c	   494    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   495    ///  - 8 valid data bytes
; ..\CAN.c	   496    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	   497    ///    reception of a frame
; ..\CAN.c	   498  
; ..\CAN.c	   499    CAN_MOFCR5.U   = 0x08010000;   // load MO5 function control register
	st.w	[a2]@los(0xf00050a0),d6
.L516:

; ..\CAN.c	   500  
; ..\CAN.c	   501  
; ..\CAN.c	   502    CAN_MOFGPR5.U  = 0x00000000;   // load MO5 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00050a4),d1
.L517:

; ..\CAN.c	   503  
; ..\CAN.c	   504    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   505    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   506  
; ..\CAN.c	   507    CAN_MOAMR5.U   = 0x3FFFFFFF;   // load MO5 acceptance mask register
	st.w	[a2]@los(0xf00050ac),d4
.L518:

; ..\CAN.c	   508  
; ..\CAN.c	   509    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   510    ///    order (like class 1)
; ..\CAN.c	   511    ///  - standard 11-bit identifier
; ..\CAN.c	   512    ///  - identifier 11-bit:      0x7FA
; ..\CAN.c	   513  
; ..\CAN.c	   514    CAN_MOAR5.U    = 0xDFE80000;   // load MO5 arbitration register
	movh	d15,#57320
	st.w	[a2]@los(0xf00050b8),d15
.L519:

; ..\CAN.c	   515  
; ..\CAN.c	   516    ///  - use message pending register 0 bit position 5
; ..\CAN.c	   517    ///  - receive interrupt node pointer: MultiCAN SRN 5
; ..\CAN.c	   518  
; ..\CAN.c	   519    CAN_MOIPR5.U   = 0x00000505;   // load MO5 interrupt pointer register
	mov	d15,#1285
	st.w	[a2]@los(0xf00050a8),d15
.L520:

; ..\CAN.c	   520    CAN_MOCTR5.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L521:

; ..\CAN.c	   521  
; ..\CAN.c	   522    ///  -----------------------------------------------------------------------
; ..\CAN.c	   523    ///  Configuration of Message Object 6:
; ..\CAN.c	   524    ///  -----------------------------------------------------------------------
; ..\CAN.c	   525    ///  - message object 6 is valid
; ..\CAN.c	   526    ///  - message object is used as receive object
; ..\CAN.c	   527    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   528  
; ..\CAN.c	   529    CAN_MOCTR6.U   = 0x00A00000;   // load MO6 control register
	ld.w	d15,__const_f00050dc
	mov.a	a15,d15
.L522:
	st.w	[a15],d5
.L523:

; ..\CAN.c	   530  
; ..\CAN.c	   531    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   532    ///  - 8 valid data bytes
; ..\CAN.c	   533    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	   534    ///    reception of a frame
; ..\CAN.c	   535  
; ..\CAN.c	   536    CAN_MOFCR6.U   = 0x08010000;   // load MO6 function control register
	st.w	[a2]@los(0xf00050c0),d6
.L524:

; ..\CAN.c	   537  
; ..\CAN.c	   538  
; ..\CAN.c	   539    CAN_MOFGPR6.U  = 0x00000000;   // load MO6 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00050c4),d1
.L525:

; ..\CAN.c	   540  
; ..\CAN.c	   541    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   542    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   543  
; ..\CAN.c	   544    CAN_MOAMR6.U   = 0x3FFFFFFF;   // load MO6 acceptance mask register
	st.w	[a2]@los(0xf00050cc),d4
.L526:

; ..\CAN.c	   545  
; ..\CAN.c	   546    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   547    ///    order (like class 1)
; ..\CAN.c	   548    ///  - standard 11-bit identifier
; ..\CAN.c	   549    ///  - identifier 11-bit:      0x7F9
; ..\CAN.c	   550  
; ..\CAN.c	   551    CAN_MOAR6.U    = 0xDFE40000;   // load MO6 arbitration register
	movh	d15,#57316
	st.w	[a2]@los(0xf00050d8),d15
.L527:

; ..\CAN.c	   552  
; ..\CAN.c	   553    ///  - use message pending register 0 bit position 6
; ..\CAN.c	   554    ///  - receive interrupt node pointer: MultiCAN SRN 6
; ..\CAN.c	   555  
; ..\CAN.c	   556    CAN_MOIPR6.U   = 0x00000606;   // load MO6 interrupt pointer register
	mov	d15,#1542
	st.w	[a2]@los(0xf00050c8),d15
.L528:

; ..\CAN.c	   557    CAN_MOCTR6.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L529:

; ..\CAN.c	   558  
; ..\CAN.c	   559    ///  -----------------------------------------------------------------------
; ..\CAN.c	   560    ///  Configuration of Message Object 7:
; ..\CAN.c	   561    ///  -----------------------------------------------------------------------
; ..\CAN.c	   562    ///  - message object 7 is valid
; ..\CAN.c	   563    ///  - message object is used as receive object
; ..\CAN.c	   564    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   565  
; ..\CAN.c	   566    CAN_MOCTR7.U   = 0x00A00000;   // load MO7 control register
	ld.w	d15,__const_f00050fc
	mov.a	a15,d15
.L530:
	st.w	[a15],d5
.L531:

; ..\CAN.c	   567  
; ..\CAN.c	   568    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   569    ///  - 8 valid data bytes
; ..\CAN.c	   570    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	   571    ///    reception of a frame
; ..\CAN.c	   572  
; ..\CAN.c	   573    CAN_MOFCR7.U   = 0x08010000;   // load MO7 function control register
	st.w	[a2]@los(0xf00050e0),d6
.L532:

; ..\CAN.c	   574  
; ..\CAN.c	   575  
; ..\CAN.c	   576    CAN_MOFGPR7.U  = 0x00000000;   // load MO7 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00050e4),d1
.L533:

; ..\CAN.c	   577  
; ..\CAN.c	   578    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   579    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   580  
; ..\CAN.c	   581    CAN_MOAMR7.U   = 0x3FFFFFFF;   // load MO7 acceptance mask register
	st.w	[a2]@los(0xf00050ec),d4
.L534:

; ..\CAN.c	   582  
; ..\CAN.c	   583    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   584    ///    order (like class 1)
; ..\CAN.c	   585    ///  - standard 11-bit identifier
; ..\CAN.c	   586    ///  - identifier 11-bit:      0x7F8
; ..\CAN.c	   587  
; ..\CAN.c	   588    CAN_MOAR7.U    = 0xDFE00000;   // load MO7 arbitration register
	movh	d15,#57312
	st.w	[a2]@los(0xf00050f8),d15
.L535:

; ..\CAN.c	   589  
; ..\CAN.c	   590    ///  - use message pending register 0 bit position 7
; ..\CAN.c	   591    ///  - receive interrupt node pointer: MultiCAN SRN 7
; ..\CAN.c	   592  
; ..\CAN.c	   593    CAN_MOIPR7.U   = 0x00000707;   // load MO7 interrupt pointer register
	mov	d15,#1799
	st.w	[a2]@los(0xf00050e8),d15
.L536:

; ..\CAN.c	   594    CAN_MOCTR7.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L537:

; ..\CAN.c	   595  
; ..\CAN.c	   596    ///  -----------------------------------------------------------------------
; ..\CAN.c	   597    ///  Configuration of Message Object 8:
; ..\CAN.c	   598    ///  -----------------------------------------------------------------------
; ..\CAN.c	   599    ///  - message object 8 is valid
; ..\CAN.c	   600    ///  - message object is used as receive object
; ..\CAN.c	   601    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   602  
; ..\CAN.c	   603    CAN_MOCTR8.U   = 0x00A00000;   // load MO8 control register
	ld.w	d15,__const_f000511c
	mov.a	a15,d15
.L538:
	st.w	[a15],d5
.L539:

; ..\CAN.c	   604  
; ..\CAN.c	   605    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   606    ///  - 8 valid data bytes
; ..\CAN.c	   607    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	   608    ///    reception of a frame
; ..\CAN.c	   609  
; ..\CAN.c	   610    CAN_MOFCR8.U   = 0x08010000;   // load MO8 function control register
	st.w	[a2]@los(0xf0005100),d6
.L540:

; ..\CAN.c	   611  
; ..\CAN.c	   612  
; ..\CAN.c	   613    CAN_MOFGPR8.U  = 0x00000000;   // load MO8 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005104),d1
.L541:

; ..\CAN.c	   614  
; ..\CAN.c	   615    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   616    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   617  
; ..\CAN.c	   618    CAN_MOAMR8.U   = 0x3FFFFFFF;   // load MO8 acceptance mask register
	st.w	[a2]@los(0xf000510c),d4
.L542:

; ..\CAN.c	   619  
; ..\CAN.c	   620    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   621    ///    order (like class 1)
; ..\CAN.c	   622    ///  - standard 11-bit identifier
; ..\CAN.c	   623    ///  - identifier 11-bit:      0x7F7
; ..\CAN.c	   624  
; ..\CAN.c	   625    CAN_MOAR8.U    = 0xDFDC0000;   // load MO8 arbitration register
	movh	d15,#57308
	st.w	[a2]@los(0xf0005118),d15
.L543:

; ..\CAN.c	   626  
; ..\CAN.c	   627    ///  - use message pending register 0 bit position 8
; ..\CAN.c	   628    ///  - receive interrupt node pointer: MultiCAN SRN 8
; ..\CAN.c	   629  
; ..\CAN.c	   630    CAN_MOIPR8.U   = 0x00000808;   // load MO8 interrupt pointer register
	mov	d15,#2056
	st.w	[a2]@los(0xf0005108),d15
.L544:

; ..\CAN.c	   631    CAN_MOCTR8.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L545:

; ..\CAN.c	   632  
; ..\CAN.c	   633    ///  -----------------------------------------------------------------------
; ..\CAN.c	   634    ///  Configuration of Message Object 9:
; ..\CAN.c	   635    ///  -----------------------------------------------------------------------
; ..\CAN.c	   636    ///  - message object 9 is valid
; ..\CAN.c	   637    ///  - message object is used as receive object
; ..\CAN.c	   638    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   639  
; ..\CAN.c	   640    CAN_MOCTR9.U   = 0x00A00000;   // load MO9 control register
	ld.w	d15,__const_f000513c
	mov.a	a15,d15
.L546:
	st.w	[a15],d5
.L547:

; ..\CAN.c	   641  
; ..\CAN.c	   642    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   643    ///  - 8 valid data bytes
; ..\CAN.c	   644    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	   645    ///    reception of a frame
; ..\CAN.c	   646  
; ..\CAN.c	   647    CAN_MOFCR9.U   = 0x08010000;   // load MO9 function control register
	st.w	[a2]@los(0xf0005120),d6
.L548:

; ..\CAN.c	   648  
; ..\CAN.c	   649  
; ..\CAN.c	   650    CAN_MOFGPR9.U  = 0x00000000;   // load MO9 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005124),d1
.L549:

; ..\CAN.c	   651  
; ..\CAN.c	   652    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   653    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   654  
; ..\CAN.c	   655    CAN_MOAMR9.U   = 0x3FFFFFFF;   // load MO9 acceptance mask register
	st.w	[a2]@los(0xf000512c),d4
.L550:

; ..\CAN.c	   656  
; ..\CAN.c	   657    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   658    ///    order (like class 1)
; ..\CAN.c	   659    ///  - standard 11-bit identifier
; ..\CAN.c	   660    ///  - identifier 11-bit:      0x7F6
; ..\CAN.c	   661  
; ..\CAN.c	   662    CAN_MOAR9.U    = 0xDFD80000;   // load MO9 arbitration register
	movh	d15,#57304
	st.w	[a2]@los(0xf0005138),d15
.L551:

; ..\CAN.c	   663  
; ..\CAN.c	   664    ///  - use message pending register 0 bit position 9
; ..\CAN.c	   665    ///  - receive interrupt node pointer: MultiCAN SRN 9
; ..\CAN.c	   666  
; ..\CAN.c	   667    CAN_MOIPR9.U   = 0x00000909;   // load MO9 interrupt pointer register
	mov	d15,#2313
	st.w	[a2]@los(0xf0005128),d15
.L552:

; ..\CAN.c	   668    CAN_MOCTR9.U   = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L553:

; ..\CAN.c	   669  
; ..\CAN.c	   670    ///  -----------------------------------------------------------------------
; ..\CAN.c	   671    ///  Configuration of Message Object 10:
; ..\CAN.c	   672    ///  -----------------------------------------------------------------------
; ..\CAN.c	   673    ///  - message object 10 is valid
; ..\CAN.c	   674    ///  - message object is used as receive object
; ..\CAN.c	   675    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   676  
; ..\CAN.c	   677    CAN_MOCTR10.U  = 0x00A00000;   // load MO10 control register
	ld.w	d15,__const_f000515c
	mov.a	a15,d15
.L554:
	st.w	[a15],d5
.L555:

; ..\CAN.c	   678  
; ..\CAN.c	   679    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   680    ///  - 8 valid data bytes
; ..\CAN.c	   681  
; ..\CAN.c	   682    CAN_MOFCR10.U  = 0x08000000;   // load MO10 function control register
	st.w	[a2]@los(0xf0005140),d0
.L556:

; ..\CAN.c	   683  
; ..\CAN.c	   684  
; ..\CAN.c	   685    CAN_MOFGPR10.U  = 0x00000000;  // load MO10 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005144),d1
.L557:

; ..\CAN.c	   686  
; ..\CAN.c	   687    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   688    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   689  
; ..\CAN.c	   690    CAN_MOAMR10.U  = 0x3FFFFFFF;   // load MO10 acceptance mask register
	st.w	[a2]@los(0xf000514c),d4
.L558:

; ..\CAN.c	   691  
; ..\CAN.c	   692    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   693    ///    order (like class 1)
; ..\CAN.c	   694    ///  - standard 11-bit identifier
; ..\CAN.c	   695    ///  - identifier 11-bit:      0x7F5
; ..\CAN.c	   696  
; ..\CAN.c	   697    CAN_MOAR10.U   = 0xDFD40000;   // load MO10 arbitration register
	movh	d15,#57300
	st.w	[a2]@los(0xf0005158),d15
.L559:

; ..\CAN.c	   698  
; ..\CAN.c	   699    ///  - use message pending register 0 bit position 10
; ..\CAN.c	   700  
; ..\CAN.c	   701    CAN_MOIPR10.U  = 0x00000A00;   // load MO10 interrupt pointer register
	mov	d15,#2560
	st.w	[a2]@los(0xf0005148),d15
.L560:

; ..\CAN.c	   702    CAN_MOCTR10.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L561:

; ..\CAN.c	   703  
; ..\CAN.c	   704    ///  -----------------------------------------------------------------------
; ..\CAN.c	   705    ///  Configuration of Message Object 11:
; ..\CAN.c	   706    ///  -----------------------------------------------------------------------
; ..\CAN.c	   707    ///  - message object 11 is valid
; ..\CAN.c	   708    ///  - message object is used as transmit object
; ..\CAN.c	   709    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   710  
; ..\CAN.c	   711    CAN_MOCTR11.U  = 0x0EA80000;   // load MO11 control register
	ld.w	d15,__const_f000517c
	mov.a	a15,d15
.L562:
	st.w	[a15],d2
.L563:

; ..\CAN.c	   712  
; ..\CAN.c	   713    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   714    ///  - 8 valid data bytes
; ..\CAN.c	   715  
; ..\CAN.c	   716    CAN_MOFCR11.U  = 0x08000000;   // load MO11 function control register
	st.w	[a2]@los(0xf0005160),d0
.L564:

; ..\CAN.c	   717  
; ..\CAN.c	   718  
; ..\CAN.c	   719    CAN_MOFGPR11.U  = 0x00000000;  // load MO11 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005164),d1
.L565:

; ..\CAN.c	   720  
; ..\CAN.c	   721    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   722    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   723  
; ..\CAN.c	   724    CAN_MOAMR11.U  = 0x3FFFFFFF;   // load MO11 acceptance mask register
	st.w	[a2]@los(0xf000516c),d4
.L566:

; ..\CAN.c	   725  
; ..\CAN.c	   726    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   727    ///    order (like class 1)
; ..\CAN.c	   728    ///  - standard 11-bit identifier
; ..\CAN.c	   729    ///  - identifier 11-bit:      0x7F4
; ..\CAN.c	   730  
; ..\CAN.c	   731    CAN_MOAR11.U   = 0xDFD00000;   // load MO11 arbitration register
	movh	d15,#57296
	st.w	[a2]@los(0xf0005178),d15
.L567:

; ..\CAN.c	   732  
; ..\CAN.c	   733    CAN_MODATAL11.U  = 0x00000000; // load MO11 data register low
	st.w	[a2]@los(0xf0005170),d1
.L568:

; ..\CAN.c	   734    CAN_MODATAH11.U  = 0x00000000; // load MO11 data register high
	st.w	[a2]@los(0xf0005174),d1
.L569:

; ..\CAN.c	   735  
; ..\CAN.c	   736    ///  - use message pending register 0 bit position 11
; ..\CAN.c	   737  
; ..\CAN.c	   738    CAN_MOIPR11.U  = 0x00000B00;   // load MO11 interrupt pointer register
	mov	d15,#2816
	st.w	[a2]@los(0xf0005168),d15
.L570:

; ..\CAN.c	   739    CAN_MOCTR11.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L571:

; ..\CAN.c	   740  
; ..\CAN.c	   741    ///  -----------------------------------------------------------------------
; ..\CAN.c	   742    ///  Configuration of Message Object 12:
; ..\CAN.c	   743    ///  -----------------------------------------------------------------------
; ..\CAN.c	   744    ///  - message object 12 is valid
; ..\CAN.c	   745    ///  - message object is used as transmit object
; ..\CAN.c	   746    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   747  
; ..\CAN.c	   748    CAN_MOCTR12.U  = 0x0EA80000;   // load MO12 control register
	ld.w	d15,__const_f000519c
	mov.a	a15,d15
.L572:
	st.w	[a15],d2
.L573:

; ..\CAN.c	   749  
; ..\CAN.c	   750    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   751    ///  - 8 valid data bytes
; ..\CAN.c	   752  
; ..\CAN.c	   753    CAN_MOFCR12.U  = 0x08000000;   // load MO12 function control register
	st.w	[a2]@los(0xf0005180),d0
.L574:

; ..\CAN.c	   754  
; ..\CAN.c	   755  
; ..\CAN.c	   756    CAN_MOFGPR12.U  = 0x00000000;  // load MO12 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005184),d1
.L575:

; ..\CAN.c	   757  
; ..\CAN.c	   758    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   759    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   760  
; ..\CAN.c	   761    CAN_MOAMR12.U  = 0x3FFFFFFF;   // load MO12 acceptance mask register
	st.w	[a2]@los(0xf000518c),d4
.L576:

; ..\CAN.c	   762  
; ..\CAN.c	   763    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   764    ///    order (like class 1)
; ..\CAN.c	   765    ///  - standard 11-bit identifier
; ..\CAN.c	   766    ///  - identifier 11-bit:      0x7F3
; ..\CAN.c	   767  
; ..\CAN.c	   768    CAN_MOAR12.U   = 0xDFCC0000;   // load MO12 arbitration register
	movh	d15,#57292
	st.w	[a2]@los(0xf0005198),d15
.L577:

; ..\CAN.c	   769  
; ..\CAN.c	   770    CAN_MODATAL12.U  = 0x00000000; // load MO12 data register low
	st.w	[a2]@los(0xf0005190),d1
.L578:

; ..\CAN.c	   771    CAN_MODATAH12.U  = 0x00000000; // load MO12 data register high
	st.w	[a2]@los(0xf0005194),d1
.L579:

; ..\CAN.c	   772  
; ..\CAN.c	   773    ///  - use message pending register 0 bit position 12
; ..\CAN.c	   774  
; ..\CAN.c	   775    CAN_MOIPR12.U  = 0x00000C00;   // load MO12 interrupt pointer register
	mov	d15,#3072
	st.w	[a2]@los(0xf0005188),d15
.L580:

; ..\CAN.c	   776    CAN_MOCTR12.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L581:

; ..\CAN.c	   777  
; ..\CAN.c	   778    ///  -----------------------------------------------------------------------
; ..\CAN.c	   779    ///  Configuration of Message Object 13:
; ..\CAN.c	   780    ///  -----------------------------------------------------------------------
; ..\CAN.c	   781    ///  - message object 13 is valid
; ..\CAN.c	   782    ///  - message object is used as transmit object
; ..\CAN.c	   783    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   784  
; ..\CAN.c	   785    CAN_MOCTR13.U  = 0x0EA80000;   // load MO13 control register
	ld.w	d15,__const_f00051bc
	mov.a	a15,d15
.L582:
	st.w	[a15],d2
.L583:

; ..\CAN.c	   786  
; ..\CAN.c	   787    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   788    ///  - 8 valid data bytes
; ..\CAN.c	   789  
; ..\CAN.c	   790    CAN_MOFCR13.U  = 0x08000000;   // load MO13 function control register
	st.w	[a2]@los(0xf00051a0),d0
.L584:

; ..\CAN.c	   791  
; ..\CAN.c	   792  
; ..\CAN.c	   793    CAN_MOFGPR13.U  = 0x00000000;  // load MO13 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00051a4),d1
.L585:

; ..\CAN.c	   794  
; ..\CAN.c	   795    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   796    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   797  
; ..\CAN.c	   798    CAN_MOAMR13.U  = 0x3FFFFFFF;   // load MO13 acceptance mask register
	st.w	[a2]@los(0xf00051ac),d4
.L586:

; ..\CAN.c	   799  
; ..\CAN.c	   800    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   801    ///    order (like class 1)
; ..\CAN.c	   802    ///  - standard 11-bit identifier
; ..\CAN.c	   803    ///  - identifier 11-bit:      0x7F2
; ..\CAN.c	   804  
; ..\CAN.c	   805    CAN_MOAR13.U   = 0xDFC80000;   // load MO13 arbitration register
	movh	d15,#57288
	st.w	[a2]@los(0xf00051b8),d15
.L587:

; ..\CAN.c	   806  
; ..\CAN.c	   807    CAN_MODATAL13.U  = 0x00000000; // load MO13 data register low
	st.w	[a2]@los(0xf00051b0),d1
.L588:

; ..\CAN.c	   808    CAN_MODATAH13.U  = 0x00000000; // load MO13 data register high
	st.w	[a2]@los(0xf00051b4),d1
.L589:

; ..\CAN.c	   809  
; ..\CAN.c	   810    ///  - use message pending register 0 bit position 13
; ..\CAN.c	   811  
; ..\CAN.c	   812    CAN_MOIPR13.U  = 0x00000D00;   // load MO13 interrupt pointer register
	mov	d15,#3328
	st.w	[a2]@los(0xf00051a8),d15
.L590:

; ..\CAN.c	   813    CAN_MOCTR13.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L591:

; ..\CAN.c	   814  
; ..\CAN.c	   815    ///  -----------------------------------------------------------------------
; ..\CAN.c	   816    ///  Configuration of Message Object 14:
; ..\CAN.c	   817    ///  -----------------------------------------------------------------------
; ..\CAN.c	   818    ///  - message object 14 is valid
; ..\CAN.c	   819    ///  - message object is used as transmit object
; ..\CAN.c	   820    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   821  
; ..\CAN.c	   822    CAN_MOCTR14.U  = 0x0EA80000;   // load MO14 control register
	ld.w	d15,__const_f00051dc
	mov.a	a15,d15
.L592:
	st.w	[a15],d2
.L593:

; ..\CAN.c	   823  
; ..\CAN.c	   824    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   825    ///  - 8 valid data bytes
; ..\CAN.c	   826  
; ..\CAN.c	   827    CAN_MOFCR14.U  = 0x08000000;   // load MO14 function control register
	st.w	[a2]@los(0xf00051c0),d0
.L594:

; ..\CAN.c	   828  
; ..\CAN.c	   829  
; ..\CAN.c	   830    CAN_MOFGPR14.U  = 0x00000000;  // load MO14 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00051c4),d1
.L595:

; ..\CAN.c	   831  
; ..\CAN.c	   832    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   833    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   834  
; ..\CAN.c	   835    CAN_MOAMR14.U  = 0x3FFFFFFF;   // load MO14 acceptance mask register
	st.w	[a2]@los(0xf00051cc),d4
.L596:

; ..\CAN.c	   836  
; ..\CAN.c	   837    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   838    ///    order (like class 1)
; ..\CAN.c	   839    ///  - standard 11-bit identifier
; ..\CAN.c	   840    ///  - identifier 11-bit:      0x7F1
; ..\CAN.c	   841  
; ..\CAN.c	   842    CAN_MOAR14.U   = 0xDFC40000;   // load MO14 arbitration register
	movh	d15,#57284
	st.w	[a2]@los(0xf00051d8),d15
.L597:

; ..\CAN.c	   843  
; ..\CAN.c	   844    CAN_MODATAL14.U  = 0x00000000; // load MO14 data register low
	st.w	[a2]@los(0xf00051d0),d1
.L598:

; ..\CAN.c	   845    CAN_MODATAH14.U  = 0x00000000; // load MO14 data register high
	st.w	[a2]@los(0xf00051d4),d1
.L599:

; ..\CAN.c	   846  
; ..\CAN.c	   847    ///  - use message pending register 0 bit position 14
; ..\CAN.c	   848  
; ..\CAN.c	   849    CAN_MOIPR14.U  = 0x00000E00;   // load MO14 interrupt pointer register
	mov	d15,#3584
	st.w	[a2]@los(0xf00051c8),d15
.L600:

; ..\CAN.c	   850    CAN_MOCTR14.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L601:

; ..\CAN.c	   851  
; ..\CAN.c	   852    ///  -----------------------------------------------------------------------
; ..\CAN.c	   853    ///  Configuration of Message Object 15:
; ..\CAN.c	   854    ///  -----------------------------------------------------------------------
; ..\CAN.c	   855    ///  - message object 15 is valid
; ..\CAN.c	   856    ///  - message object is used as transmit object
; ..\CAN.c	   857    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   858  
; ..\CAN.c	   859    CAN_MOCTR15.U  = 0x0EA80000;   // load MO15 control register
	ld.w	d15,__const_f00051fc
	mov.a	a15,d15
.L602:
	st.w	[a15],d2
.L603:

; ..\CAN.c	   860  
; ..\CAN.c	   861    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   862    ///  - 8 valid data bytes
; ..\CAN.c	   863  
; ..\CAN.c	   864    CAN_MOFCR15.U  = 0x08000000;   // load MO15 function control register
	st.w	[a2]@los(0xf00051e0),d0
.L604:

; ..\CAN.c	   865  
; ..\CAN.c	   866  
; ..\CAN.c	   867    CAN_MOFGPR15.U  = 0x00000000;  // load MO15 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00051e4),d1
.L605:

; ..\CAN.c	   868  
; ..\CAN.c	   869    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   870    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   871  
; ..\CAN.c	   872    CAN_MOAMR15.U  = 0x3FFFFFFF;   // load MO15 acceptance mask register
	st.w	[a2]@los(0xf00051ec),d4
.L606:

; ..\CAN.c	   873  
; ..\CAN.c	   874    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   875    ///    order (like class 1)
; ..\CAN.c	   876    ///  - standard 11-bit identifier
; ..\CAN.c	   877    ///  - identifier 11-bit:      0x7F0
; ..\CAN.c	   878  
; ..\CAN.c	   879    CAN_MOAR15.U   = 0xDFC00000;   // load MO15 arbitration register
	movh	d15,#57280
	st.w	[a2]@los(0xf00051f8),d15
.L607:

; ..\CAN.c	   880  
; ..\CAN.c	   881    CAN_MODATAL15.U  = 0x00000000; // load MO15 data register low
	st.w	[a2]@los(0xf00051f0),d1
.L608:

; ..\CAN.c	   882    CAN_MODATAH15.U  = 0x00000000; // load MO15 data register high
	st.w	[a2]@los(0xf00051f4),d1
.L609:

; ..\CAN.c	   883  
; ..\CAN.c	   884    ///  - use message pending register 0 bit position 15
; ..\CAN.c	   885  
; ..\CAN.c	   886    CAN_MOIPR15.U  = 0x00000F00;   // load MO15 interrupt pointer register
	mov	d15,#3840
	st.w	[a2]@los(0xf00051e8),d15
.L610:

; ..\CAN.c	   887    CAN_MOCTR15.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L611:

; ..\CAN.c	   888  
; ..\CAN.c	   889    ///  -----------------------------------------------------------------------
; ..\CAN.c	   890    ///  Configuration of Message Object 16:
; ..\CAN.c	   891    ///  -----------------------------------------------------------------------
; ..\CAN.c	   892    ///  - message object 16 is valid
; ..\CAN.c	   893    ///  - message object is used as transmit object
; ..\CAN.c	   894    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   895  
; ..\CAN.c	   896    CAN_MOCTR16.U  = 0x0EA80000;   // load MO16 control register
	ld.w	d15,__const_f000521c
	mov.a	a15,d15
.L612:
	st.w	[a15],d2
.L613:

; ..\CAN.c	   897  
; ..\CAN.c	   898    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   899    ///  - 8 valid data bytes
; ..\CAN.c	   900  
; ..\CAN.c	   901    CAN_MOFCR16.U  = 0x08000000;   // load MO16 function control register
	st.w	[a2]@los(0xf0005200),d0
.L614:

; ..\CAN.c	   902  
; ..\CAN.c	   903  
; ..\CAN.c	   904    CAN_MOFGPR16.U  = 0x00000000;  // load MO16 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005204),d1
.L615:

; ..\CAN.c	   905  
; ..\CAN.c	   906    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   907    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   908  
; ..\CAN.c	   909    CAN_MOAMR16.U  = 0x3FFFFFFF;   // load MO16 acceptance mask register
	st.w	[a2]@los(0xf000520c),d4
.L616:

; ..\CAN.c	   910  
; ..\CAN.c	   911    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   912    ///    order (like class 1)
; ..\CAN.c	   913    ///  - standard 11-bit identifier
; ..\CAN.c	   914    ///  - identifier 11-bit:      0x7EF
; ..\CAN.c	   915  
; ..\CAN.c	   916    CAN_MOAR16.U   = 0xDFBC0000;   // load MO16 arbitration register
	movh	d15,#57276
	st.w	[a2]@los(0xf0005218),d15
.L617:

; ..\CAN.c	   917  
; ..\CAN.c	   918    CAN_MODATAL16.U  = 0x00000000; // load MO16 data register low
	st.w	[a2]@los(0xf0005210),d1
.L618:

; ..\CAN.c	   919    CAN_MODATAH16.U  = 0x00000000; // load MO16 data register high
	st.w	[a2]@los(0xf0005214),d1
.L619:

; ..\CAN.c	   920  
; ..\CAN.c	   921    ///  - use message pending register 0 bit position 16
; ..\CAN.c	   922  
; ..\CAN.c	   923    CAN_MOIPR16.U  = 0x00001000;   // load MO16 interrupt pointer register
	mov	d15,#4096
	st.w	[a2]@los(0xf0005208),d15
.L620:

; ..\CAN.c	   924    CAN_MOCTR16.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L621:

; ..\CAN.c	   925  
; ..\CAN.c	   926    ///  -----------------------------------------------------------------------
; ..\CAN.c	   927    ///  Configuration of Message Object 17:
; ..\CAN.c	   928    ///  -----------------------------------------------------------------------
; ..\CAN.c	   929    ///  - message object 17 is valid
; ..\CAN.c	   930    ///  - message object is used as transmit object
; ..\CAN.c	   931    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   932  
; ..\CAN.c	   933    CAN_MOCTR17.U  = 0x0EA80000;   // load MO17 control register
	ld.w	d15,__const_f000523c
	mov.a	a15,d15
.L622:
	st.w	[a15],d2
.L623:

; ..\CAN.c	   934  
; ..\CAN.c	   935    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   936    ///  - 8 valid data bytes
; ..\CAN.c	   937  
; ..\CAN.c	   938    CAN_MOFCR17.U  = 0x08000000;   // load MO17 function control register
	st.w	[a2]@los(0xf0005220),d0
.L624:

; ..\CAN.c	   939  
; ..\CAN.c	   940  
; ..\CAN.c	   941    CAN_MOFGPR17.U  = 0x00000000;  // load MO17 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005224),d1
.L625:

; ..\CAN.c	   942  
; ..\CAN.c	   943    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   944    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   945  
; ..\CAN.c	   946    CAN_MOAMR17.U  = 0x3FFFFFFF;   // load MO17 acceptance mask register
	st.w	[a2]@los(0xf000522c),d4
.L626:

; ..\CAN.c	   947  
; ..\CAN.c	   948    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   949    ///    order (like class 1)
; ..\CAN.c	   950    ///  - standard 11-bit identifier
; ..\CAN.c	   951    ///  - identifier 11-bit:      0x7EE
; ..\CAN.c	   952  
; ..\CAN.c	   953    CAN_MOAR17.U   = 0xDFB80000;   // load MO17 arbitration register
	movh	d15,#57272
	st.w	[a2]@los(0xf0005238),d15
.L627:

; ..\CAN.c	   954  
; ..\CAN.c	   955    CAN_MODATAL17.U  = 0x00000000; // load MO17 data register low
	st.w	[a2]@los(0xf0005230),d1
.L628:

; ..\CAN.c	   956    CAN_MODATAH17.U  = 0x00000000; // load MO17 data register high
	st.w	[a2]@los(0xf0005234),d1
.L629:

; ..\CAN.c	   957  
; ..\CAN.c	   958    ///  - use message pending register 0 bit position 17
; ..\CAN.c	   959  
; ..\CAN.c	   960    CAN_MOIPR17.U  = 0x00001100;   // load MO17 interrupt pointer register
	mov	d15,#4352
	st.w	[a2]@los(0xf0005228),d15
.L630:

; ..\CAN.c	   961    CAN_MOCTR17.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L631:

; ..\CAN.c	   962  
; ..\CAN.c	   963    ///  -----------------------------------------------------------------------
; ..\CAN.c	   964    ///  Configuration of Message Object 18:
; ..\CAN.c	   965    ///  -----------------------------------------------------------------------
; ..\CAN.c	   966    ///  - message object 18 is valid
; ..\CAN.c	   967    ///  - message object is used as transmit object
; ..\CAN.c	   968    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	   969  
; ..\CAN.c	   970    CAN_MOCTR18.U  = 0x0EA80000;   // load MO18 control register
	ld.w	d15,__const_f000525c
	mov.a	a15,d15
.L632:
	st.w	[a15],d2
.L633:

; ..\CAN.c	   971  
; ..\CAN.c	   972    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	   973    ///  - 8 valid data bytes
; ..\CAN.c	   974  
; ..\CAN.c	   975    CAN_MOFCR18.U  = 0x08000000;   // load MO18 function control register
	st.w	[a2]@los(0xf0005240),d0
.L634:

; ..\CAN.c	   976  
; ..\CAN.c	   977  
; ..\CAN.c	   978    CAN_MOFGPR18.U  = 0x00000000;  // load MO18 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005244),d1
.L635:

; ..\CAN.c	   979  
; ..\CAN.c	   980    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	   981    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	   982  
; ..\CAN.c	   983    CAN_MOAMR18.U  = 0x3FFFFFFF;   // load MO18 acceptance mask register
	st.w	[a2]@los(0xf000524c),d4
.L636:

; ..\CAN.c	   984  
; ..\CAN.c	   985    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	   986    ///    order (like class 1)
; ..\CAN.c	   987    ///  - standard 11-bit identifier
; ..\CAN.c	   988    ///  - identifier 11-bit:      0x7ED
; ..\CAN.c	   989  
; ..\CAN.c	   990    CAN_MOAR18.U   = 0xDFB40000;   // load MO18 arbitration register
	movh	d15,#57268
	st.w	[a2]@los(0xf0005258),d15
.L637:

; ..\CAN.c	   991  
; ..\CAN.c	   992    CAN_MODATAL18.U  = 0x00000000; // load MO18 data register low
	st.w	[a2]@los(0xf0005250),d1
.L638:

; ..\CAN.c	   993    CAN_MODATAH18.U  = 0x00000000; // load MO18 data register high
	st.w	[a2]@los(0xf0005254),d1
.L639:

; ..\CAN.c	   994  
; ..\CAN.c	   995    ///  - use message pending register 0 bit position 18
; ..\CAN.c	   996  
; ..\CAN.c	   997    CAN_MOIPR18.U  = 0x00001200;   // load MO18 interrupt pointer register
	mov	d15,#4608
	st.w	[a2]@los(0xf0005248),d15
.L640:

; ..\CAN.c	   998    CAN_MOCTR18.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L641:

; ..\CAN.c	   999  
; ..\CAN.c	  1000    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1001    ///  Configuration of Message Object 19:
; ..\CAN.c	  1002    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1003    ///  - message object 19 is valid
; ..\CAN.c	  1004    ///  - message object is used as transmit object
; ..\CAN.c	  1005    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1006  
; ..\CAN.c	  1007    CAN_MOCTR19.U  = 0x0EA80000;   // load MO19 control register
	ld.w	d15,__const_f000527c
	mov.a	a15,d15
.L642:
	st.w	[a15],d2
.L643:

; ..\CAN.c	  1008  
; ..\CAN.c	  1009    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1010    ///  - 8 valid data bytes
; ..\CAN.c	  1011  
; ..\CAN.c	  1012    CAN_MOFCR19.U  = 0x08000000;   // load MO19 function control register
	st.w	[a2]@los(0xf0005260),d0
.L644:

; ..\CAN.c	  1013  
; ..\CAN.c	  1014  
; ..\CAN.c	  1015    CAN_MOFGPR19.U  = 0x00000000;  // load MO19 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005264),d1
.L645:

; ..\CAN.c	  1016  
; ..\CAN.c	  1017    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1018    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1019  
; ..\CAN.c	  1020    CAN_MOAMR19.U  = 0x3FFFFFFF;   // load MO19 acceptance mask register
	st.w	[a2]@los(0xf000526c),d4
.L646:

; ..\CAN.c	  1021  
; ..\CAN.c	  1022    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1023    ///    order (like class 1)
; ..\CAN.c	  1024    ///  - standard 11-bit identifier
; ..\CAN.c	  1025    ///  - identifier 11-bit:      0x7EC
; ..\CAN.c	  1026  
; ..\CAN.c	  1027    CAN_MOAR19.U   = 0xDFB00000;   // load MO19 arbitration register
	movh	d15,#57264
	st.w	[a2]@los(0xf0005278),d15
.L647:

; ..\CAN.c	  1028  
; ..\CAN.c	  1029    CAN_MODATAL19.U  = 0x00000000; // load MO19 data register low
	st.w	[a2]@los(0xf0005270),d1
.L648:

; ..\CAN.c	  1030    CAN_MODATAH19.U  = 0x00000000; // load MO19 data register high
	st.w	[a2]@los(0xf0005274),d1
.L649:

; ..\CAN.c	  1031  
; ..\CAN.c	  1032    ///  - use message pending register 0 bit position 19
; ..\CAN.c	  1033  
; ..\CAN.c	  1034    CAN_MOIPR19.U  = 0x00001300;   // load MO19 interrupt pointer register
	mov	d15,#4864
	st.w	[a2]@los(0xf0005268),d15
.L650:

; ..\CAN.c	  1035    CAN_MOCTR19.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L651:

; ..\CAN.c	  1036  
; ..\CAN.c	  1037    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1038    ///  Configuration of Message Object 20:
; ..\CAN.c	  1039    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1040    ///  - message object 20 is valid
; ..\CAN.c	  1041    ///  - message object is used as transmit object
; ..\CAN.c	  1042    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1043  
; ..\CAN.c	  1044    CAN_MOCTR20.U  = 0x0EA80000;   // load MO20 control register
	ld.w	d15,__const_f000529c
	mov.a	a15,d15
.L652:
	st.w	[a15],d2
.L653:

; ..\CAN.c	  1045  
; ..\CAN.c	  1046    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1047    ///  - 8 valid data bytes
; ..\CAN.c	  1048  
; ..\CAN.c	  1049    CAN_MOFCR20.U  = 0x08000000;   // load MO20 function control register
	st.w	[a2]@los(0xf0005280),d0
.L654:

; ..\CAN.c	  1050  
; ..\CAN.c	  1051  
; ..\CAN.c	  1052    CAN_MOFGPR20.U  = 0x00000000;  // load MO20 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005284),d1
.L655:

; ..\CAN.c	  1053  
; ..\CAN.c	  1054    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1055    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1056  
; ..\CAN.c	  1057    CAN_MOAMR20.U  = 0x3FFFFFFF;   // load MO20 acceptance mask register
	st.w	[a2]@los(0xf000528c),d4
.L656:

; ..\CAN.c	  1058  
; ..\CAN.c	  1059    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1060    ///    order (like class 1)
; ..\CAN.c	  1061    ///  - standard 11-bit identifier
; ..\CAN.c	  1062    ///  - identifier 11-bit:      0x7EB
; ..\CAN.c	  1063  
; ..\CAN.c	  1064    CAN_MOAR20.U   = 0xDFAC0000;   // load MO20 arbitration register
	movh	d15,#57260
	st.w	[a2]@los(0xf0005298),d15
.L657:

; ..\CAN.c	  1065  
; ..\CAN.c	  1066    CAN_MODATAL20.U  = 0x00000000; // load MO20 data register low
	st.w	[a2]@los(0xf0005290),d1
.L658:

; ..\CAN.c	  1067    CAN_MODATAH20.U  = 0x00000000; // load MO20 data register high
	st.w	[a2]@los(0xf0005294),d1
.L659:

; ..\CAN.c	  1068  
; ..\CAN.c	  1069    ///  - use message pending register 0 bit position 20
; ..\CAN.c	  1070  
; ..\CAN.c	  1071    CAN_MOIPR20.U  = 0x00001400;   // load MO20 interrupt pointer register
	mov	d15,#5120
	st.w	[a2]@los(0xf0005288),d15
.L660:

; ..\CAN.c	  1072    CAN_MOCTR20.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L661:

; ..\CAN.c	  1073  
; ..\CAN.c	  1074    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1075    ///  Configuration of Message Object 21:
; ..\CAN.c	  1076    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1077    ///  - message object 21 is valid
; ..\CAN.c	  1078    ///  - message object is used as transmit object
; ..\CAN.c	  1079    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1080  
; ..\CAN.c	  1081    CAN_MOCTR21.U  = 0x0EA80000;   // load MO21 control register
	ld.w	d15,__const_f00052bc
	mov.a	a15,d15
.L662:
	st.w	[a15],d2
.L663:

; ..\CAN.c	  1082  
; ..\CAN.c	  1083    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1084    ///  - 8 valid data bytes
; ..\CAN.c	  1085  
; ..\CAN.c	  1086    CAN_MOFCR21.U  = 0x08000000;   // load MO21 function control register
	st.w	[a2]@los(0xf00052a0),d0
.L664:

; ..\CAN.c	  1087  
; ..\CAN.c	  1088  
; ..\CAN.c	  1089    CAN_MOFGPR21.U  = 0x00000000;  // load MO21 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00052a4),d1
.L665:

; ..\CAN.c	  1090  
; ..\CAN.c	  1091    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1092    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1093  
; ..\CAN.c	  1094    CAN_MOAMR21.U  = 0x3FFFFFFF;   // load MO21 acceptance mask register
	st.w	[a2]@los(0xf00052ac),d4
.L666:

; ..\CAN.c	  1095  
; ..\CAN.c	  1096    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1097    ///    order (like class 1)
; ..\CAN.c	  1098    ///  - standard 11-bit identifier
; ..\CAN.c	  1099    ///  - identifier 11-bit:      0x7EA
; ..\CAN.c	  1100  
; ..\CAN.c	  1101    CAN_MOAR21.U   = 0xDFA80000;   // load MO21 arbitration register
	movh	d15,#57256
	st.w	[a2]@los(0xf00052b8),d15
.L667:

; ..\CAN.c	  1102  
; ..\CAN.c	  1103    CAN_MODATAL21.U  = 0x00000000; // load MO21 data register low
	st.w	[a2]@los(0xf00052b0),d1
.L668:

; ..\CAN.c	  1104    CAN_MODATAH21.U  = 0x00000000; // load MO21 data register high
	st.w	[a2]@los(0xf00052b4),d1
.L669:

; ..\CAN.c	  1105  
; ..\CAN.c	  1106    ///  - use message pending register 0 bit position 21
; ..\CAN.c	  1107  
; ..\CAN.c	  1108    CAN_MOIPR21.U  = 0x00001500;   // load MO21 interrupt pointer register
	mov	d15,#5376
	st.w	[a2]@los(0xf00052a8),d15
.L670:

; ..\CAN.c	  1109    CAN_MOCTR21.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L671:

; ..\CAN.c	  1110  
; ..\CAN.c	  1111    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1112    ///  Configuration of Message Object 22:
; ..\CAN.c	  1113    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1114    ///  - message object 22 is valid
; ..\CAN.c	  1115    ///  - message object is used as transmit object
; ..\CAN.c	  1116    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1117  
; ..\CAN.c	  1118    CAN_MOCTR22.U  = 0x0EA80000;   // load MO22 control register
	ld.w	d15,__const_f00052dc
	mov.a	a15,d15
.L672:
	st.w	[a15],d2
.L673:

; ..\CAN.c	  1119  
; ..\CAN.c	  1120    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1121    ///  - 8 valid data bytes
; ..\CAN.c	  1122  
; ..\CAN.c	  1123    CAN_MOFCR22.U  = 0x08000000;   // load MO22 function control register
	st.w	[a2]@los(0xf00052c0),d0
.L674:

; ..\CAN.c	  1124  
; ..\CAN.c	  1125  
; ..\CAN.c	  1126    CAN_MOFGPR22.U  = 0x00000000;  // load MO22 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00052c4),d1
.L675:

; ..\CAN.c	  1127  
; ..\CAN.c	  1128    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1129    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1130  
; ..\CAN.c	  1131    CAN_MOAMR22.U  = 0x3FFFFFFF;   // load MO22 acceptance mask register
	st.w	[a2]@los(0xf00052cc),d4
.L676:

; ..\CAN.c	  1132  
; ..\CAN.c	  1133    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1134    ///    order (like class 1)
; ..\CAN.c	  1135    ///  - standard 11-bit identifier
; ..\CAN.c	  1136    ///  - identifier 11-bit:      0x7E9
; ..\CAN.c	  1137  
; ..\CAN.c	  1138    CAN_MOAR22.U   = 0xDFA40000;   // load MO22 arbitration register
	movh	d15,#57252
	st.w	[a2]@los(0xf00052d8),d15
.L677:

; ..\CAN.c	  1139  
; ..\CAN.c	  1140    CAN_MODATAL22.U  = 0x00000000; // load MO22 data register low
	st.w	[a2]@los(0xf00052d0),d1
.L678:

; ..\CAN.c	  1141    CAN_MODATAH22.U  = 0x00000000; // load MO22 data register high
	st.w	[a2]@los(0xf00052d4),d1
.L679:

; ..\CAN.c	  1142  
; ..\CAN.c	  1143    ///  - use message pending register 0 bit position 22
; ..\CAN.c	  1144  
; ..\CAN.c	  1145    CAN_MOIPR22.U  = 0x00001600;   // load MO22 interrupt pointer register
	mov	d15,#5632
	st.w	[a2]@los(0xf00052c8),d15
.L680:

; ..\CAN.c	  1146    CAN_MOCTR22.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L681:

; ..\CAN.c	  1147  
; ..\CAN.c	  1148    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1149    ///  Configuration of Message Object 23:
; ..\CAN.c	  1150    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1151    ///  - message object 23 is valid
; ..\CAN.c	  1152    ///  - message object is used as transmit object
; ..\CAN.c	  1153    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1154  
; ..\CAN.c	  1155    CAN_MOCTR23.U  = 0x0EA80000;   // load MO23 control register
	ld.w	d15,__const_f00052fc
	mov.a	a15,d15
.L682:
	st.w	[a15],d2
.L683:

; ..\CAN.c	  1156  
; ..\CAN.c	  1157    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1158    ///  - 8 valid data bytes
; ..\CAN.c	  1159  
; ..\CAN.c	  1160    CAN_MOFCR23.U  = 0x08000000;   // load MO23 function control register
	st.w	[a2]@los(0xf00052e0),d0
.L684:

; ..\CAN.c	  1161  
; ..\CAN.c	  1162  
; ..\CAN.c	  1163    CAN_MOFGPR23.U  = 0x00000000;  // load MO23 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00052e4),d1
.L685:

; ..\CAN.c	  1164  
; ..\CAN.c	  1165    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1166    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1167  
; ..\CAN.c	  1168    CAN_MOAMR23.U  = 0x3FFFFFFF;   // load MO23 acceptance mask register
	st.w	[a2]@los(0xf00052ec),d4
.L686:

; ..\CAN.c	  1169  
; ..\CAN.c	  1170    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1171    ///    order (like class 1)
; ..\CAN.c	  1172    ///  - standard 11-bit identifier
; ..\CAN.c	  1173    ///  - identifier 11-bit:      0x7E8
; ..\CAN.c	  1174  
; ..\CAN.c	  1175    CAN_MOAR23.U   = 0xDFA00000;   // load MO23 arbitration register
	movh	d15,#57248
	st.w	[a2]@los(0xf00052f8),d15
.L687:

; ..\CAN.c	  1176  
; ..\CAN.c	  1177    CAN_MODATAL23.U  = 0x00000000; // load MO23 data register low
	st.w	[a2]@los(0xf00052f0),d1
.L688:

; ..\CAN.c	  1178    CAN_MODATAH23.U  = 0x00000000; // load MO23 data register high
	st.w	[a2]@los(0xf00052f4),d1
.L689:

; ..\CAN.c	  1179  
; ..\CAN.c	  1180    ///  - use message pending register 0 bit position 23
; ..\CAN.c	  1181  
; ..\CAN.c	  1182    CAN_MOIPR23.U  = 0x00001700;   // load MO23 interrupt pointer register
	mov	d15,#5888
	st.w	[a2]@los(0xf00052e8),d15
.L690:

; ..\CAN.c	  1183    CAN_MOCTR23.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L691:

; ..\CAN.c	  1184  
; ..\CAN.c	  1185    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1186    ///  Configuration of Message Object 24:
; ..\CAN.c	  1187    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1188    ///  - message object 24 is valid
; ..\CAN.c	  1189    ///  - message object is used as transmit object
; ..\CAN.c	  1190    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1191  
; ..\CAN.c	  1192    CAN_MOCTR24.U  = 0x0EA80000;   // load MO24 control register
	ld.w	d15,__const_f000531c
	mov.a	a15,d15
.L692:
	st.w	[a15],d2
.L693:

; ..\CAN.c	  1193  
; ..\CAN.c	  1194    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1195    ///  - 8 valid data bytes
; ..\CAN.c	  1196  
; ..\CAN.c	  1197    CAN_MOFCR24.U  = 0x08000000;   // load MO24 function control register
	st.w	[a2]@los(0xf0005300),d0
.L694:

; ..\CAN.c	  1198  
; ..\CAN.c	  1199  
; ..\CAN.c	  1200    CAN_MOFGPR24.U  = 0x00000000;  // load MO24 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005304),d1
.L695:

; ..\CAN.c	  1201  
; ..\CAN.c	  1202    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1203    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1204  
; ..\CAN.c	  1205    CAN_MOAMR24.U  = 0x3FFFFFFF;   // load MO24 acceptance mask register
	st.w	[a2]@los(0xf000530c),d4
.L696:

; ..\CAN.c	  1206  
; ..\CAN.c	  1207    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1208    ///    order (like class 1)
; ..\CAN.c	  1209    ///  - standard 11-bit identifier
; ..\CAN.c	  1210    ///  - identifier 11-bit:      0x7E7
; ..\CAN.c	  1211  
; ..\CAN.c	  1212    CAN_MOAR24.U   = 0xDF9C0000;   // load MO24 arbitration register
	movh	d15,#57244
	st.w	[a2]@los(0xf0005318),d15
.L697:

; ..\CAN.c	  1213  
; ..\CAN.c	  1214    CAN_MODATAL24.U  = 0x00000000; // load MO24 data register low
	st.w	[a2]@los(0xf0005310),d1
.L698:

; ..\CAN.c	  1215    CAN_MODATAH24.U  = 0x00000000; // load MO24 data register high
	st.w	[a2]@los(0xf0005314),d1
.L699:

; ..\CAN.c	  1216  
; ..\CAN.c	  1217    ///  - use message pending register 0 bit position 24
; ..\CAN.c	  1218  
; ..\CAN.c	  1219    CAN_MOIPR24.U  = 0x00001800;   // load MO24 interrupt pointer register
	mov	d15,#6144
	st.w	[a2]@los(0xf0005308),d15
.L700:

; ..\CAN.c	  1220    CAN_MOCTR24.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L701:

; ..\CAN.c	  1221  
; ..\CAN.c	  1222    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1223    ///  Configuration of Message Object 25:
; ..\CAN.c	  1224    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1225    ///  - message object 25 is valid
; ..\CAN.c	  1226    ///  - message object is used as transmit object
; ..\CAN.c	  1227    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1228  
; ..\CAN.c	  1229    CAN_MOCTR25.U  = 0x0EA80000;   // load MO25 control register
	ld.w	d15,__const_f000533c
	mov.a	a15,d15
.L702:
	st.w	[a15],d2
.L703:

; ..\CAN.c	  1230  
; ..\CAN.c	  1231    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1232    ///  - 8 valid data bytes
; ..\CAN.c	  1233  
; ..\CAN.c	  1234    CAN_MOFCR25.U  = 0x08000000;   // load MO25 function control register
	st.w	[a2]@los(0xf0005320),d0
.L704:

; ..\CAN.c	  1235  
; ..\CAN.c	  1236  
; ..\CAN.c	  1237    CAN_MOFGPR25.U  = 0x00000000;  // load MO25 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005324),d1
.L705:

; ..\CAN.c	  1238  
; ..\CAN.c	  1239    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1240    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1241  
; ..\CAN.c	  1242    CAN_MOAMR25.U  = 0x3FFFFFFF;   // load MO25 acceptance mask register
	st.w	[a2]@los(0xf000532c),d4
.L706:

; ..\CAN.c	  1243  
; ..\CAN.c	  1244    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1245    ///    order (like class 1)
; ..\CAN.c	  1246    ///  - standard 11-bit identifier
; ..\CAN.c	  1247    ///  - identifier 11-bit:      0x7E6
; ..\CAN.c	  1248  
; ..\CAN.c	  1249    CAN_MOAR25.U   = 0xDF980000;   // load MO25 arbitration register
	movh	d15,#57240
	st.w	[a2]@los(0xf0005338),d15
.L707:

; ..\CAN.c	  1250  
; ..\CAN.c	  1251    CAN_MODATAL25.U  = 0x00000000; // load MO25 data register low
	st.w	[a2]@los(0xf0005330),d1
.L708:

; ..\CAN.c	  1252    CAN_MODATAH25.U  = 0x00000000; // load MO25 data register high
	st.w	[a2]@los(0xf0005334),d1
.L709:

; ..\CAN.c	  1253  
; ..\CAN.c	  1254    ///  - use message pending register 0 bit position 25
; ..\CAN.c	  1255  
; ..\CAN.c	  1256    CAN_MOIPR25.U  = 0x00001900;   // load MO25 interrupt pointer register
	mov	d15,#6400
	st.w	[a2]@los(0xf0005328),d15
.L710:

; ..\CAN.c	  1257    CAN_MOCTR25.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L711:

; ..\CAN.c	  1258  
; ..\CAN.c	  1259    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1260    ///  Configuration of Message Object 26:
; ..\CAN.c	  1261    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1262    ///  - message object 26 is valid
; ..\CAN.c	  1263    ///  - message object is used as transmit object
; ..\CAN.c	  1264    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1265  
; ..\CAN.c	  1266    CAN_MOCTR26.U  = 0x0EA80000;   // load MO26 control register
	ld.w	d15,__const_f000535c
	mov.a	a15,d15
.L712:
	st.w	[a15],d2
.L713:

; ..\CAN.c	  1267  
; ..\CAN.c	  1268    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1269    ///  - 8 valid data bytes
; ..\CAN.c	  1270  
; ..\CAN.c	  1271    CAN_MOFCR26.U  = 0x08000000;   // load MO26 function control register
	st.w	[a2]@los(0xf0005340),d0
.L714:

; ..\CAN.c	  1272  
; ..\CAN.c	  1273  
; ..\CAN.c	  1274    CAN_MOFGPR26.U  = 0x00000000;  // load MO26 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005344),d1
.L715:

; ..\CAN.c	  1275  
; ..\CAN.c	  1276    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1277    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1278  
; ..\CAN.c	  1279    CAN_MOAMR26.U  = 0x3FFFFFFF;   // load MO26 acceptance mask register
	st.w	[a2]@los(0xf000534c),d4
.L716:

; ..\CAN.c	  1280  
; ..\CAN.c	  1281    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1282    ///    order (like class 1)
; ..\CAN.c	  1283    ///  - standard 11-bit identifier
; ..\CAN.c	  1284    ///  - identifier 11-bit:      0x7E5
; ..\CAN.c	  1285  
; ..\CAN.c	  1286    CAN_MOAR26.U   = 0xDF940000;   // load MO26 arbitration register
	movh	d15,#57236
	st.w	[a2]@los(0xf0005358),d15
.L717:

; ..\CAN.c	  1287  
; ..\CAN.c	  1288    CAN_MODATAL26.U  = 0x00000000; // load MO26 data register low
	st.w	[a2]@los(0xf0005350),d1
.L718:

; ..\CAN.c	  1289    CAN_MODATAH26.U  = 0x00000000; // load MO26 data register high
	st.w	[a2]@los(0xf0005354),d1
.L719:

; ..\CAN.c	  1290  
; ..\CAN.c	  1291    ///  - use message pending register 0 bit position 26
; ..\CAN.c	  1292  
; ..\CAN.c	  1293    CAN_MOIPR26.U  = 0x00001A00;   // load MO26 interrupt pointer register
	mov	d15,#6656
	st.w	[a2]@los(0xf0005348),d15
.L720:

; ..\CAN.c	  1294    CAN_MOCTR26.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L721:

; ..\CAN.c	  1295  
; ..\CAN.c	  1296    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1297    ///  Configuration of Message Object 27:
; ..\CAN.c	  1298    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1299    ///  - message object 27 is valid
; ..\CAN.c	  1300    ///  - message object is used as transmit object
; ..\CAN.c	  1301    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1302  
; ..\CAN.c	  1303    CAN_MOCTR27.U  = 0x0EA80000;   // load MO27 control register
	ld.w	d15,__const_f000537c
	mov.a	a15,d15
.L722:
	st.w	[a15],d2
.L723:

; ..\CAN.c	  1304  
; ..\CAN.c	  1305    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1306    ///  - 8 valid data bytes
; ..\CAN.c	  1307  
; ..\CAN.c	  1308    CAN_MOFCR27.U  = 0x08000000;   // load MO27 function control register
	st.w	[a2]@los(0xf0005360),d0
.L724:

; ..\CAN.c	  1309  
; ..\CAN.c	  1310  
; ..\CAN.c	  1311    CAN_MOFGPR27.U  = 0x00000000;  // load MO27 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005364),d1
.L725:

; ..\CAN.c	  1312  
; ..\CAN.c	  1313    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1314    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1315  
; ..\CAN.c	  1316    CAN_MOAMR27.U  = 0x3FFFFFFF;   // load MO27 acceptance mask register
	st.w	[a2]@los(0xf000536c),d4
.L726:

; ..\CAN.c	  1317  
; ..\CAN.c	  1318    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1319    ///    order (like class 1)
; ..\CAN.c	  1320    ///  - standard 11-bit identifier
; ..\CAN.c	  1321    ///  - identifier 11-bit:      0x7E4
; ..\CAN.c	  1322  
; ..\CAN.c	  1323    CAN_MOAR27.U   = 0xDF900000;   // load MO27 arbitration register
	movh	d15,#57232
	st.w	[a2]@los(0xf0005378),d15
.L727:

; ..\CAN.c	  1324  
; ..\CAN.c	  1325    CAN_MODATAL27.U  = 0x00000000; // load MO27 data register low
	st.w	[a2]@los(0xf0005370),d1
.L728:

; ..\CAN.c	  1326    CAN_MODATAH27.U  = 0x00000000; // load MO27 data register high
	st.w	[a2]@los(0xf0005374),d1
.L729:

; ..\CAN.c	  1327  
; ..\CAN.c	  1328    ///  - use message pending register 0 bit position 27
; ..\CAN.c	  1329  
; ..\CAN.c	  1330    CAN_MOIPR27.U  = 0x00001B00;   // load MO27 interrupt pointer register
	mov	d15,#6912
	st.w	[a2]@los(0xf0005368),d15
.L730:

; ..\CAN.c	  1331    CAN_MOCTR27.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L731:

; ..\CAN.c	  1332  
; ..\CAN.c	  1333    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1334    ///  Configuration of Message Object 28:
; ..\CAN.c	  1335    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1336    ///  - message object 28 is valid
; ..\CAN.c	  1337    ///  - message object is used as transmit object
; ..\CAN.c	  1338    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1339  
; ..\CAN.c	  1340    CAN_MOCTR28.U  = 0x0EA80000;   // load MO28 control register
	ld.w	d15,__const_f000539c
	mov.a	a15,d15
.L732:
	st.w	[a15],d2
.L733:

; ..\CAN.c	  1341  
; ..\CAN.c	  1342    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1343    ///  - 8 valid data bytes
; ..\CAN.c	  1344  
; ..\CAN.c	  1345    CAN_MOFCR28.U  = 0x08000000;   // load MO28 function control register
	st.w	[a2]@los(0xf0005380),d0
.L734:

; ..\CAN.c	  1346  
; ..\CAN.c	  1347  
; ..\CAN.c	  1348    CAN_MOFGPR28.U  = 0x00000000;  // load MO28 FIFO/gateway pointer register
	st.w	[a2]@los(0xf0005384),d1
.L735:

; ..\CAN.c	  1349  
; ..\CAN.c	  1350    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1351    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1352  
; ..\CAN.c	  1353    CAN_MOAMR28.U  = 0x3FFFFFFF;   // load MO28 acceptance mask register
	st.w	[a2]@los(0xf000538c),d4
.L736:

; ..\CAN.c	  1354  
; ..\CAN.c	  1355    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1356    ///    order (like class 1)
; ..\CAN.c	  1357    ///  - standard 11-bit identifier
; ..\CAN.c	  1358    ///  - identifier 11-bit:      0x7E3
; ..\CAN.c	  1359  
; ..\CAN.c	  1360    CAN_MOAR28.U   = 0xDF8C0000;   // load MO28 arbitration register
	movh	d15,#57228
	st.w	[a2]@los(0xf0005398),d15
.L737:

; ..\CAN.c	  1361  
; ..\CAN.c	  1362    CAN_MODATAL28.U  = 0x00000000; // load MO28 data register low
	st.w	[a2]@los(0xf0005390),d1
.L738:

; ..\CAN.c	  1363    CAN_MODATAH28.U  = 0x00000000; // load MO28 data register high
	st.w	[a2]@los(0xf0005394),d1
.L739:

; ..\CAN.c	  1364  
; ..\CAN.c	  1365    ///  - use message pending register 0 bit position 28
; ..\CAN.c	  1366  
; ..\CAN.c	  1367    CAN_MOIPR28.U  = 0x00001C00;   // load MO28 interrupt pointer register
	mov	d15,#7168
	st.w	[a2]@los(0xf0005388),d15
.L740:

; ..\CAN.c	  1368    CAN_MOCTR28.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L741:

; ..\CAN.c	  1369  
; ..\CAN.c	  1370    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1371    ///  Configuration of Message Object 29:
; ..\CAN.c	  1372    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1373    ///  - message object 29 is valid
; ..\CAN.c	  1374    ///  - message object is used as receive object
; ..\CAN.c	  1375    ///  - this message object is assigned to list 2 (node 1)
; ..\CAN.c	  1376  
; ..\CAN.c	  1377    CAN_MOCTR29.U  = 0x00A00000;   // load MO29 control register
	ld.w	d15,__const_f00053bc
	mov.a	a15,d15
.L742:
	st.w	[a15],d5
.L743:

; ..\CAN.c	  1378  
; ..\CAN.c	  1379    ///  - this object is a STANDARD MESSAGE OBJECT
; ..\CAN.c	  1380    ///  - 8 valid data bytes
; ..\CAN.c	  1381    ///  - enable receive interrupt; bit RXPND is set after successful 
; ..\CAN.c	  1382    ///    reception of a frame
; ..\CAN.c	  1383  
; ..\CAN.c	  1384    CAN_MOFCR29.U  = 0x08010000;   // load MO29 function control register
	st.w	[a2]@los(0xf00053a0),d6
.L744:

; ..\CAN.c	  1385  
; ..\CAN.c	  1386  
; ..\CAN.c	  1387    CAN_MOFGPR29.U  = 0x00000000;  // load MO29 FIFO/gateway pointer register
	st.w	[a2]@los(0xf00053a4),d1
.L745:

; ..\CAN.c	  1388  
; ..\CAN.c	  1389    ///  - only accept receive frames with matching IDE bit
; ..\CAN.c	  1390    ///  - acceptance mask 11-bit: 0x7FF
; ..\CAN.c	  1391  
; ..\CAN.c	  1392    CAN_MOAMR29.U  = 0x3FFFFFFF;   // load MO29 acceptance mask register
	st.w	[a2]@los(0xf00053ac),d4
.L746:

; ..\CAN.c	  1393  
; ..\CAN.c	  1394    ///  - priority class 3; transmit acceptance filtering is based on the list 
; ..\CAN.c	  1395    ///    order (like class 1)
; ..\CAN.c	  1396    ///  - standard 11-bit identifier
; ..\CAN.c	  1397    ///  - identifier 11-bit:      0x7E2
; ..\CAN.c	  1398  
; ..\CAN.c	  1399    CAN_MOAR29.U   = 0xDF880000;   // load MO29 arbitration register
	movh	d15,#57224
	st.w	[a2]@los(0xf00053b8),d15
.L747:

; ..\CAN.c	  1400  
; ..\CAN.c	  1401    ///  - use message pending register 0 bit position 29
; ..\CAN.c	  1402    ///  - receive interrupt node pointer: MultiCAN SRN 3
; ..\CAN.c	  1403  
; ..\CAN.c	  1404    CAN_MOIPR29.U  = 0x00001D03;   // load MO29 interrupt pointer register
	mov	d15,#7427
	st.w	[a2]@los(0xf00053a8),d15
.L748:

; ..\CAN.c	  1405    CAN_MOCTR29.U  = 0x00200000;   // set MSGVAL
	st.w	[a15],d3
.L749:

; ..\CAN.c	  1406  
; ..\CAN.c	  1407    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1408    ///  Configuration of Message Object 30:
; ..\CAN.c	  1409    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1410    ///  - message object 30 is not valid
; ..\CAN.c	  1411    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1412    ///  Configuration of Message Object 31:
; ..\CAN.c	  1413    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1414    ///  - message object 31 is not valid
; ..\CAN.c	  1415    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1416    ///  Configuration of Message Object 32:
; ..\CAN.c	  1417    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1418    ///  - message object 32 is not valid
; ..\CAN.c	  1419    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1420    ///  Configuration of Message Object 33:
; ..\CAN.c	  1421    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1422    ///  - message object 33 is not valid
; ..\CAN.c	  1423    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1424    ///  Configuration of Message Object 34:
; ..\CAN.c	  1425    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1426    ///  - message object 34 is not valid
; ..\CAN.c	  1427    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1428    ///  Configuration of Message Object 35:
; ..\CAN.c	  1429    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1430    ///  - message object 35 is not valid
; ..\CAN.c	  1431    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1432    ///  Configuration of Message Object 36:
; ..\CAN.c	  1433    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1434    ///  - message object 36 is not valid
; ..\CAN.c	  1435    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1436    ///  Configuration of Message Object 37:
; ..\CAN.c	  1437    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1438    ///  - message object 37 is not valid
; ..\CAN.c	  1439    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1440    ///  Configuration of Message Object 38:
; ..\CAN.c	  1441    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1442    ///  - message object 38 is not valid
; ..\CAN.c	  1443    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1444    ///  Configuration of Message Object 39:
; ..\CAN.c	  1445    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1446    ///  - message object 39 is not valid
; ..\CAN.c	  1447    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1448    ///  Configuration of Message Object 40:
; ..\CAN.c	  1449    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1450    ///  - message object 40 is not valid
; ..\CAN.c	  1451    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1452    ///  Configuration of Message Object 41:
; ..\CAN.c	  1453    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1454    ///  - message object 41 is not valid
; ..\CAN.c	  1455    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1456    ///  Configuration of Message Object 42:
; ..\CAN.c	  1457    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1458    ///  - message object 42 is not valid
; ..\CAN.c	  1459    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1460    ///  Configuration of Message Object 43:
; ..\CAN.c	  1461    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1462    ///  - message object 43 is not valid
; ..\CAN.c	  1463    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1464    ///  Configuration of Message Object 44:
; ..\CAN.c	  1465    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1466    ///  - message object 44 is not valid
; ..\CAN.c	  1467    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1468    ///  Configuration of Message Object 45:
; ..\CAN.c	  1469    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1470    ///  - message object 45 is not valid
; ..\CAN.c	  1471    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1472    ///  Configuration of Message Object 46:
; ..\CAN.c	  1473    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1474    ///  - message object 46 is not valid
; ..\CAN.c	  1475    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1476    ///  Configuration of Message Object 47:
; ..\CAN.c	  1477    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1478    ///  - message object 47 is not valid
; ..\CAN.c	  1479    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1480    ///  Configuration of Message Object 48:
; ..\CAN.c	  1481    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1482    ///  - message object 48 is not valid
; ..\CAN.c	  1483    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1484    ///  Configuration of Message Object 49:
; ..\CAN.c	  1485    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1486    ///  - message object 49 is not valid
; ..\CAN.c	  1487    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1488    ///  Configuration of Message Object 50:
; ..\CAN.c	  1489    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1490    ///  - message object 50 is not valid
; ..\CAN.c	  1491    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1492    ///  Configuration of Message Object 51:
; ..\CAN.c	  1493    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1494    ///  - message object 51 is not valid
; ..\CAN.c	  1495    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1496    ///  Configuration of Message Object 52:
; ..\CAN.c	  1497    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1498    ///  - message object 52 is not valid
; ..\CAN.c	  1499    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1500    ///  Configuration of Message Object 53:
; ..\CAN.c	  1501    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1502    ///  - message object 53 is not valid
; ..\CAN.c	  1503    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1504    ///  Configuration of Message Object 54:
; ..\CAN.c	  1505    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1506    ///  - message object 54 is not valid
; ..\CAN.c	  1507    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1508    ///  Configuration of Message Object 55:
; ..\CAN.c	  1509    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1510    ///  - message object 55 is not valid
; ..\CAN.c	  1511    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1512    ///  Configuration of Message Object 56:
; ..\CAN.c	  1513    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1514    ///  - message object 56 is not valid
; ..\CAN.c	  1515    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1516    ///  Configuration of Message Object 57:
; ..\CAN.c	  1517    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1518    ///  - message object 57 is not valid
; ..\CAN.c	  1519    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1520    ///  Configuration of Message Object 58:
; ..\CAN.c	  1521    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1522    ///  - message object 58 is not valid
; ..\CAN.c	  1523    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1524    ///  Configuration of Message Object 59:
; ..\CAN.c	  1525    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1526    ///  - message object 59 is not valid
; ..\CAN.c	  1527    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1528    ///  Configuration of Message Object 60:
; ..\CAN.c	  1529    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1530    ///  - message object 60 is not valid
; ..\CAN.c	  1531    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1532    ///  Configuration of Message Object 61:
; ..\CAN.c	  1533    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1534    ///  - message object 61 is not valid
; ..\CAN.c	  1535    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1536    ///  Configuration of Message Object 62:
; ..\CAN.c	  1537    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1538    ///  - message object 62 is not valid
; ..\CAN.c	  1539    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1540    ///  Configuration of Message Object 63:
; ..\CAN.c	  1541    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1542    ///  - message object 63 is not valid
; ..\CAN.c	  1543    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1544    ///  Configuration of Message Object 64:
; ..\CAN.c	  1545    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1546    ///  - message object 64 is not valid
; ..\CAN.c	  1547    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1548    ///  Configuration of Message Object 65:
; ..\CAN.c	  1549    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1550    ///  - message object 65 is not valid
; ..\CAN.c	  1551    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1552    ///  Configuration of Message Object 66:
; ..\CAN.c	  1553    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1554    ///  - message object 66 is not valid
; ..\CAN.c	  1555    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1556    ///  Configuration of Message Object 67:
; ..\CAN.c	  1557    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1558    ///  - message object 67 is not valid
; ..\CAN.c	  1559    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1560    ///  Configuration of Message Object 68:
; ..\CAN.c	  1561    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1562    ///  - message object 68 is not valid
; ..\CAN.c	  1563    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1564    ///  Configuration of Message Object 69:
; ..\CAN.c	  1565    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1566    ///  - message object 69 is not valid
; ..\CAN.c	  1567    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1568    ///  Configuration of Message Object 70:
; ..\CAN.c	  1569    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1570    ///  - message object 70 is not valid
; ..\CAN.c	  1571    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1572    ///  Configuration of Message Object 71:
; ..\CAN.c	  1573    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1574    ///  - message object 71 is not valid
; ..\CAN.c	  1575    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1576    ///  Configuration of Message Object 72:
; ..\CAN.c	  1577    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1578    ///  - message object 72 is not valid
; ..\CAN.c	  1579    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1580    ///  Configuration of Message Object 73:
; ..\CAN.c	  1581    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1582    ///  - message object 73 is not valid
; ..\CAN.c	  1583    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1584    ///  Configuration of Message Object 74:
; ..\CAN.c	  1585    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1586    ///  - message object 74 is not valid
; ..\CAN.c	  1587    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1588    ///  Configuration of Message Object 75:
; ..\CAN.c	  1589    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1590    ///  - message object 75 is not valid
; ..\CAN.c	  1591    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1592    ///  Configuration of Message Object 76:
; ..\CAN.c	  1593    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1594    ///  - message object 76 is not valid
; ..\CAN.c	  1595    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1596    ///  Configuration of Message Object 77:
; ..\CAN.c	  1597    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1598    ///  - message object 77 is not valid
; ..\CAN.c	  1599    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1600    ///  Configuration of Message Object 78:
; ..\CAN.c	  1601    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1602    ///  - message object 78 is not valid
; ..\CAN.c	  1603    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1604    ///  Configuration of Message Object 79:
; ..\CAN.c	  1605    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1606    ///  - message object 79 is not valid
; ..\CAN.c	  1607    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1608    ///  Configuration of Message Object 80:
; ..\CAN.c	  1609    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1610    ///  - message object 80 is not valid
; ..\CAN.c	  1611    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1612    ///  Configuration of Message Object 81:
; ..\CAN.c	  1613    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1614    ///  - message object 81 is not valid
; ..\CAN.c	  1615    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1616    ///  Configuration of Message Object 82:
; ..\CAN.c	  1617    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1618    ///  - message object 82 is not valid
; ..\CAN.c	  1619    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1620    ///  Configuration of Message Object 83:
; ..\CAN.c	  1621    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1622    ///  - message object 83 is not valid
; ..\CAN.c	  1623    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1624    ///  Configuration of Message Object 84:
; ..\CAN.c	  1625    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1626    ///  - message object 84 is not valid
; ..\CAN.c	  1627    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1628    ///  Configuration of Message Object 85:
; ..\CAN.c	  1629    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1630    ///  - message object 85 is not valid
; ..\CAN.c	  1631    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1632    ///  Configuration of Message Object 86:
; ..\CAN.c	  1633    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1634    ///  - message object 86 is not valid
; ..\CAN.c	  1635    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1636    ///  Configuration of Message Object 87:
; ..\CAN.c	  1637    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1638    ///  - message object 87 is not valid
; ..\CAN.c	  1639    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1640    ///  Configuration of Message Object 88:
; ..\CAN.c	  1641    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1642    ///  - message object 88 is not valid
; ..\CAN.c	  1643    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1644    ///  Configuration of Message Object 89:
; ..\CAN.c	  1645    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1646    ///  - message object 89 is not valid
; ..\CAN.c	  1647    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1648    ///  Configuration of Message Object 90:
; ..\CAN.c	  1649    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1650    ///  - message object 90 is not valid
; ..\CAN.c	  1651    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1652    ///  Configuration of Message Object 91:
; ..\CAN.c	  1653    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1654    ///  - message object 91 is not valid
; ..\CAN.c	  1655    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1656    ///  Configuration of Message Object 92:
; ..\CAN.c	  1657    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1658    ///  - message object 92 is not valid
; ..\CAN.c	  1659    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1660    ///  Configuration of Message Object 93:
; ..\CAN.c	  1661    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1662    ///  - message object 93 is not valid
; ..\CAN.c	  1663    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1664    ///  Configuration of Message Object 94:
; ..\CAN.c	  1665    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1666    ///  - message object 94 is not valid
; ..\CAN.c	  1667    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1668    ///  Configuration of Message Object 95:
; ..\CAN.c	  1669    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1670    ///  - message object 95 is not valid
; ..\CAN.c	  1671    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1672    ///  Configuration of Message Object 96:
; ..\CAN.c	  1673    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1674    ///  - message object 96 is not valid
; ..\CAN.c	  1675    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1676    ///  Configuration of Message Object 97:
; ..\CAN.c	  1677    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1678    ///  - message object 97 is not valid
; ..\CAN.c	  1679    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1680    ///  Configuration of Message Object 98:
; ..\CAN.c	  1681    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1682    ///  - message object 98 is not valid
; ..\CAN.c	  1683    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1684    ///  Configuration of Message Object 99:
; ..\CAN.c	  1685    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1686    ///  - message object 99 is not valid
; ..\CAN.c	  1687    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1688    ///  Configuration of Message Object 100:
; ..\CAN.c	  1689    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1690    ///  - message object 100 is not valid
; ..\CAN.c	  1691    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1692    ///  Configuration of Message Object 101:
; ..\CAN.c	  1693    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1694    ///  - message object 101 is not valid
; ..\CAN.c	  1695    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1696    ///  Configuration of Message Object 102:
; ..\CAN.c	  1697    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1698    ///  - message object 102 is not valid
; ..\CAN.c	  1699    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1700    ///  Configuration of Message Object 103:
; ..\CAN.c	  1701    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1702    ///  - message object 103 is not valid
; ..\CAN.c	  1703    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1704    ///  Configuration of Message Object 104:
; ..\CAN.c	  1705    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1706    ///  - message object 104 is not valid
; ..\CAN.c	  1707    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1708    ///  Configuration of Message Object 105:
; ..\CAN.c	  1709    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1710    ///  - message object 105 is not valid
; ..\CAN.c	  1711    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1712    ///  Configuration of Message Object 106:
; ..\CAN.c	  1713    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1714    ///  - message object 106 is not valid
; ..\CAN.c	  1715    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1716    ///  Configuration of Message Object 107:
; ..\CAN.c	  1717    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1718    ///  - message object 107 is not valid
; ..\CAN.c	  1719    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1720    ///  Configuration of Message Object 108:
; ..\CAN.c	  1721    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1722    ///  - message object 108 is not valid
; ..\CAN.c	  1723    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1724    ///  Configuration of Message Object 109:
; ..\CAN.c	  1725    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1726    ///  - message object 109 is not valid
; ..\CAN.c	  1727    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1728    ///  Configuration of Message Object 110:
; ..\CAN.c	  1729    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1730    ///  - message object 110 is not valid
; ..\CAN.c	  1731    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1732    ///  Configuration of Message Object 111:
; ..\CAN.c	  1733    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1734    ///  - message object 111 is not valid
; ..\CAN.c	  1735    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1736    ///  Configuration of Message Object 112:
; ..\CAN.c	  1737    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1738    ///  - message object 112 is not valid
; ..\CAN.c	  1739    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1740    ///  Configuration of Message Object 113:
; ..\CAN.c	  1741    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1742    ///  - message object 113 is not valid
; ..\CAN.c	  1743    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1744    ///  Configuration of Message Object 114:
; ..\CAN.c	  1745    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1746    ///  - message object 114 is not valid
; ..\CAN.c	  1747    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1748    ///  Configuration of Message Object 115:
; ..\CAN.c	  1749    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1750    ///  - message object 115 is not valid
; ..\CAN.c	  1751    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1752    ///  Configuration of Message Object 116:
; ..\CAN.c	  1753    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1754    ///  - message object 116 is not valid
; ..\CAN.c	  1755    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1756    ///  Configuration of Message Object 117:
; ..\CAN.c	  1757    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1758    ///  - message object 117 is not valid
; ..\CAN.c	  1759    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1760    ///  Configuration of Message Object 118:
; ..\CAN.c	  1761    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1762    ///  - message object 118 is not valid
; ..\CAN.c	  1763    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1764    ///  Configuration of Message Object 119:
; ..\CAN.c	  1765    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1766    ///  - message object 119 is not valid
; ..\CAN.c	  1767    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1768    ///  Configuration of Message Object 120:
; ..\CAN.c	  1769    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1770    ///  - message object 120 is not valid
; ..\CAN.c	  1771    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1772    ///  Configuration of Message Object 121:
; ..\CAN.c	  1773    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1774    ///  - message object 121 is not valid
; ..\CAN.c	  1775    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1776    ///  Configuration of Message Object 122:
; ..\CAN.c	  1777    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1778    ///  - message object 122 is not valid
; ..\CAN.c	  1779    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1780    ///  Configuration of Message Object 123:
; ..\CAN.c	  1781    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1782    ///  - message object 123 is not valid
; ..\CAN.c	  1783    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1784    ///  Configuration of Message Object 124:
; ..\CAN.c	  1785    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1786    ///  - message object 124 is not valid
; ..\CAN.c	  1787    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1788    ///  Configuration of Message Object 125:
; ..\CAN.c	  1789    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1790    ///  - message object 125 is not valid
; ..\CAN.c	  1791    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1792    ///  Configuration of Message Object 126:
; ..\CAN.c	  1793    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1794    ///  - message object 126 is not valid
; ..\CAN.c	  1795    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1796    ///  Configuration of Message Object 127:
; ..\CAN.c	  1797    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1798    ///  - message object 127 is not valid
; ..\CAN.c	  1799  
; ..\CAN.c	  1800    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1801    ///  Configuration of Service Request Nodes 0 - 15:
; ..\CAN.c	  1802    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1803    ///  - SRN0 service request node configuration:
; ..\CAN.c	  1804    ///  - SRN0 interrupt priority level (SRPN) = 3
; ..\CAN.c	  1805    ///  - SRN0 CPU interrupt is selected
; ..\CAN.c	  1806  
; ..\CAN.c	  1807    CAN_SRC0.U     = 0x00001003;   // set service request control register
	mov	d15,#4099
	st.w	[a2]@los(0xf00040fc),d15
.L750:

; ..\CAN.c	  1808  
; ..\CAN.c	  1809    ///  - SRN1 service request node configuration:
; ..\CAN.c	  1810    ///  - SRN1 interrupt priority level (SRPN) = 1
; ..\CAN.c	  1811    ///  - SRN1 CPU interrupt is selected
; ..\CAN.c	  1812  
; ..\CAN.c	  1813    CAN_SRC1.U     = 0x00001001;   // set service request control register
	mov	d15,#4097
	st.w	[a2]@los(0xf00040f8),d15
.L751:

; ..\CAN.c	  1814  
; ..\CAN.c	  1815    ///  - SRN2 service request node configuration:
; ..\CAN.c	  1816    ///  - SRN2 interrupt priority level (SRPN) = 4
; ..\CAN.c	  1817    ///  - SRN2 CPU interrupt is selected
; ..\CAN.c	  1818  
; ..\CAN.c	  1819    CAN_SRC2.U     = 0x00001004;   // set service request control register
	mov	d15,#4100
	st.w	[a2]@los(0xf00040f4),d15
.L752:

; ..\CAN.c	  1820  
; ..\CAN.c	  1821    ///  - SRN3 service request node configuration:
; ..\CAN.c	  1822    ///  - SRN3 interrupt priority level (SRPN) = 5
; ..\CAN.c	  1823    ///  - SRN3 CPU interrupt is selected
; ..\CAN.c	  1824  
; ..\CAN.c	  1825    CAN_SRC3.U     = 0x00001005;   // set service request control register
	mov	d15,#4101
	st.w	[a2]@los(0xf00040f0),d15
.L753:

; ..\CAN.c	  1826  
; ..\CAN.c	  1827    ///  - SRN4 service request node configuration:
; ..\CAN.c	  1828    ///  - SRN4 interrupt priority level (SRPN) = 6
; ..\CAN.c	  1829    ///  - SRN4 CPU interrupt is selected
; ..\CAN.c	  1830  
; ..\CAN.c	  1831    CAN_SRC4.U     = 0x00001006;   // set service request control register
	mov	d15,#4102
	st.w	[a2]@los(0xf00040ec),d15
.L754:

; ..\CAN.c	  1832  
; ..\CAN.c	  1833    ///  - SRN5 service request node configuration:
; ..\CAN.c	  1834    ///  - SRN5 interrupt priority level (SRPN) = 7
; ..\CAN.c	  1835    ///  - SRN5 CPU interrupt is selected
; ..\CAN.c	  1836  
; ..\CAN.c	  1837    CAN_SRC5.U     = 0x00001007;   // set service request control register
	mov	d15,#4103
	st.w	[a2]@los(0xf00040e8),d15
.L755:

; ..\CAN.c	  1838  
; ..\CAN.c	  1839    ///  - SRN6 service request node configuration:
; ..\CAN.c	  1840    ///  - SRN6 interrupt priority level (SRPN) = 8
; ..\CAN.c	  1841    ///  - SRN6 CPU interrupt is selected
; ..\CAN.c	  1842  
; ..\CAN.c	  1843    CAN_SRC6.U     = 0x00001008;   // set service request control register
	mov	d15,#4104
	st.w	[a2]@los(0xf00040e4),d15
.L756:

; ..\CAN.c	  1844  
; ..\CAN.c	  1845    ///  - SRN7 service request node configuration:
; ..\CAN.c	  1846    ///  - SRN7 interrupt priority level (SRPN) = 9
; ..\CAN.c	  1847    ///  - SRN7 CPU interrupt is selected
; ..\CAN.c	  1848  
; ..\CAN.c	  1849    CAN_SRC7.U     = 0x00001009;   // set service request control register
	mov	d15,#4105
	st.w	[a2]@los(0xf00040e0),d15
.L757:

; ..\CAN.c	  1850  
; ..\CAN.c	  1851    ///  - SRN8 service request node configuration:
; ..\CAN.c	  1852    ///  - SRN8 interrupt priority level (SRPN) = 10
; ..\CAN.c	  1853    ///  - SRN8 CPU interrupt is selected
; ..\CAN.c	  1854  
; ..\CAN.c	  1855    CAN_SRC8.U     = 0x0000100A;   // set service request control register
	mov	d15,#4106
	st.w	[a2]@los(0xf00040dc),d15
.L758:

; ..\CAN.c	  1856  
; ..\CAN.c	  1857    ///  - SRN9 service request node configuration:
; ..\CAN.c	  1858    ///  - SRN9 interrupt priority level (SRPN) = 11
; ..\CAN.c	  1859    ///  - SRN9 CPU interrupt is selected
; ..\CAN.c	  1860  
; ..\CAN.c	  1861    CAN_SRC9.U     = 0x0000100B;   // set service request control register
	mov	d15,#4107
	st.w	[a2]@los(0xf00040d8),d15
.L759:

; ..\CAN.c	  1862  
; ..\CAN.c	  1863    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1864    ///  Initialization of the FIFO Pointer:
; ..\CAN.c	  1865    ///  -----------------------------------------------------------------------
; ..\CAN.c	  1866  
; ..\CAN.c	  1867    for (i = 0; i < 127; i++)
; ..\CAN.c	  1868    {
; ..\CAN.c	  1869      aubFIFOWritePtr[i] = (CAN_HWOBJ[i].uwMOFGPR & 0x000000ff);
	movh.a	a15,#@his(aubFIFOWritePtr)
	lea	a15,[a15]@los(aubFIFOWritePtr)
.L760:

; ..\CAN.c	  1870      aubFIFOReadPtr[i]  = (CAN_HWOBJ[i].uwMOFGPR & 0x000000ff);
	movh.a	a2,#@his(aubFIFOReadPtr)
	lea	a2,[a2]@los(aubFIFOReadPtr)
.L761:
	lea	a4,126
.L35:
	sha	d0,d1,#5
	ld.w	d15,__const_f0005000
.L762:
	add	d15,d0
.L763:
	mov.a	a6,d15
.L764:
	add	d1,#1
	ld.w	d15,[+a6]4
.L765:
	st.b	[a15+],d15
.L766:
	ld.w	d15,[a6]
.L767:
	st.b	[a2+],d15
.L768:
	loop	a4,.L35				; predicted taken
.L769:

; ..\CAN.c	  1871    }
; ..\CAN.c	  1872  
; ..\CAN.c	  1873    //   -----------------------------------------------------------------------
; ..\CAN.c	  1874    //   Start the CAN Nodes:
; ..\CAN.c	  1875    //   -----------------------------------------------------------------------
; ..\CAN.c	  1876    CAN_NCR1.U    &= ~0x00000041;  // reset INIT and CCE
	mov	d0,#-66
	ld.w	d15,[a5]
.L770:
	and	d15,d0
	st.w	[a5],d15
.L771:

; ..\CAN.c	  1877  
; ..\CAN.c	  1878  
; ..\CAN.c	  1879    // USER CODE BEGIN (Init,3)
; ..\CAN.c	  1880  
; ..\CAN.c	  1881    // USER CODE END
; ..\CAN.c	  1882  
; ..\CAN.c	  1883  } //  End of function CAN_vInit
	ret
.L305:
	
__CAN_vInit_function_end:
	.size	CAN_vInit,__CAN_vInit_function_end-CAN_vInit
.L190:
	; End of function
	
	.sdecl	'.text.CAN.CAN_vGetMsgObj',code,cluster('CAN_vGetMsgObj')
	.sect	'.text.CAN.CAN_vGetMsgObj'
	.align	2
	
	.global	CAN_vGetMsgObj

; ..\CAN.c	  1884  
; ..\CAN.c	  1885  
; ..\CAN.c	  1886  //****************************************************************************
; ..\CAN.c	  1887  // @Function      void CAN_vGetMsgObj(ubyte ubObjNr, CAN_SWObj *pstObj) 
; ..\CAN.c	  1888  //
; ..\CAN.c	  1889  //----------------------------------------------------------------------------
; ..\CAN.c	  1890  // @Description   This function fills the forwarded SW message object with 
; ..\CAN.c	  1891  //                the content of the chosen HW message object.
; ..\CAN.c	  1892  //                
; ..\CAN.c	  1893  //                The structure of the SW message object is defined in the 
; ..\CAN.c	  1894  //                header file CAN.h (see CAN_SWObj).
; ..\CAN.c	  1895  //
; ..\CAN.c	  1896  //----------------------------------------------------------------------------
; ..\CAN.c	  1897  // @Returnvalue   None
; ..\CAN.c	  1898  //
; ..\CAN.c	  1899  //----------------------------------------------------------------------------
; ..\CAN.c	  1900  // @Parameters    ubObjNr: 
; ..\CAN.c	  1901  //                Number of the message object to be read (0-127)
; ..\CAN.c	  1902  // @Parameters    *pstObj: 
; ..\CAN.c	  1903  //                Pointer on a message object to be filled by this function
; ..\CAN.c	  1904  //
; ..\CAN.c	  1905  //----------------------------------------------------------------------------
; ..\CAN.c	  1906  // @Date          2013-11-20
; ..\CAN.c	  1907  //
; ..\CAN.c	  1908  //****************************************************************************
; ..\CAN.c	  1909  
; ..\CAN.c	  1910  // USER CODE BEGIN (GetMsgObj,1)
; ..\CAN.c	  1911  
; ..\CAN.c	  1912  // USER CODE END
; ..\CAN.c	  1913  
; ..\CAN.c	  1914  void CAN_vGetMsgObj(ubyte ubObjNr, CAN_SWObj *pstObj)
; Function CAN_vGetMsgObj
.L139:
CAN_vGetMsgObj:	.type	func

; ..\CAN.c	  1915  {
; ..\CAN.c	  1916    ubyte i;
; ..\CAN.c	  1917  
; ..\CAN.c	  1918    // get DLC
; ..\CAN.c	  1919    pstObj->usMOCfg  = (CAN_HWOBJ[ubObjNr].uwMOFCR & 0x0f000000) >> 24;
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L369:
	add	d15,d4
	mov.a	a15,d15
.L776:
	ld.w	d15,[a15]
.L777:
	sh	d15,d15,#-24
.L778:
	and	d15,#15
	st.h	[a4],d15
.L779:

; ..\CAN.c	  1920    for(i = 0; i < pstObj->usMOCfg; i++)
	mov	d15,#0
.L370:
	j	.L36
.L37:

; ..\CAN.c	  1921    {
; ..\CAN.c	  1922      pstObj->ubData[i] = CAN_HWOBJ[ubObjNr].ubData[i];
	addsc.a	a2,a4,d15,#0
.L780:
	addsc.a	a5,a15,d15,#0
.L781:
	add	d15,#1
	ld.bu	d0,[a5]16
.L371:
	extr.u	d15,d15,#0,#8
	st.b	[a2]10,d0
.L36:
	ld.hu	d0,[a4]0
.L782:
	jlt.u	d15,d0,.L37				; predicted taken
.L783:

; ..\CAN.c	  1923    }
; ..\CAN.c	  1924  
; ..\CAN.c	  1925    pstObj->usMOCfg  = (pstObj->usMOCfg << 4);    // shift DLC
	sha	d0,#4
	st.h	[a4],d0
.L784:

; ..\CAN.c	  1926    if(CAN_HWOBJ[ubObjNr].uwMOCTR & 0x00000800)   // if transmit object
	ld.w	d15,[a15]28
.L372:
	jz.t	d15:11,.L38				; predicted taken
.L785:

; ..\CAN.c	  1927    {
; ..\CAN.c	  1928      pstObj->usMOCfg  = pstObj->usMOCfg | 0x08;  // set DIR
	ld.hu	d15,[a4]0
.L786:
	or	d15,#8
	st.h	[a4],d15
.L38:

; ..\CAN.c	  1929    }
; ..\CAN.c	  1930  
; ..\CAN.c	  1931    if(CAN_HWOBJ[ubObjNr].uwMOAR & 0x20000000)    // extended identifier
; ..\CAN.c	  1932    {
; ..\CAN.c	  1933      pstObj->uwID     = CAN_HWOBJ[ubObjNr].uwMOAR & 0x1fffffff;
; ..\CAN.c	  1934      pstObj->uwMask   = CAN_HWOBJ[ubObjNr].uwMOAMR & 0x1fffffff;
	lea	a2,[a15]12
.L787:
	lea	a5,[a15]24
	ld.w	d15,[a5]
.L788:
	jz.t	d15:29,.L39				; prediction unknown
.L789:
	ld.w	d15,[a5]
.L790:
	insert	d15,d15,#0,#29,#3
	st.w	[a4]2,d15
.L791:
	ld.w	d15,[a2]
.L792:
	insert	d15,d15,#0,#29,#3
	st.w	[a4]6,d15
.L793:

; ..\CAN.c	  1935      pstObj->usMOCfg  = pstObj->usMOCfg | 0x04;  // set IDE
	ld.hu	d15,[a4]0
.L794:
	or	d15,#4
	st.h	[a4],d15
.L795:
	j	.L40
.L39:

; ..\CAN.c	  1936    }
; ..\CAN.c	  1937    else                                          // standard identifier 
; ..\CAN.c	  1938    {
; ..\CAN.c	  1939      pstObj->uwID   = (CAN_HWOBJ[ubObjNr].uwMOAR & 0x1fffffff) >> 18;
	ld.w	d15,[a5]
.L796:
	extr.u	d15,d15,#18,#11
	st.w	[a4]2,d15
.L797:

; ..\CAN.c	  1940      pstObj->uwMask = (CAN_HWOBJ[ubObjNr].uwMOAMR & 0x1fffffff) >> 18;
	ld.w	d15,[a2]
.L798:
	extr.u	d15,d15,#18,#11
	st.w	[a4]6,d15
.L40:

; ..\CAN.c	  1941    }
; ..\CAN.c	  1942  
; ..\CAN.c	  1943    pstObj->usCounter = (CAN_HWOBJ[ubObjNr].uwMOIPR & 0xffff0000) >> 16;
	ld.w	d15,[a15]8
.L799:
	sh	d15,d15,#-16
	st.h	[a4]18,d15
.L800:

; ..\CAN.c	  1944  
; ..\CAN.c	  1945  } //  End of function CAN_vGetMsgObj
	ret
.L308:
	
__CAN_vGetMsgObj_function_end:
	.size	CAN_vGetMsgObj,__CAN_vGetMsgObj_function_end-CAN_vGetMsgObj
.L195:
	; End of function
	
	.sdecl	'.text.CAN.CAN_ubRequestMsgObj',code,cluster('CAN_ubRequestMsgObj')
	.sect	'.text.CAN.CAN_ubRequestMsgObj'
	.align	2
	
	.global	CAN_ubRequestMsgObj

; ..\CAN.c	  1946  
; ..\CAN.c	  1947  
; ..\CAN.c	  1948  //****************************************************************************
; ..\CAN.c	  1949  // @Function      ubyte CAN_ubRequestMsgObj(ubyte ubObjNr) 
; ..\CAN.c	  1950  //
; ..\CAN.c	  1951  //----------------------------------------------------------------------------
; ..\CAN.c	  1952  // @Description   If a TRANSMIT OBJECT is to be reconfigured it must first be 
; ..\CAN.c	  1953  //                accessed. The access to the transmit object is exclusive. 
; ..\CAN.c	  1954  //                This function checks whether the choosen message object is 
; ..\CAN.c	  1955  //                still executing a transmit request, or if the object can be 
; ..\CAN.c	  1956  //                accessed exclusively.
; ..\CAN.c	  1957  //                After the message object is reserved, it can be 
; ..\CAN.c	  1958  //                reconfigured by using the function CAN_vConfigMsgObj or 
; ..\CAN.c	  1959  //                CAN_vLoadData.
; ..\CAN.c	  1960  //                Both functions enable access to the object for the CAN 
; ..\CAN.c	  1961  //                controller. 
; ..\CAN.c	  1962  //                By calling the function CAN_vTransmit transfering of data 
; ..\CAN.c	  1963  //                is started.
; ..\CAN.c	  1964  //
; ..\CAN.c	  1965  //----------------------------------------------------------------------------
; ..\CAN.c	  1966  // @Returnvalue   0 message object is busy (a transfer is active), else 1
; ..\CAN.c	  1967  //
; ..\CAN.c	  1968  //----------------------------------------------------------------------------
; ..\CAN.c	  1969  // @Parameters    ubObjNr: 
; ..\CAN.c	  1970  //                Number of the message object (0-127)
; ..\CAN.c	  1971  //
; ..\CAN.c	  1972  //----------------------------------------------------------------------------
; ..\CAN.c	  1973  // @Date          2013-11-20
; ..\CAN.c	  1974  //
; ..\CAN.c	  1975  //****************************************************************************
; ..\CAN.c	  1976  
; ..\CAN.c	  1977  // USER CODE BEGIN (RequestMsgObj,1)
; ..\CAN.c	  1978  
; ..\CAN.c	  1979  // USER CODE END
; ..\CAN.c	  1980  
; ..\CAN.c	  1981  ubyte CAN_ubRequestMsgObj(ubyte ubObjNr)
; Function CAN_ubRequestMsgObj
.L141:
CAN_ubRequestMsgObj:	.type	func

; ..\CAN.c	  1982  {
; ..\CAN.c	  1983    ubyte ubReturn;
; ..\CAN.c	  1984  
; ..\CAN.c	  1985    ubReturn = 0;
; ..\CAN.c	  1986    if((CAN_HWOBJ[ubObjNr].uwMOCTR & 0x00000100) == 0x00000000)  // if reset TXRQ 
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L373:
	add	d15,d4
.L805:
	add	d15,d15,#28
	mov.a	a15,d15
.L806:
	mov	d2,#0
	ld.w	d15,[a15]
.L374:
	jnz.t	d15:8,.L41				; predicted not taken
.L807:

; ..\CAN.c	  1987    {
; ..\CAN.c	  1988      CAN_HWOBJ[ubObjNr].uwMOCTR = 0x00000020;                   // reset MSGVAL 
	mov	d15,#32
	st.w	[a15],d15
.L808:

; ..\CAN.c	  1989      ubReturn = 1;
	mov	d2,#1
.L41:

; ..\CAN.c	  1990    }
; ..\CAN.c	  1991    return(ubReturn);
; ..\CAN.c	  1992  
; ..\CAN.c	  1993  } //  End of function CAN_ubRequestMsgObj
	ret
.L313:
	
__CAN_ubRequestMsgObj_function_end:
	.size	CAN_ubRequestMsgObj,__CAN_ubRequestMsgObj_function_end-CAN_ubRequestMsgObj
.L200:
	; End of function
	
	.sdecl	'.text.CAN.CAN_ubNewData',code,cluster('CAN_ubNewData')
	.sect	'.text.CAN.CAN_ubNewData'
	.align	2
	
	.global	CAN_ubNewData

; ..\CAN.c	  1994  
; ..\CAN.c	  1995  
; ..\CAN.c	  1996  //****************************************************************************
; ..\CAN.c	  1997  // @Function      ubyte CAN_ubNewData(ubyte ubObjNr) 
; ..\CAN.c	  1998  //
; ..\CAN.c	  1999  //----------------------------------------------------------------------------
; ..\CAN.c	  2000  // @Description   This function checks whether the selected RECEIVE OBJECT 
; ..\CAN.c	  2001  //                has received a new message. If so the function returns the 
; ..\CAN.c	  2002  //                value '1'.
; ..\CAN.c	  2003  //
; ..\CAN.c	  2004  //----------------------------------------------------------------------------
; ..\CAN.c	  2005  // @Returnvalue   1 the message object has received a new message, else 0
; ..\CAN.c	  2006  //
; ..\CAN.c	  2007  //----------------------------------------------------------------------------
; ..\CAN.c	  2008  // @Parameters    ubObjNr: 
; ..\CAN.c	  2009  //                Number of the message object (0-127)
; ..\CAN.c	  2010  //
; ..\CAN.c	  2011  //----------------------------------------------------------------------------
; ..\CAN.c	  2012  // @Date          2013-11-20
; ..\CAN.c	  2013  //
; ..\CAN.c	  2014  //****************************************************************************
; ..\CAN.c	  2015  
; ..\CAN.c	  2016  // USER CODE BEGIN (NewData,1)
; ..\CAN.c	  2017  
; ..\CAN.c	  2018  // USER CODE END
; ..\CAN.c	  2019  
; ..\CAN.c	  2020  ubyte CAN_ubNewData(ubyte ubObjNr)
; Function CAN_ubNewData
.L143:
CAN_ubNewData:	.type	func

; ..\CAN.c	  2021  {
; ..\CAN.c	  2022    ubyte ubReturn;
; ..\CAN.c	  2023  
; ..\CAN.c	  2024    ubReturn = 0;
; ..\CAN.c	  2025    if((CAN_HWOBJ[ubObjNr].uwMOCTR & 0x00000008))    // if NEWDAT 
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L375:
	add	d15,d4
.L813:
	mov.a	a15,d15
.L814:
	mov	d2,#0
	ld.w	d15,[a15]28
.L376:
	jz.t	d15:3,.L43				; predicted taken
.L815:

; ..\CAN.c	  2026    {
; ..\CAN.c	  2027      ubReturn = 1;
	mov	d2,#1
.L43:

; ..\CAN.c	  2028    }
; ..\CAN.c	  2029    return(ubReturn);
; ..\CAN.c	  2030  
; ..\CAN.c	  2031  } //  End of function CAN_ubNewData
	ret
.L316:
	
__CAN_ubNewData_function_end:
	.size	CAN_ubNewData,__CAN_ubNewData_function_end-CAN_ubNewData
.L205:
	; End of function
	
	.sdecl	'.text.CAN.CAN_vTransmit',code,cluster('CAN_vTransmit')
	.sect	'.text.CAN.CAN_vTransmit'
	.align	2
	
	.global	CAN_vTransmit

; ..\CAN.c	  2032  
; ..\CAN.c	  2033  
; ..\CAN.c	  2034  //****************************************************************************
; ..\CAN.c	  2035  // @Function      void CAN_vTransmit(ubyte ubObjNr) 
; ..\CAN.c	  2036  //
; ..\CAN.c	  2037  //----------------------------------------------------------------------------
; ..\CAN.c	  2038  // @Description   This function triggers the CAN controller to send the 
; ..\CAN.c	  2039  //                selected message.
; ..\CAN.c	  2040  //                If the selected message object is a TRANSMIT OBJECT then 
; ..\CAN.c	  2041  //                this function triggers the sending of a data frame. If 
; ..\CAN.c	  2042  //                however the selected message object is a RECEIVE OBJECT 
; ..\CAN.c	  2043  //                this function triggers the sending of a remote frame.
; ..\CAN.c	  2044  //
; ..\CAN.c	  2045  //----------------------------------------------------------------------------
; ..\CAN.c	  2046  // @Returnvalue   None
; ..\CAN.c	  2047  //
; ..\CAN.c	  2048  //----------------------------------------------------------------------------
; ..\CAN.c	  2049  // @Parameters    ubObjNr: 
; ..\CAN.c	  2050  //                Number of the message object (0-127)
; ..\CAN.c	  2051  //
; ..\CAN.c	  2052  //----------------------------------------------------------------------------
; ..\CAN.c	  2053  // @Date          2013-11-20
; ..\CAN.c	  2054  //
; ..\CAN.c	  2055  //****************************************************************************
; ..\CAN.c	  2056  
; ..\CAN.c	  2057  // USER CODE BEGIN (Transmit,1)
; ..\CAN.c	  2058  
; ..\CAN.c	  2059  // USER CODE END
; ..\CAN.c	  2060  
; ..\CAN.c	  2061  void CAN_vTransmit(ubyte ubObjNr)
; Function CAN_vTransmit
.L145:
CAN_vTransmit:	.type	func

; ..\CAN.c	  2062  {
; ..\CAN.c	  2063    CAN_HWOBJ[ubObjNr].uwMOCTR = 0x07000000;  // set TXRQ,TXEN0,TXEN1
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L377:
	add	d15,d4
.L820:
	mov.a	a15,d15
.L821:
	movh	d15,#1792
	st.w	[a15]28,d15
.L822:

; ..\CAN.c	  2064  
; ..\CAN.c	  2065  } //  End of function CAN_vTransmit
	ret
.L319:
	
__CAN_vTransmit_function_end:
	.size	CAN_vTransmit,__CAN_vTransmit_function_end-CAN_vTransmit
.L210:
	; End of function
	
	.sdecl	'.text.CAN.CAN_vConfigMsgObj',code,cluster('CAN_vConfigMsgObj')
	.sect	'.text.CAN.CAN_vConfigMsgObj'
	.align	2
	
	.global	CAN_vConfigMsgObj

; ..\CAN.c	  2066  
; ..\CAN.c	  2067  
; ..\CAN.c	  2068  //****************************************************************************
; ..\CAN.c	  2069  // @Function      void CAN_vConfigMsgObj(ubyte ubObjNr, CAN_SWObj *pstObj) 
; ..\CAN.c	  2070  //
; ..\CAN.c	  2071  //----------------------------------------------------------------------------
; ..\CAN.c	  2072  // @Description   This function sets up the message objects. This includes 
; ..\CAN.c	  2073  //                the 8 data bytes, the identifier (11- or 29-bit), the 
; ..\CAN.c	  2074  //                acceptance mask (11- or 29-bit), the data number (0-8 
; ..\CAN.c	  2075  //                bytes), the frame counter value and the EDE-bit (standard 
; ..\CAN.c	  2076  //                or extended identifier).  The direction bit (DIR) can not 
; ..\CAN.c	  2077  //                be changed. 
; ..\CAN.c	  2078  //                The message is not sent; for this the function 
; ..\CAN.c	  2079  //                CAN_vTransmit must be called.
; ..\CAN.c	  2080  //                
; ..\CAN.c	  2081  //                The structure of the SW message object is defined in the 
; ..\CAN.c	  2082  //                header file CAN.h (see CAN_SWObj).
; ..\CAN.c	  2083  //
; ..\CAN.c	  2084  //----------------------------------------------------------------------------
; ..\CAN.c	  2085  // @Returnvalue   None
; ..\CAN.c	  2086  //
; ..\CAN.c	  2087  //----------------------------------------------------------------------------
; ..\CAN.c	  2088  // @Parameters    ubObjNr: 
; ..\CAN.c	  2089  //                Number of the message object to be configured (0-127)
; ..\CAN.c	  2090  // @Parameters    *pstObj: 
; ..\CAN.c	  2091  //                Pointer on a message object
; ..\CAN.c	  2092  //
; ..\CAN.c	  2093  //----------------------------------------------------------------------------
; ..\CAN.c	  2094  // @Date          2013-11-20
; ..\CAN.c	  2095  //
; ..\CAN.c	  2096  //****************************************************************************
; ..\CAN.c	  2097  
; ..\CAN.c	  2098  // USER CODE BEGIN (ConfigMsgObj,1)
; ..\CAN.c	  2099  
; ..\CAN.c	  2100  // USER CODE END
; ..\CAN.c	  2101  
; ..\CAN.c	  2102  void CAN_vConfigMsgObj(ubyte ubObjNr, CAN_SWObj *pstObj)
; Function CAN_vConfigMsgObj
.L147:
CAN_vConfigMsgObj:	.type	func

; ..\CAN.c	  2103  {
; ..\CAN.c	  2104    ubyte i;
; ..\CAN.c	  2105  
; ..\CAN.c	  2106    CAN_HWOBJ[ubObjNr].uwMOCTR = 0x00000020;     // reset MSGVAL
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L378:
	add	d15,d4
	mov.a	a2,d15
.L827:
	mov	d15,#32
	lea	a5,[a2]28
.L828:
	st.w	[a5],d15
.L829:

; ..\CAN.c	  2107  
; ..\CAN.c	  2108    if(pstObj->usMOCfg & 0x0004)                 // extended identifier
	ld.hu	d15,[a4]0
.L830:

; ..\CAN.c	  2109    {
; ..\CAN.c	  2110      CAN_HWOBJ[ubObjNr].uwMOAR  &= ~0x3fffffff;
	lea	a15,[a2]24
.L831:

; ..\CAN.c	  2111      CAN_HWOBJ[ubObjNr].uwMOAR  |= 0x20000000 | pstObj->uwID ;
; ..\CAN.c	  2112      CAN_HWOBJ[ubObjNr].uwMOAMR &= ~0x1fffffff;
	lea	a6,[a2]12
.L832:
	jz.t	d15:2,.L45				; prediction unknown
.L833:
	ld.w	d15,[a15]
.L834:
	insert	d15,d15,#0,#0,#30
	st.w	[a15],d15
.L835:
	ld.w	d0,[a4]2
.L836:
	insert	d0,d0,#1,#29,#1
	ld.w	d15,[a15]
.L837:
	or	d15,d0
	st.w	[a15],d15
.L838:
	ld.w	d15,[a6]
.L839:
	insert	d15,d15,#0,#0,#29
	st.w	[a6],d15
.L840:

; ..\CAN.c	  2113      CAN_HWOBJ[ubObjNr].uwMOAMR |= pstObj->uwMask ;
	ld.w	d15,[a6]
.L841:
	ld.w	d0,[a4]6
.L842:
	j	.L46
.L45:

; ..\CAN.c	  2114    }
; ..\CAN.c	  2115    else                                         // standard identifier
; ..\CAN.c	  2116    {
; ..\CAN.c	  2117      CAN_HWOBJ[ubObjNr].uwMOAR  &= ~0x3fffffff;
	ld.w	d15,[a15]
.L843:
	insert	d15,d15,#0,#0,#30
	st.w	[a15],d15
.L844:

; ..\CAN.c	  2118      CAN_HWOBJ[ubObjNr].uwMOAR  |= pstObj->uwID << 18 ;
	ld.w	d0,[a4]2
.L845:
	sh	d0,d0,#18
	ld.w	d15,[a15]
.L846:
	or	d15,d0
	st.w	[a15],d15
.L847:

; ..\CAN.c	  2119      CAN_HWOBJ[ubObjNr].uwMOAMR &= ~0x1fffffff;
	ld.w	d15,[a6]
.L848:
	insert	d15,d15,#0,#0,#29
	st.w	[a6],d15
.L849:

; ..\CAN.c	  2120      CAN_HWOBJ[ubObjNr].uwMOAMR |= pstObj->uwMask << 18 ;
	ld.w	d0,[a4]6
.L850:
	sh	d0,d0,#18
	ld.w	d15,[a6]
.L46:
	or	d15,d0
	st.w	[a6],d15
.L851:

; ..\CAN.c	  2121    }
; ..\CAN.c	  2122  
; ..\CAN.c	  2123    CAN_HWOBJ[ubObjNr].uwMOIPR &= ~0xffff0000;
	lea	a15,[a2]8
	ld.w	d15,[a15]
.L852:
	insert	d15,d15,#0,#16,#16
	st.w	[a15],d15
.L853:

; ..\CAN.c	  2124    CAN_HWOBJ[ubObjNr].uwMOIPR |= pstObj->usCounter << 16;
	ld.hu	d0,[a4]18
.L854:
	sha	d0,d0,#16
	ld.w	d15,[a15]
.L855:
	or	d15,d0
	st.w	[a15],d15
.L856:

; ..\CAN.c	  2125  
; ..\CAN.c	  2126    CAN_HWOBJ[ubObjNr].uwMOFCR  = (CAN_HWOBJ[ubObjNr].uwMOFCR & ~0x0f000000) | ((pstObj->usMOCfg & 0x00f0) << 20);
	ld.w	d15,[a2]
.L857:
	insert	d0,d15,#0,#24,#4
	ld.hu	d15,[a4]0
.L858:
	and	d15,#240
.L859:
	sha	d15,d15,#20
.L860:
	or	d0,d15
	st.w	[a2],d0
.L861:

; ..\CAN.c	  2127  
; ..\CAN.c	  2128    if(CAN_HWOBJ[ubObjNr].uwMOCTR & 0x00000800)  // if transmit direction
	ld.w	d15,[a5]
.L862:
	jz.t	d15:11,.L47				; predicted not taken
.L863:

; ..\CAN.c	  2129    {
; ..\CAN.c	  2130      for(i = 0; i < (pstObj->usMOCfg & 0x00f0) >> 4; i++)
	mov	d15,#0
.L379:
	j	.L48
.L49:

; ..\CAN.c	  2131      {
; ..\CAN.c	  2132        CAN_HWOBJ[ubObjNr].ubData[i] = pstObj->ubData[i];
	addsc.a	a6,a2,d15,#0
.L864:
	addsc.a	a15,a4,d15,#0
.L865:
	add	d15,#1
	ld.bu	d0,[a15]10
.L380:
	extr.u	d15,d15,#0,#8
	st.b	[a6]16,d0
.L48:
	ld.hu	d0,[a4]0
.L866:
	and	d0,d0,#240
.L867:
	sha	d0,#-4
.L868:
	jlt.u	d15,d0,.L49				; predicted taken
.L869:

; ..\CAN.c	  2133      }
; ..\CAN.c	  2134      CAN_HWOBJ[ubObjNr].uwMOCTR  = 0x06280040;  // set NEWDAT, reset RTSEL, 
	ld.w	d15,__const_06280040
.L381:
	j	.L50
.L47:

; ..\CAN.c	  2135    }                                            // set MSGVAL, set TXEN0, TXEN1
; ..\CAN.c	  2136    else                                         // if receive direction
; ..\CAN.c	  2137    {
; ..\CAN.c	  2138      CAN_HWOBJ[ubObjNr].uwMOCTR  = 0x00200040;  // reset RTSEL, set MSGVAL
	ld.w	d15,__const_00200040
.L50:
	st.w	[a5],d15
.L870:

; ..\CAN.c	  2139    }
; ..\CAN.c	  2140  
; ..\CAN.c	  2141  } //  End of function CAN_vConfigMsgObj
	ret
.L321:
	
__CAN_vConfigMsgObj_function_end:
	.size	CAN_vConfigMsgObj,__CAN_vConfigMsgObj_function_end-CAN_vConfigMsgObj
.L215:
	; End of function
	
	.sdecl	'.text.CAN.CAN_vLoadData',code,cluster('CAN_vLoadData')
	.sect	'.text.CAN.CAN_vLoadData'
	.align	2
	
	.global	CAN_vLoadData

; ..\CAN.c	  2142  
; ..\CAN.c	  2143  
; ..\CAN.c	  2144  //****************************************************************************
; ..\CAN.c	  2145  // @Function      void CAN_vLoadData(ubyte ubObjNr, ubyte *pubData) 
; ..\CAN.c	  2146  //
; ..\CAN.c	  2147  //----------------------------------------------------------------------------
; ..\CAN.c	  2148  // @Description   If a hardware TRANSMIT OBJECT has to be loaded with data 
; ..\CAN.c	  2149  //                but not with a new identifier, this function may be used 
; ..\CAN.c	  2150  //                instead of the function CAN_vConfigMsgObj. The message 
; ..\CAN.c	  2151  //                object should be accessed by calling the function 
; ..\CAN.c	  2152  //                CAN_ubRequestMsgObj before calling this function. This 
; ..\CAN.c	  2153  //                prevents the CAN controller from working with invalid data.
; ..\CAN.c	  2154  //
; ..\CAN.c	  2155  //----------------------------------------------------------------------------
; ..\CAN.c	  2156  // @Returnvalue   None
; ..\CAN.c	  2157  //
; ..\CAN.c	  2158  //----------------------------------------------------------------------------
; ..\CAN.c	  2159  // @Parameters    ubObjNr: 
; ..\CAN.c	  2160  //                Number of the message object to be configured (0-127)
; ..\CAN.c	  2161  // @Parameters    *pubData: 
; ..\CAN.c	  2162  //                Pointer on a data buffer
; ..\CAN.c	  2163  //
; ..\CAN.c	  2164  //----------------------------------------------------------------------------
; ..\CAN.c	  2165  // @Date          2013-11-20
; ..\CAN.c	  2166  //
; ..\CAN.c	  2167  //****************************************************************************
; ..\CAN.c	  2168  
; ..\CAN.c	  2169  // USER CODE BEGIN (LoadData,1)
; ..\CAN.c	  2170  
; ..\CAN.c	  2171  // USER CODE END
; ..\CAN.c	  2172  
; ..\CAN.c	  2173  void CAN_vLoadData(ubyte ubObjNr, ubyte *pubData)
; Function CAN_vLoadData
.L149:
CAN_vLoadData:	.type	func

; ..\CAN.c	  2174  {
; ..\CAN.c	  2175    ubyte i;
; ..\CAN.c	  2176  
; ..\CAN.c	  2177    CAN_HWOBJ[ubObjNr].uwMOCTR = 0x00080000;       // set NEWDAT
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L382:
	add	d15,d4
	mov.a	a15,d15
.L875:
	movh	d15,#8
	lea	a2,[a15]28
.L876:

; ..\CAN.c	  2178  
; ..\CAN.c	  2179    for(i = 0; i < (CAN_HWOBJ[ubObjNr].uwMOFCR & 0x0f000000) >> 24; i++)
	movh	d1,#3840
	st.w	[a2],d15
.L877:
	mov	d15,#0
	ld.w	d0,[a15]
.L383:
	and	d0,d1
.L878:
	jeq	d0,#0,.L51				; predicted not taken
.L52:

; ..\CAN.c	  2180    {
; ..\CAN.c	  2181      CAN_HWOBJ[ubObjNr].ubData[i] = *(pubData++);
	addsc.a	a5,a15,d15,#0
.L879:
	add	d15,#1
	ld.bu	d0,[a4+]
.L384:
	st.b	[a5]16,d0
.L880:
	extr.u	d15,d15,#0,#8
	ld.w	d0,[a15]
.L385:
	extr.u	d0,d0,#24,#4
.L881:
	jlt.u	d15,d0,.L52				; predicted taken
.L51:

; ..\CAN.c	  2182    }
; ..\CAN.c	  2183  
; ..\CAN.c	  2184    CAN_HWOBJ[ubObjNr].uwMOCTR = 0x00200040;       // reset RTSEL, set MSGVAL
	ld.w	d15,__const_00200040
.L386:
	st.w	[a2],d15
.L882:

; ..\CAN.c	  2185  
; ..\CAN.c	  2186  } //  End of function CAN_vLoadData
	ret
.L325:
	
__CAN_vLoadData_function_end:
	.size	CAN_vLoadData,__CAN_vLoadData_function_end-CAN_vLoadData
.L220:
	; End of function
	
	.sdecl	'.text.CAN.CAN_ubMsgLost',code,cluster('CAN_ubMsgLost')
	.sect	'.text.CAN.CAN_ubMsgLost'
	.align	2
	
	.global	CAN_ubMsgLost

; ..\CAN.c	  2187  
; ..\CAN.c	  2188  
; ..\CAN.c	  2189  //****************************************************************************
; ..\CAN.c	  2190  // @Function      ubyte CAN_ubMsgLost(ubyte ubObjNr) 
; ..\CAN.c	  2191  //
; ..\CAN.c	  2192  //----------------------------------------------------------------------------
; ..\CAN.c	  2193  // @Description   If a RECEIVE OBJECT receives new data before the old object 
; ..\CAN.c	  2194  //                has been read, the old object is lost. The CAN controller 
; ..\CAN.c	  2195  //                indicates this by setting the message lost bit (MSGLST). 
; ..\CAN.c	  2196  //                This function returns the status of this bit. 
; ..\CAN.c	  2197  //                
; ..\CAN.c	  2198  //                Note:
; ..\CAN.c	  2199  //                This function resets the message lost bit (MSGLST).
; ..\CAN.c	  2200  //
; ..\CAN.c	  2201  //----------------------------------------------------------------------------
; ..\CAN.c	  2202  // @Returnvalue   1 the message object has lost a message, else 0
; ..\CAN.c	  2203  //
; ..\CAN.c	  2204  //----------------------------------------------------------------------------
; ..\CAN.c	  2205  // @Parameters    ubObjNr: 
; ..\CAN.c	  2206  //                Number of the message object (0-127)
; ..\CAN.c	  2207  //
; ..\CAN.c	  2208  //----------------------------------------------------------------------------
; ..\CAN.c	  2209  // @Date          2013-11-20
; ..\CAN.c	  2210  //
; ..\CAN.c	  2211  //****************************************************************************
; ..\CAN.c	  2212  
; ..\CAN.c	  2213  // USER CODE BEGIN (MsgLost,1)
; ..\CAN.c	  2214  
; ..\CAN.c	  2215  // USER CODE END
; ..\CAN.c	  2216  
; ..\CAN.c	  2217  ubyte CAN_ubMsgLost(ubyte ubObjNr)
; Function CAN_ubMsgLost
.L151:
CAN_ubMsgLost:	.type	func

; ..\CAN.c	  2218  {
; ..\CAN.c	  2219    ubyte ubReturn;
; ..\CAN.c	  2220  
; ..\CAN.c	  2221    ubReturn = 0;
; ..\CAN.c	  2222    if(CAN_HWOBJ[ubObjNr].uwMOCTR & 0x00000010)  // if set MSGLST 
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L387:
	add	d15,d4
.L887:
	add	d15,d15,#28
	mov.a	a15,d15
.L888:
	mov	d2,#0
	ld.w	d15,[a15]
.L388:
	jz.t	d15:4,.L53				; predicted not taken
.L889:

; ..\CAN.c	  2223    {
; ..\CAN.c	  2224      CAN_HWOBJ[ubObjNr].uwMOCTR = 0x00000010;   // reset MSGLST 
	mov	d15,#16
	st.w	[a15],d15
.L890:

; ..\CAN.c	  2225      ubReturn = 1;
	mov	d2,#1
.L53:

; ..\CAN.c	  2226    }
; ..\CAN.c	  2227    return(ubReturn);
; ..\CAN.c	  2228  
; ..\CAN.c	  2229  } //  End of function CAN_ubMsgLost
	ret
.L330:
	
__CAN_ubMsgLost_function_end:
	.size	CAN_ubMsgLost,__CAN_ubMsgLost_function_end-CAN_ubMsgLost
.L225:
	; End of function
	
	.sdecl	'.text.CAN.CAN_ubDelMsgObj',code,cluster('CAN_ubDelMsgObj')
	.sect	'.text.CAN.CAN_ubDelMsgObj'
	.align	2
	
	.global	CAN_ubDelMsgObj

; ..\CAN.c	  2230  
; ..\CAN.c	  2231  
; ..\CAN.c	  2232  //****************************************************************************
; ..\CAN.c	  2233  // @Function      ubyte CAN_ubDelMsgObj(ubyte ubObjNr) 
; ..\CAN.c	  2234  //
; ..\CAN.c	  2235  //----------------------------------------------------------------------------
; ..\CAN.c	  2236  // @Description   This function marks the selected message object as not 
; ..\CAN.c	  2237  //                valid. This means that this object cannot be sent or 
; ..\CAN.c	  2238  //                receive data. If the selected object is busy (meaning the 
; ..\CAN.c	  2239  //                object is transmitting a message or has received a new 
; ..\CAN.c	  2240  //                message) this function returns the value "0" and the object 
; ..\CAN.c	  2241  //                is not deleted.
; ..\CAN.c	  2242  //
; ..\CAN.c	  2243  //----------------------------------------------------------------------------
; ..\CAN.c	  2244  // @Returnvalue   1 the message object was deleted, else 0
; ..\CAN.c	  2245  //
; ..\CAN.c	  2246  //----------------------------------------------------------------------------
; ..\CAN.c	  2247  // @Parameters    ubObjNr: 
; ..\CAN.c	  2248  //                Number of the message object (0-127)
; ..\CAN.c	  2249  //
; ..\CAN.c	  2250  //----------------------------------------------------------------------------
; ..\CAN.c	  2251  // @Date          2013-11-20
; ..\CAN.c	  2252  //
; ..\CAN.c	  2253  //****************************************************************************
; ..\CAN.c	  2254  
; ..\CAN.c	  2255  // USER CODE BEGIN (DelMsgObj,1)
; ..\CAN.c	  2256  
; ..\CAN.c	  2257  // USER CODE END
; ..\CAN.c	  2258  
; ..\CAN.c	  2259  ubyte CAN_ubDelMsgObj(ubyte ubObjNr)
; Function CAN_ubDelMsgObj
.L153:
CAN_ubDelMsgObj:	.type	func

; ..\CAN.c	  2260  {
; ..\CAN.c	  2261    ubyte ubReturn;
; ..\CAN.c	  2262  
; ..\CAN.c	  2263    ubReturn = 0;
; ..\CAN.c	  2264    if(!(CAN_HWOBJ[ubObjNr].uwMOCTR & 0x00000108)) // if set TXRQ or NEWDAT
	mov	d2,#0
	ld.w	d15,__const_f0005000
.L390:
	sha	d4,#5
.L389:
	add	d15,d4
.L895:
	add	d15,d15,#28
	mov.a	a15,d15
	ld.w	d15,[a15]
.L896:
	and	d15,d15,#264
.L897:
	jne	d15,#0,.L55				; predicted not taken
.L898:

; ..\CAN.c	  2265    {
; ..\CAN.c	  2266      CAN_HWOBJ[ubObjNr].uwMOCTR = 0x00000020;     // reset MSGVAL
	mov	d15,#32
	st.w	[a15],d15
.L899:

; ..\CAN.c	  2267      ubReturn = 1;
	mov	d2,#1
.L55:

; ..\CAN.c	  2268    }
; ..\CAN.c	  2269    return(ubReturn);
; ..\CAN.c	  2270  
; ..\CAN.c	  2271  } //  End of function CAN_ubDelMsgObj
	ret
.L333:
	
__CAN_ubDelMsgObj_function_end:
	.size	CAN_ubDelMsgObj,__CAN_ubDelMsgObj_function_end-CAN_ubDelMsgObj
.L230:
	; End of function
	
	.sdecl	'.text.CAN.CAN_vReleaseObj',code,cluster('CAN_vReleaseObj')
	.sect	'.text.CAN.CAN_vReleaseObj'
	.align	2
	
	.global	CAN_vReleaseObj

; ..\CAN.c	  2272  
; ..\CAN.c	  2273  
; ..\CAN.c	  2274  //****************************************************************************
; ..\CAN.c	  2275  // @Function      void CAN_vReleaseObj(ubyte ubObjNr) 
; ..\CAN.c	  2276  //
; ..\CAN.c	  2277  //----------------------------------------------------------------------------
; ..\CAN.c	  2278  // @Description   This function resets the NEWDAT flag of the selected 
; ..\CAN.c	  2279  //                RECEIVE OBJECT, so that the CAN controller have access to 
; ..\CAN.c	  2280  //                it. This function must be called if the function 
; ..\CAN.c	  2281  //                CAN_ubNewData detects, that new data are present in the 
; ..\CAN.c	  2282  //                message object and the actual data have been read by 
; ..\CAN.c	  2283  //                calling the function CAN_vGetMsgObj. 
; ..\CAN.c	  2284  //
; ..\CAN.c	  2285  //----------------------------------------------------------------------------
; ..\CAN.c	  2286  // @Returnvalue   None
; ..\CAN.c	  2287  //
; ..\CAN.c	  2288  //----------------------------------------------------------------------------
; ..\CAN.c	  2289  // @Parameters    ubObjNr: 
; ..\CAN.c	  2290  //                Number of the message object (0-127)
; ..\CAN.c	  2291  //
; ..\CAN.c	  2292  //----------------------------------------------------------------------------
; ..\CAN.c	  2293  // @Date          2013-11-20
; ..\CAN.c	  2294  //
; ..\CAN.c	  2295  //****************************************************************************
; ..\CAN.c	  2296  
; ..\CAN.c	  2297  // USER CODE BEGIN (ReleaseObj,1)
; ..\CAN.c	  2298  
; ..\CAN.c	  2299  // USER CODE END
; ..\CAN.c	  2300  
; ..\CAN.c	  2301  void CAN_vReleaseObj(ubyte ubObjNr)
; Function CAN_vReleaseObj
.L155:
CAN_vReleaseObj:	.type	func

; ..\CAN.c	  2302  {
; ..\CAN.c	  2303    CAN_HWOBJ[ubObjNr].uwMOCTR = 0x00000008;     // reset NEWDAT
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L391:
	add	d15,d4
.L904:
	mov.a	a15,d15
.L905:
	mov	d15,#8
	st.w	[a15]28,d15
.L906:

; ..\CAN.c	  2304  
; ..\CAN.c	  2305  } //  End of function CAN_vReleaseObj
	ret
.L336:
	
__CAN_vReleaseObj_function_end:
	.size	CAN_vReleaseObj,__CAN_vReleaseObj_function_end-CAN_vReleaseObj
.L235:
	; End of function
	
	.sdecl	'.text.CAN.CAN_vSetMSGVAL',code,cluster('CAN_vSetMSGVAL')
	.sect	'.text.CAN.CAN_vSetMSGVAL'
	.align	2
	
	.global	CAN_vSetMSGVAL

; ..\CAN.c	  2306  
; ..\CAN.c	  2307  
; ..\CAN.c	  2308  //****************************************************************************
; ..\CAN.c	  2309  // @Function      void CAN_vSetMSGVAL(ubyte ubObjNr) 
; ..\CAN.c	  2310  //
; ..\CAN.c	  2311  //----------------------------------------------------------------------------
; ..\CAN.c	  2312  // @Description   This function sets the MSGVAL flag of the selected object. 
; ..\CAN.c	  2313  //                This is only necessary if the single data transfer mode 
; ..\CAN.c	  2314  //                (SDT) for the selected object is enabled. If SDT is set to 
; ..\CAN.c	  2315  //                '1', the CAN controller automatically resets bit MSGVAL 
; ..\CAN.c	  2316  //                after receiving or tranmission of a frame.
; ..\CAN.c	  2317  //
; ..\CAN.c	  2318  //----------------------------------------------------------------------------
; ..\CAN.c	  2319  // @Returnvalue   None
; ..\CAN.c	  2320  //
; ..\CAN.c	  2321  //----------------------------------------------------------------------------
; ..\CAN.c	  2322  // @Parameters    ubObjNr: 
; ..\CAN.c	  2323  //                Number of the message object (0-127)
; ..\CAN.c	  2324  //
; ..\CAN.c	  2325  //----------------------------------------------------------------------------
; ..\CAN.c	  2326  // @Date          2013-11-20
; ..\CAN.c	  2327  //
; ..\CAN.c	  2328  //****************************************************************************
; ..\CAN.c	  2329  
; ..\CAN.c	  2330  // USER CODE BEGIN (SetMSGVAL,1)
; ..\CAN.c	  2331  
; ..\CAN.c	  2332  // USER CODE END
; ..\CAN.c	  2333  
; ..\CAN.c	  2334  void CAN_vSetMSGVAL(ubyte ubObjNr)
; Function CAN_vSetMSGVAL
.L157:
CAN_vSetMSGVAL:	.type	func

; ..\CAN.c	  2335  {
; ..\CAN.c	  2336    CAN_HWOBJ[ubObjNr].uwMOCTR = 0x00200000;     // set MSGVAL
	sha	d4,#5
	ld.w	d15,__const_f0005000
.L392:
	add	d15,d4
.L911:
	mov.a	a15,d15
.L912:
	movh	d15,#32
	st.w	[a15]28,d15
.L913:

; ..\CAN.c	  2337  
; ..\CAN.c	  2338  } //  End of function CAN_vSetMSGVAL
	ret
.L338:
	
__CAN_vSetMSGVAL_function_end:
	.size	CAN_vSetMSGVAL,__CAN_vSetMSGVAL_function_end-CAN_vSetMSGVAL
.L240:
	; End of function
	
	.sdecl	'.text.CAN.CAN_ubWriteFIFO',code,cluster('CAN_ubWriteFIFO')
	.sect	'.text.CAN.CAN_ubWriteFIFO'
	.align	2
	
	.global	CAN_ubWriteFIFO

; ..\CAN.c	  2339  
; ..\CAN.c	  2340  
; ..\CAN.c	  2341  //****************************************************************************
; ..\CAN.c	  2342  // @Function      ubyte CAN_ubWriteFIFO(ubyte ubObjNr, CAN_SWObj *pstObj) 
; ..\CAN.c	  2343  //
; ..\CAN.c	  2344  //----------------------------------------------------------------------------
; ..\CAN.c	  2345  // @Description   This function sets up the next free TRANSMIT message object 
; ..\CAN.c	  2346  //                which is part of a FIFO. This includes the 8 data bytes, 
; ..\CAN.c	  2347  //                the identifier (11- or 29-bit) and the data number (0-8 
; ..\CAN.c	  2348  //                bytes). The direction bit (DIR) and the EDE-bit can not be 
; ..\CAN.c	  2349  //                changed. The acceptance mask register and the Frame Counter 
; ..\CAN.c	  2350  //                remains unchanged. This function checks whether the choosen 
; ..\CAN.c	  2351  //                message object is still executing a transmit request, or if 
; ..\CAN.c	  2352  //                the object can be accessed exclusively. 
; ..\CAN.c	  2353  //                The structure of the SW message object is defined in the 
; ..\CAN.c	  2354  //                header file CAN.h (see CAN_SWObj).
; ..\CAN.c	  2355  //                Note: 
; ..\CAN.c	  2356  //                This function can only used for TRANSMIT objects which are 
; ..\CAN.c	  2357  //                configured for FIFO base functionality. 
; ..\CAN.c	  2358  //
; ..\CAN.c	  2359  //----------------------------------------------------------------------------
; ..\CAN.c	  2360  // @Returnvalue   0: message object is busy (a transfer is active); 1: the 
; ..\CAN.c	  2361  //                message object was configured and the transmite is 
; ..\CAN.c	  2362  //                requested; 2: this is not a FIFO base object
; ..\CAN.c	  2363  //
; ..\CAN.c	  2364  //----------------------------------------------------------------------------
; ..\CAN.c	  2365  // @Parameters    ubObjNr: 
; ..\CAN.c	  2366  //                Number of the FIFO base object
; ..\CAN.c	  2367  // @Parameters    *pstObj: 
; ..\CAN.c	  2368  //                Pointer on a message object
; ..\CAN.c	  2369  //
; ..\CAN.c	  2370  //----------------------------------------------------------------------------
; ..\CAN.c	  2371  // @Date          2013-11-20
; ..\CAN.c	  2372  //
; ..\CAN.c	  2373  //****************************************************************************
; ..\CAN.c	  2374  
; ..\CAN.c	  2375  // USER CODE BEGIN (WriteFIFO,1)
; ..\CAN.c	  2376  
; ..\CAN.c	  2377  // USER CODE END
; ..\CAN.c	  2378  
; ..\CAN.c	  2379  ubyte CAN_ubWriteFIFO(ubyte ubObjNr, CAN_SWObj *pstObj)
; Function CAN_ubWriteFIFO
.L159:
CAN_ubWriteFIFO:	.type	func

; ..\CAN.c	  2380  {
; ..\CAN.c	  2381    ubyte i,j;
; ..\CAN.c	  2382    ubyte ubReturn;
; ..\CAN.c	  2383  
; ..\CAN.c	  2384    ubReturn = 2;
; ..\CAN.c	  2385  
; ..\CAN.c	  2386    if((CAN_HWOBJ[ubObjNr].uwMOFCR & 0x0000000f) == 0x00000002)  // if transmit FIFO base object 
	mov	d2,#2
	ld.w	d15,__const_f0005000
.L393:
	mov.a	a2,d15
.L918:
	sha	d15,d4,#5
.L919:
	addsc.a	a15,a2,d15,#0
.L920:
	ld.w	d15,[a15]
.L921:
	and	d15,#15
.L922:
	jne	d15,#2,.L57				; predicted taken
.L923:

; ..\CAN.c	  2387    {
; ..\CAN.c	  2388      j = aubFIFOWritePtr[ubObjNr];
	movh.a	a5,#@his(aubFIFOWritePtr)
	lea	a5,[a5]@los(aubFIFOWritePtr)
.L924:
	addsc.a	a5,a5,d4,#0
	ld.bu	d0,[a5]
.L394:

; ..\CAN.c	  2389  
; ..\CAN.c	  2390      ubReturn = 0;
; ..\CAN.c	  2391      if((CAN_HWOBJ[j].uwMOCTR & 0x00000100) == 0x00000000) // if reset TXRQ 
	sha	d15,d0,#5
.L925:
	addsc.a	a2,a2,d15,#0
.L926:
	lea	a6,[a2]28
.L927:
	mov	d2,#0
	ld.w	d15,[a6]
.L928:
	jnz.t	d15:8,.L58				; predicted not taken
.L929:

; ..\CAN.c	  2392      {
; ..\CAN.c	  2393        if(j == (CAN_HWOBJ[j].uwMOCTR & 0xff000000) >> 24)  // last MO in a list
	ld.w	d15,[a6]
.L930:
	sh	d15,d15,#-24
.L931:
	jne	d15,d0,.L59				; predicted taken
.L932:

; ..\CAN.c	  2394        {
; ..\CAN.c	  2395          // WritePtr = BOT of the base object
; ..\CAN.c	  2396          aubFIFOWritePtr[ubObjNr] = (CAN_HWOBJ[ubObjNr].uwMOFGPR & 0x000000ff);
	ld.w	d15,[a15]4
.L933:
	j	.L60
.L59:

; ..\CAN.c	  2397        }
; ..\CAN.c	  2398        else
; ..\CAN.c	  2399        {
; ..\CAN.c	  2400          // WritePtr = PNEXT of the current selected slave
; ..\CAN.c	  2401          aubFIFOWritePtr[ubObjNr] = (CAN_HWOBJ[j].uwMOCTR & 0xff000000) >> 24;
	ld.w	d15,[a6]
.L934:
	sh	d15,d15,#-24
.L60:
	st.b	[a5],d15
.L935:

; ..\CAN.c	  2402        }
; ..\CAN.c	  2403  
; ..\CAN.c	  2404        CAN_HWOBJ[j].uwMOCTR = 0x00000008;                  // reset NEWDAT 
	mov	d15,#8
	st.w	[a6],d15
.L936:

; ..\CAN.c	  2405  
; ..\CAN.c	  2406        if(CAN_HWOBJ[j].uwMOAR & 0x20000000)                // extended identifier
	lea	a15,[a2]24
	ld.w	d15,[a15]
.L937:
	jz.t	d15:29,.L61				; prediction unknown
.L938:

; ..\CAN.c	  2407        {
; ..\CAN.c	  2408          CAN_HWOBJ[j].uwMOAR  &= ~0x3fffffff;
	ld.w	d15,[a15]
.L939:
	insert	d15,d15,#0,#0,#30
	st.w	[a15],d15
.L940:

; ..\CAN.c	  2409          CAN_HWOBJ[j].uwMOAR  |= 0x20000000 | pstObj->uwID;
	ld.w	d0,[a4]2
.L395:
	insert	d0,d0,#1,#29,#1
	ld.w	d15,[a15]
.L941:
	j	.L62
.L61:

; ..\CAN.c	  2410        }
; ..\CAN.c	  2411        else                                                // if standard identifier
; ..\CAN.c	  2412        {
; ..\CAN.c	  2413          CAN_HWOBJ[j].uwMOAR  &= ~0x3fffffff;
	ld.w	d15,[a15]
.L942:
	insert	d15,d15,#0,#0,#30
	st.w	[a15],d15
.L943:

; ..\CAN.c	  2414          CAN_HWOBJ[j].uwMOAR  |= pstObj->uwID << 18 ;
	ld.w	d0,[a4]2
.L396:
	sh	d0,d0,#18
	ld.w	d15,[a15]
.L62:
	or	d15,d0
	st.w	[a15],d15
.L944:

; ..\CAN.c	  2415        }
; ..\CAN.c	  2416  
; ..\CAN.c	  2417        CAN_HWOBJ[j].uwMOFCR  = (CAN_HWOBJ[j].uwMOFCR & ~0x0f000000) | ((pstObj->usMOCfg & 0x00f0) << 20);
	ld.w	d15,[a2]
.L945:
	insert	d0,d15,#0,#24,#4
	ld.hu	d15,[a4]0
.L946:
	and	d15,#240
.L947:
	sha	d15,d15,#20
.L948:
	or	d0,d15
	st.w	[a2],d0
.L949:

; ..\CAN.c	  2418  
; ..\CAN.c	  2419        for(i = 0; i < (pstObj->usMOCfg & 0x00f0) >> 4; i++)
	mov	d15,#0
.L397:
	j	.L63
.L64:

; ..\CAN.c	  2420        {
; ..\CAN.c	  2421          CAN_HWOBJ[j].ubData[i] = pstObj->ubData[i];
	addsc.a	a5,a2,d15,#0
.L950:
	addsc.a	a15,a4,d15,#0
.L951:
	add	d15,#1
	ld.bu	d0,[a15]10
.L398:
	extr.u	d15,d15,#0,#8
	st.b	[a5]16,d0
.L63:
	ld.hu	d0,[a4]0
.L952:
	and	d0,d0,#240
.L953:
	sha	d0,#-4
.L954:
	jlt.u	d15,d0,.L64				; predicted taken
.L955:

; ..\CAN.c	  2422        }
; ..\CAN.c	  2423        CAN_HWOBJ[j].uwMOCTR  = 0x01280000;                 // set TXRQ, NEWDAT, MSGVAL 
	movh	d15,#296
	st.w	[a6],d15
.L399:

; ..\CAN.c	  2424                                                
; ..\CAN.c	  2425        ubReturn = 1;
	mov	d2,#1
.L58:
.L57:

; ..\CAN.c	  2426      }
; ..\CAN.c	  2427    }
; ..\CAN.c	  2428    return(ubReturn);
; ..\CAN.c	  2429  
; ..\CAN.c	  2430  } //  End of function CAN_ubWriteFIFO
	ret
.L340:
	
__CAN_ubWriteFIFO_function_end:
	.size	CAN_ubWriteFIFO,__CAN_ubWriteFIFO_function_end-CAN_ubWriteFIFO
.L245:
	; End of function
	
	.sdecl	'.text.CAN.CAN_ubReadFIFO',code,cluster('CAN_ubReadFIFO')
	.sect	'.text.CAN.CAN_ubReadFIFO'
	.align	2
	
	.global	CAN_ubReadFIFO

; ..\CAN.c	  2431  
; ..\CAN.c	  2432  
; ..\CAN.c	  2433  //****************************************************************************
; ..\CAN.c	  2434  // @Function      ubyte CAN_ubReadFIFO(ubyte ubObjNr, CAN_SWObj *pstObj) 
; ..\CAN.c	  2435  //
; ..\CAN.c	  2436  //----------------------------------------------------------------------------
; ..\CAN.c	  2437  // @Description   This function reads the next RECEIVE message object which 
; ..\CAN.c	  2438  //                is part of a FIFO. It checks whether the selected RECEIVE 
; ..\CAN.c	  2439  //                OBJECT has received a new message. If so the forwarded SW 
; ..\CAN.c	  2440  //                message object is filled with the content of the HW message 
; ..\CAN.c	  2441  //                object and the functions returns the value "1". The 
; ..\CAN.c	  2442  //                structure of the SW message object is defined in the header 
; ..\CAN.c	  2443  //                file CAN.h (see CAN_SWObj).
; ..\CAN.c	  2444  //                Note: 
; ..\CAN.c	  2445  //                This function can only used for RECEIVE objects which are 
; ..\CAN.c	  2446  //                configured for FIFO base functionality. 
; ..\CAN.c	  2447  //                Be sure that no interrupt is enabled for the FIFO objects. 
; ..\CAN.c	  2448  //
; ..\CAN.c	  2449  //----------------------------------------------------------------------------
; ..\CAN.c	  2450  // @Returnvalue   0: the message object has not received a new message; 1: 
; ..\CAN.c	  2451  //                the message object has received a new message; 2: this is 
; ..\CAN.c	  2452  //                not a FIFO base object; 3: a previous message was lost; 4: 
; ..\CAN.c	  2453  //                the received message is corrupted
; ..\CAN.c	  2454  //
; ..\CAN.c	  2455  //----------------------------------------------------------------------------
; ..\CAN.c	  2456  // @Parameters    ubObjNr: 
; ..\CAN.c	  2457  //                Number of the FIFO base object
; ..\CAN.c	  2458  // @Parameters    *pstObj: 
; ..\CAN.c	  2459  //                Pointer on a message object to be filled by this function
; ..\CAN.c	  2460  //
; ..\CAN.c	  2461  //----------------------------------------------------------------------------
; ..\CAN.c	  2462  // @Date          2013-11-20
; ..\CAN.c	  2463  //
; ..\CAN.c	  2464  //****************************************************************************
; ..\CAN.c	  2465  
; ..\CAN.c	  2466  // USER CODE BEGIN (ReadFIFO,1)
; ..\CAN.c	  2467  
; ..\CAN.c	  2468  // USER CODE END
; ..\CAN.c	  2469  
; ..\CAN.c	  2470  ubyte CAN_ubReadFIFO(ubyte ubObjNr, CAN_SWObj *pstObj)
; Function CAN_ubReadFIFO
.L161:
CAN_ubReadFIFO:	.type	func

; ..\CAN.c	  2471  {
; ..\CAN.c	  2472    ubyte i,j;
; ..\CAN.c	  2473    ubyte ubReturn;
; ..\CAN.c	  2474  
; ..\CAN.c	  2475    ubReturn = 2;
; ..\CAN.c	  2476  
; ..\CAN.c	  2477    if((CAN_HWOBJ[ubObjNr].uwMOFCR & 0x0000000f) == 0x00000001)  // if receive FIFO base object 
	mov	d2,#2
	ld.w	d15,__const_f0005000
.L400:
	mov.a	a2,d15
.L960:
	sha	d15,d4,#5
.L961:
	addsc.a	a15,a2,d15,#0
.L962:
	ld.w	d15,[a15]
.L963:
	and	d15,#15
.L964:
	jne	d15,#1,.L66				; predicted taken
.L965:

; ..\CAN.c	  2478    {
; ..\CAN.c	  2479      j = aubFIFOReadPtr[ubObjNr];
	movh.a	a5,#@his(aubFIFOReadPtr)
	lea	a5,[a5]@los(aubFIFOReadPtr)
.L966:
	addsc.a	a5,a5,d4,#0
	ld.bu	d0,[a5]
.L401:

; ..\CAN.c	  2480  
; ..\CAN.c	  2481      ubReturn = 0;
; ..\CAN.c	  2482      if(CAN_HWOBJ[j].uwMOCTR & 0x00000008)                 // if NEWDAT 
	sha	d15,d0,#5
.L967:
	addsc.a	a2,a2,d15,#0
.L968:
	lea	a6,[a2]28
.L969:
	mov	d2,#0
	ld.w	d15,[a6]
.L970:
	jz.t	d15:3,.L67				; predicted not taken
.L971:

; ..\CAN.c	  2483      {
; ..\CAN.c	  2484        CAN_HWOBJ[j].uwMOCTR = 0x00000008;                  // clear NEWDAT
	mov	d15,#8
	st.w	[a6],d15
.L972:

; ..\CAN.c	  2485  
; ..\CAN.c	  2486        if(j == (CAN_HWOBJ[j].uwMOCTR & 0xff000000) >> 24)  // last MO in a list
	ld.w	d15,[a6]
.L973:
	sh	d15,d15,#-24
.L974:
	jne	d15,d0,.L68				; predicted taken
.L975:

; ..\CAN.c	  2487        {
; ..\CAN.c	  2488          // ReadPtr = BOT of the base object
; ..\CAN.c	  2489          aubFIFOReadPtr[ubObjNr] = (CAN_HWOBJ[ubObjNr].uwMOFGPR & 0x000000ff);
	ld.w	d15,[a15]4
.L976:
	j	.L69
.L68:

; ..\CAN.c	  2490        }
; ..\CAN.c	  2491        else
; ..\CAN.c	  2492        {
; ..\CAN.c	  2493          // ReadPtr = PNEXT of the current selected slave
; ..\CAN.c	  2494          aubFIFOReadPtr[ubObjNr] = (CAN_HWOBJ[j].uwMOCTR & 0xff000000) >> 24;
	ld.w	d15,[a6]
.L977:
	sh	d15,d15,#-24
.L69:
	st.b	[a5],d15
.L978:

; ..\CAN.c	  2495        }
; ..\CAN.c	  2496  
; ..\CAN.c	  2497        // check if the previous message was lost 
; ..\CAN.c	  2498        if(CAN_HWOBJ[j].uwMOCTR & 0x00000010)               // if set MSGLST 
	ld.w	d15,[a6]
.L979:
	jz.t	d15:4,.L70				; predicted taken
.L980:

; ..\CAN.c	  2499        {
; ..\CAN.c	  2500          CAN_HWOBJ[j].uwMOCTR = 0x00000010;                // reset MSGLST 
	mov	d15,#16
	st.w	[a6],d15
.L981:

; ..\CAN.c	  2501          return(3);
	mov	d2,#3
.L67:
.L66:

; ..\CAN.c	  2502        }
; ..\CAN.c	  2503  
; ..\CAN.c	  2504        pstObj->usMOCfg  = (CAN_HWOBJ[j].uwMOFCR & 0x0f000000) >> 24;
; ..\CAN.c	  2505        for(i = 0; i < pstObj->usMOCfg; i++)
; ..\CAN.c	  2506        {
; ..\CAN.c	  2507          pstObj->ubData[i] = CAN_HWOBJ[j].ubData[i];
; ..\CAN.c	  2508        }
; ..\CAN.c	  2509  
; ..\CAN.c	  2510        pstObj->usMOCfg  = (pstObj->usMOCfg << 4);
; ..\CAN.c	  2511        if(CAN_HWOBJ[j].uwMOCTR & 0x00000800)               // transmit object
; ..\CAN.c	  2512        {
; ..\CAN.c	  2513          pstObj->usMOCfg  = pstObj->usMOCfg | 0x08;
; ..\CAN.c	  2514        }
; ..\CAN.c	  2515  
; ..\CAN.c	  2516        if(CAN_HWOBJ[j].uwMOAR & 0x20000000)                // extended identifier
; ..\CAN.c	  2517        {
; ..\CAN.c	  2518          pstObj->uwID     = CAN_HWOBJ[j].uwMOAR & 0x1fffffff;
; ..\CAN.c	  2519          pstObj->usMOCfg  = pstObj->usMOCfg | 0x04;
; ..\CAN.c	  2520        }
; ..\CAN.c	  2521        else                                                // standard identifier 
; ..\CAN.c	  2522        {
; ..\CAN.c	  2523          pstObj->uwID   = (CAN_HWOBJ[j].uwMOAR & 0x1fffffff) >> 18;
; ..\CAN.c	  2524        }
; ..\CAN.c	  2525  
; ..\CAN.c	  2526        pstObj->usCounter = (CAN_HWOBJ[j].uwMOIPR & 0xffff0000) >> 16;
; ..\CAN.c	  2527  
; ..\CAN.c	  2528        // check if the message was corrupted 
; ..\CAN.c	  2529        if(CAN_HWOBJ[j].uwMOCTR & 0x00000008)               // if NEWDAT 
; ..\CAN.c	  2530        {
; ..\CAN.c	  2531          CAN_HWOBJ[j].uwMOCTR = 0x00000008;                // clear NEWDAT
; ..\CAN.c	  2532          return(4);
; ..\CAN.c	  2533        }
; ..\CAN.c	  2534        ubReturn = 1;
; ..\CAN.c	  2535      }
; ..\CAN.c	  2536    }
; ..\CAN.c	  2537    return(ubReturn);
; ..\CAN.c	  2538  
; ..\CAN.c	  2539  } //  End of function CAN_ubReadFIFO
	ret
.L70:
	ld.w	d15,[a2]
.L982:
	sh	d15,d15,#-24
.L983:
	and	d15,#15
	st.h	[a4],d15
.L984:
	mov	d15,#0
.L403:
	j	.L72
.L73:
	addsc.a	a15,a4,d15,#0
.L985:
	addsc.a	a5,a2,d15,#0
.L986:
	add	d15,#1
	ld.bu	d0,[a5]16
.L404:
	extr.u	d15,d15,#0,#8
	st.b	[a15]10,d0
.L72:
	ld.hu	d0,[a4]0
.L987:
	jlt.u	d15,d0,.L73				; predicted taken
.L988:
	sha	d0,#4
	st.h	[a4],d0
.L989:
	ld.w	d15,[a6]
.L405:
	jz.t	d15:11,.L74				; predicted taken
.L990:
	ld.hu	d15,[a4]0
.L991:
	or	d15,#8
	st.h	[a4],d15
.L74:
	lea	a15,[a2]24
	ld.w	d15,[a15]
.L992:
	jz.t	d15:29,.L75				; prediction unknown
.L993:
	ld.w	d15,[a15]
.L994:
	insert	d15,d15,#0,#29,#3
	st.w	[a4]2,d15
.L995:
	ld.hu	d15,[a4]0
.L996:
	or	d15,#4
	st.h	[a4],d15
.L997:
	j	.L76
.L75:
	ld.w	d15,[a15]
.L998:
	extr.u	d15,d15,#18,#11
	st.w	[a4]2,d15
.L76:
	ld.w	d15,[a2]8
.L999:
	sh	d15,d15,#-16
	st.h	[a4]18,d15
.L1000:
	ld.w	d15,[a6]
.L1001:
	jz.t	d15:3,.L77				; predicted taken
.L1002:
	mov	d15,#8
	st.w	[a6],d15
.L1003:
	mov	d2,#4
.L402:
	ret
.L77:
	mov	d2,#1
.L1004:
	ret
.L346:
	
__CAN_ubReadFIFO_function_end:
	.size	CAN_ubReadFIFO,__CAN_ubReadFIFO_function_end-CAN_ubReadFIFO
.L250:
	; End of function
	
	.sdecl	'.text.intvec.003',code
	.sect	'.text.intvec.003'

; ..\CAN.c	  2540  
; ..\CAN.c	  2541  
; ..\CAN.c	  2542  //****************************************************************************
; ..\CAN.c	  2543  // @Function      void CAN_viSRN0(void) 
; ..\CAN.c	  2544  //
; ..\CAN.c	  2545  //----------------------------------------------------------------------------
; ..\CAN.c	  2546  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  2547  //                Request Node 0 of the MultiCAN module. 
; ..\CAN.c	  2548  //                Please note that you have to add application specific code 
; ..\CAN.c	  2549  //                to this function.
; ..\CAN.c	  2550  //
; ..\CAN.c	  2551  //----------------------------------------------------------------------------
; ..\CAN.c	  2552  // @Returnvalue   None
; ..\CAN.c	  2553  //
; ..\CAN.c	  2554  //----------------------------------------------------------------------------
; ..\CAN.c	  2555  // @Parameters    None
; ..\CAN.c	  2556  //
; ..\CAN.c	  2557  //----------------------------------------------------------------------------
; ..\CAN.c	  2558  // @Date          2013-11-20
; ..\CAN.c	  2559  //
; ..\CAN.c	  2560  //****************************************************************************
; ..\CAN.c	  2561  
; ..\CAN.c	  2562  // USER CODE BEGIN (SRN0,1)
; ..\CAN.c	  2563  
; ..\CAN.c	  2564  // USER CODE END
; ..\CAN.c	  2565  
; ..\CAN.c	  2566  void INTERRUPT (CAN_SRN0INT) CAN_viSRN0(void)
	movh.a	a14,#@his(CAN_viSRN0)
	lea	a14,[a14]@los(CAN_viSRN0)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN0',code,cluster('CAN_viSRN0')
	.sect	'.text.CAN.CAN_viSRN0'
	.align	2
	
	.global	CAN_viSRN0
; Function CAN_viSRN0
.L163:
CAN_viSRN0:	.type	func

; ..\CAN.c	  2567  {
; ..\CAN.c	  2568  
; ..\CAN.c	  2569  
; ..\CAN.c	  2570    // USER CODE BEGIN (SRN0,2)
; ..\CAN.c	  2571  
; ..\CAN.c	  2572    // USER CODE END
; ..\CAN.c	  2573  
; ..\CAN.c	  2574  
; ..\CAN.c	  2575    // USER CODE BEGIN (SRN0,15)
; ..\CAN.c	  2576  
; ..\CAN.c	  2577    // USER CODE END
; ..\CAN.c	  2578  
; ..\CAN.c	  2579  } //  End of function CAN_viSRN0
	rfe
.L352:
	
__CAN_viSRN0_function_end:
	.size	CAN_viSRN0,__CAN_viSRN0_function_end-CAN_viSRN0
.L255:
	; End of function
	
	.sdecl	'.text.intvec.001',code
	.sect	'.text.intvec.001'

; ..\CAN.c	  2580  
; ..\CAN.c	  2581  
; ..\CAN.c	  2582  //****************************************************************************
; ..\CAN.c	  2583  // @Function      void CAN_viSRN1(void) 
; ..\CAN.c	  2584  //
; ..\CAN.c	  2585  //----------------------------------------------------------------------------
; ..\CAN.c	  2586  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  2587  //                Request Node 1 of the MultiCAN module. 
; ..\CAN.c	  2588  //                Please note that you have to add application specific code 
; ..\CAN.c	  2589  //                to this function.
; ..\CAN.c	  2590  //
; ..\CAN.c	  2591  //----------------------------------------------------------------------------
; ..\CAN.c	  2592  // @Returnvalue   None
; ..\CAN.c	  2593  //
; ..\CAN.c	  2594  //----------------------------------------------------------------------------
; ..\CAN.c	  2595  // @Parameters    None
; ..\CAN.c	  2596  //
; ..\CAN.c	  2597  //----------------------------------------------------------------------------
; ..\CAN.c	  2598  // @Date          2013-11-20
; ..\CAN.c	  2599  //
; ..\CAN.c	  2600  //****************************************************************************
; ..\CAN.c	  2601  
; ..\CAN.c	  2602  // USER CODE BEGIN (SRN1,1)
; ..\CAN.c	  2603  
; ..\CAN.c	  2604  // USER CODE END
; ..\CAN.c	  2605  
; ..\CAN.c	  2606  void INTERRUPT (CAN_SRN1INT) CAN_viSRN1(void)
	movh.a	a14,#@his(CAN_viSRN1)
	lea	a14,[a14]@los(CAN_viSRN1)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN1',code,cluster('CAN_viSRN1')
	.sect	'.text.CAN.CAN_viSRN1'
	.align	2
	
	.global	CAN_viSRN1
; Function CAN_viSRN1
.L165:
CAN_viSRN1:	.type	func

; ..\CAN.c	  2607  {
; ..\CAN.c	  2608  
; ..\CAN.c	  2609  
; ..\CAN.c	  2610    // USER CODE BEGIN (SRN1,2)
; ..\CAN.c	  2611  
; ..\CAN.c	  2612    // USER CODE END
; ..\CAN.c	  2613  
; ..\CAN.c	  2614  
; ..\CAN.c	  2615    // USER CODE BEGIN (SRN1,15)
; ..\CAN.c	  2616  
; ..\CAN.c	  2617    // USER CODE END
; ..\CAN.c	  2618  
; ..\CAN.c	  2619  } //  End of function CAN_viSRN1
	rfe
.L353:
	
__CAN_viSRN1_function_end:
	.size	CAN_viSRN1,__CAN_viSRN1_function_end-CAN_viSRN1
.L260:
	; End of function
	
	.sdecl	'.text.intvec.004',code
	.sect	'.text.intvec.004'

; ..\CAN.c	  2620  
; ..\CAN.c	  2621  
; ..\CAN.c	  2622  //****************************************************************************
; ..\CAN.c	  2623  // @Function      void CAN_viSRN2(void) 
; ..\CAN.c	  2624  //
; ..\CAN.c	  2625  //----------------------------------------------------------------------------
; ..\CAN.c	  2626  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  2627  //                Request Node 2 of the MultiCAN module. 
; ..\CAN.c	  2628  //                Please note that you have to add application specific code 
; ..\CAN.c	  2629  //                to this function.
; ..\CAN.c	  2630  //
; ..\CAN.c	  2631  //----------------------------------------------------------------------------
; ..\CAN.c	  2632  // @Returnvalue   None
; ..\CAN.c	  2633  //
; ..\CAN.c	  2634  //----------------------------------------------------------------------------
; ..\CAN.c	  2635  // @Parameters    None
; ..\CAN.c	  2636  //
; ..\CAN.c	  2637  //----------------------------------------------------------------------------
; ..\CAN.c	  2638  // @Date          2013-11-20
; ..\CAN.c	  2639  //
; ..\CAN.c	  2640  //****************************************************************************
; ..\CAN.c	  2641  
; ..\CAN.c	  2642  // USER CODE BEGIN (SRN2,1)
; ..\CAN.c	  2643  
; ..\CAN.c	  2644  // USER CODE END
; ..\CAN.c	  2645  
; ..\CAN.c	  2646  void INTERRUPT (CAN_SRN2INT) CAN_viSRN2(void)
	movh.a	a14,#@his(CAN_viSRN2)
	lea	a14,[a14]@los(CAN_viSRN2)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN2',code,cluster('CAN_viSRN2')
	.sect	'.text.CAN.CAN_viSRN2'
	.align	2
	
	.global	CAN_viSRN2
; Function CAN_viSRN2
.L167:
CAN_viSRN2:	.type	func

; ..\CAN.c	  2647  {
; ..\CAN.c	  2648  
; ..\CAN.c	  2649  
; ..\CAN.c	  2650    // USER CODE BEGIN (SRN2,2)
; ..\CAN.c	  2651  
; ..\CAN.c	  2652    // USER CODE END
; ..\CAN.c	  2653  
; ..\CAN.c	  2654        CAN_MSIMASK.U  = 0x00000004; // set message index mask register
	mov	d15,#4
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00041c0),d15
.L1017:

; ..\CAN.c	  2655    while (CAN_MSID0.U != 0x00000020)
	ld.w	d15,__const_f0004180
	mov.a	a12,d15
.L1018:
	j	.L80
.L81:

; ..\CAN.c	  2656    {
; ..\CAN.c	  2657      switch(CAN_MSID0.U){
	ld.w	d15,[a12]
.L1019:
	jne	d15,#2,.L82				; predicted taken
.L1020:

; ..\CAN.c	  2658  
; ..\CAN.c	  2659      case 2: // message object 2 interrupt 
; ..\CAN.c	  2660      
; ..\CAN.c	  2661        if(CAN_MOSTAT2.B.RXPND)      // if message object 2 receive interrupt
	ld.w	d15,__const_f000505c
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L1021:
	jz.t	d15:0,.L83				; predicted not taken
.L1022:

; ..\CAN.c	  2662        {
; ..\CAN.c	  2663  
; ..\CAN.c	  2664          if(CAN_MOSTAT2.B.NEWDAT)     // if NEWDAT is set
	ld.bu	d15,[a15]
.L1023:
	jz.t	d15:3,.L84				; predicted not taken
.L1024:

; ..\CAN.c	  2665          {
; ..\CAN.c	  2666  
; ..\CAN.c	  2667            if (CAN_MOSTAT2.B.MSGLST)  // if MSGLST is set
	ld.bu	d15,[a15]
.L1025:
	jz.t	d15:4,.L85				; predicted taken
.L1026:

; ..\CAN.c	  2668            {
; ..\CAN.c	  2669              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  2670              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  2671              // ie. the previously stored message is lost.
; ..\CAN.c	  2672  
; ..\CAN.c	  2673              CAN_MOCTR2.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
	mov	d15,#16
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000505c),d15
.L85:

; ..\CAN.c	  2674  
; ..\CAN.c	  2675              // USER CODE BEGIN (SRN2_OBJ2,1)
; ..\CAN.c	  2676  
; ..\CAN.c	  2677              // USER CODE END
; ..\CAN.c	  2678            }
; ..\CAN.c	  2679            else
; ..\CAN.c	  2680            {
; ..\CAN.c	  2681              // The CAN controller has stored a new message
; ..\CAN.c	  2682              // into this object.
; ..\CAN.c	  2683  
; ..\CAN.c	  2684              // USER CODE BEGIN (SRN2_OBJ2,2)
; ..\CAN.c	  2685  
; ..\CAN.c	  2686              // USER CODE END
; ..\CAN.c	  2687            }
; ..\CAN.c	  2688  
; ..\CAN.c	  2689            CAN_MOCTR2.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
	mov	d15,#8
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000505c),d15
.L84:

; ..\CAN.c	  2690          }
; ..\CAN.c	  2691  
; ..\CAN.c	  2692         CAN_MOCTR2.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
	mov	d15,#1
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000505c),d15
.L83:

; ..\CAN.c	  2693        }  // End of RXPND2
; ..\CAN.c	  2694  
; ..\CAN.c	  2695  
; ..\CAN.c	  2696         CAN_MSPND0.U =  ~0x00000004; // reset PND bit
	mov	d15,#-5
	movh.a	a15,#61440
	st.w	[a15]@los(0xf0004140),d15

; ..\CAN.c	  2697  
; ..\CAN.c	  2698        // USER CODE BEGIN (SRN2_OBJ2,7)
; ..\CAN.c	  2699  
; ..\CAN.c	  2700        // USER CODE END
; ..\CAN.c	  2701  
; ..\CAN.c	  2702        break;
; ..\CAN.c	  2703  
; ..\CAN.c	  2704      default:
.L82:
.L80:
	mov	d15,#32
	ld.w	d8,[a12]
.L1027:
	jne	d15,d8,.L81				; predicted taken
.L1028:

; ..\CAN.c	  2705  
; ..\CAN.c	  2706        // USER CODE BEGIN (SRN2,3)
; ..\CAN.c	  2707  
; ..\CAN.c	  2708        // USER CODE END
; ..\CAN.c	  2709  
; ..\CAN.c	  2710        break;
; ..\CAN.c	  2711  
; ..\CAN.c	  2712      }  // end switch 
; ..\CAN.c	  2713  
; ..\CAN.c	  2714      // USER CODE BEGIN (SRN2,7)
; ..\CAN.c	  2715  
; ..\CAN.c	  2716      // USER CODE END
; ..\CAN.c	  2717  
; ..\CAN.c	  2718    }  // end of while CAN_MSID
; ..\CAN.c	  2719  
; ..\CAN.c	  2720  
; ..\CAN.c	  2721    // USER CODE BEGIN (SRN2,15)
; ..\CAN.c	  2722  
; ..\CAN.c	  2723    // USER CODE END
; ..\CAN.c	  2724  
; ..\CAN.c	  2725  } //  End of function CAN_viSRN2
	rfe
.L354:
	
__CAN_viSRN2_function_end:
	.size	CAN_viSRN2,__CAN_viSRN2_function_end-CAN_viSRN2
.L265:
	; End of function
	
	.sdecl	'.text.intvec.005',code
	.sect	'.text.intvec.005'

; ..\CAN.c	  2726  
; ..\CAN.c	  2727  
; ..\CAN.c	  2728  //****************************************************************************
; ..\CAN.c	  2729  // @Function      void CAN_viSRN3(void) 
; ..\CAN.c	  2730  //
; ..\CAN.c	  2731  //----------------------------------------------------------------------------
; ..\CAN.c	  2732  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  2733  //                Request Node 3 of the MultiCAN module. 
; ..\CAN.c	  2734  //                Please note that you have to add application specific code 
; ..\CAN.c	  2735  //                to this function.
; ..\CAN.c	  2736  //
; ..\CAN.c	  2737  //----------------------------------------------------------------------------
; ..\CAN.c	  2738  // @Returnvalue   None
; ..\CAN.c	  2739  //
; ..\CAN.c	  2740  //----------------------------------------------------------------------------
; ..\CAN.c	  2741  // @Parameters    None
; ..\CAN.c	  2742  //
; ..\CAN.c	  2743  //----------------------------------------------------------------------------
; ..\CAN.c	  2744  // @Date          2013-11-20
; ..\CAN.c	  2745  //
; ..\CAN.c	  2746  //****************************************************************************
; ..\CAN.c	  2747  
; ..\CAN.c	  2748  // USER CODE BEGIN (SRN3,1)
; ..\CAN.c	  2749  
; ..\CAN.c	  2750  // USER CODE END
; ..\CAN.c	  2751  
; ..\CAN.c	  2752  void INTERRUPT (CAN_SRN3INT) CAN_viSRN3(void)
	movh.a	a14,#@his(CAN_viSRN3)
	lea	a14,[a14]@los(CAN_viSRN3)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN3',code,cluster('CAN_viSRN3')
	.sect	'.text.CAN.CAN_viSRN3'
	.align	2
	
	.global	CAN_viSRN3
; Function CAN_viSRN3
.L169:
CAN_viSRN3:	.type	func
	sub.a	a10,#32
.L406:
	svlcx
.L1033:

; ..\CAN.c	  2753  {
; ..\CAN.c	  2754  
; ..\CAN.c	  2755  
; ..\CAN.c	  2756    // USER CODE BEGIN (SRN3,2)
; ..\CAN.c	  2757  	CAN_SWObj obj;
; ..\CAN.c	  2758  	uint32_t swc_id;
; ..\CAN.c	  2759  	uint32_t is_active;
; ..\CAN.c	  2760  
; ..\CAN.c	  2761    // USER CODE END
; ..\CAN.c	  2762  
; ..\CAN.c	  2763        CAN_MSIMASK.U  = 0x20000008; // set message index mask register
	ld.w	d15,__const_20000008
.L1034:
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00041c0),d15
.L1035:

; ..\CAN.c	  2764    while (CAN_MSID0.U != 0x00000020)
	ld.w	d15,__const_f0004180
	mov.a	a12,d15
.L1036:
	j	.L86
.L87:

; ..\CAN.c	  2765    {
; ..\CAN.c	  2766      switch(CAN_MSID0.U){
	ld.w	d15,[a12]
.L1037:

; ..\CAN.c	  2767  
; ..\CAN.c	  2768      case 3: // message object 3 interrupt 
	jeq	d15,#3,.L88				; prediction unknown
.L1038:

; ..\CAN.c	  2769      
; ..\CAN.c	  2770        if(CAN_MOSTAT3.B.RXPND)      // if message object 3 receive interrupt
; ..\CAN.c	  2771        {
; ..\CAN.c	  2772  
; ..\CAN.c	  2773          if(CAN_MOSTAT3.B.NEWDAT)     // if NEWDAT is set
; ..\CAN.c	  2774          {
; ..\CAN.c	  2775  
; ..\CAN.c	  2776            if (CAN_MOSTAT3.B.MSGLST)  // if MSGLST is set
; ..\CAN.c	  2777            {
; ..\CAN.c	  2778              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  2779              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  2780              // ie. the previously stored message is lost.
; ..\CAN.c	  2781  
; ..\CAN.c	  2782              CAN_MOCTR3.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
; ..\CAN.c	  2783  
; ..\CAN.c	  2784              // USER CODE BEGIN (SRN3_OBJ3,1)
; ..\CAN.c	  2785  
; ..\CAN.c	  2786              // USER CODE END
; ..\CAN.c	  2787            }
; ..\CAN.c	  2788            else
; ..\CAN.c	  2789            {
; ..\CAN.c	  2790              // The CAN controller has stored a new message
; ..\CAN.c	  2791              // into this object.
; ..\CAN.c	  2792  
; ..\CAN.c	  2793              // USER CODE BEGIN (SRN3_OBJ3,2)
; ..\CAN.c	  2794  
; ..\CAN.c	  2795              // USER CODE END
; ..\CAN.c	  2796            }
; ..\CAN.c	  2797  
; ..\CAN.c	  2798            CAN_MOCTR3.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
; ..\CAN.c	  2799          }
; ..\CAN.c	  2800  
; ..\CAN.c	  2801         CAN_MOCTR3.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
; ..\CAN.c	  2802        }  // End of RXPND3
; ..\CAN.c	  2803  
; ..\CAN.c	  2804  
; ..\CAN.c	  2805         CAN_MSPND0.U =  ~0x00000008; // reset PND bit
; ..\CAN.c	  2806  
; ..\CAN.c	  2807        // USER CODE BEGIN (SRN3_OBJ3,7)
; ..\CAN.c	  2808  
; ..\CAN.c	  2809        // USER CODE END
; ..\CAN.c	  2810  
; ..\CAN.c	  2811        break;
; ..\CAN.c	  2812  
; ..\CAN.c	  2813  
; ..\CAN.c	  2814      case 29: // message object 29 interrupt 
	mov	d8,#29
	jeq	d15,d8,.L89				; prediction unknown
	j	.L90
.L88:
	ld.w	d15,__const_f000507c
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L1039:
	jz.t	d15:0,.L91				; predicted not taken
.L1040:
	ld.bu	d15,[a15]
.L1041:
	jz.t	d15:3,.L92				; predicted not taken
.L1042:
	ld.bu	d15,[a15]
.L1043:
	jz.t	d15:4,.L93				; predicted taken
.L1044:
	mov	d15,#16
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000507c),d15
.L93:
	mov	d15,#8
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000507c),d15
.L92:
	mov	d15,#1
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000507c),d15
.L91:
	mov	d15,#-9
.L1045:
	j	.L94
.L89:

; ..\CAN.c	  2815      
; ..\CAN.c	  2816        if(CAN_MOSTAT29.B.RXPND)      // if message object 29 receive interrupt
	ld.w	d15,__const_f00053bc
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L1046:
	jz.t	d15:0,.L95				; predicted not taken
.L1047:

; ..\CAN.c	  2817        {
; ..\CAN.c	  2818  
; ..\CAN.c	  2819          if(CAN_MOSTAT29.B.NEWDAT)     // if NEWDAT is set
	ld.bu	d15,[a15]
.L1048:
	jz.t	d15:3,.L96				; predicted not taken
.L1049:

; ..\CAN.c	  2820          {
; ..\CAN.c	  2821  
; ..\CAN.c	  2822            if (CAN_MOSTAT29.B.MSGLST)  // if MSGLST is set
	ld.bu	d15,[a15]
.L1050:
	jz.t	d15:4,.L97				; predicted not taken
.L1051:

; ..\CAN.c	  2823            {
; ..\CAN.c	  2824              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  2825              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  2826              // ie. the previously stored message is lost.
; ..\CAN.c	  2827  
; ..\CAN.c	  2828              CAN_MOCTR29.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
	mov	d15,#16
	st.w	[a15],d15
.L1052:
	j	.L98
.L97:

; ..\CAN.c	  2829  
; ..\CAN.c	  2830              // USER CODE BEGIN (SRN3_OBJ29,1)
; ..\CAN.c	  2831  
; ..\CAN.c	  2832              // USER CODE END
; ..\CAN.c	  2833            }
; ..\CAN.c	  2834            else
; ..\CAN.c	  2835            {
; ..\CAN.c	  2836              // The CAN controller has stored a new message
; ..\CAN.c	  2837              // into this object.
; ..\CAN.c	  2838  
; ..\CAN.c	  2839              // USER CODE BEGIN (SRN3_OBJ29,2)
; ..\CAN.c	  2840          	  CAN_vGetMsgObj(29, &obj);
	mov	d4,#29
	mov.aa	a4,a10
	call	CAN_vGetMsgObj
.L1053:

; ..\CAN.c	  2841          	  CAN_vReleaseObj(29);
	mov	d4,#29
	call	CAN_vReleaseObj
.L1054:

; ..\CAN.c	  2842          	  memcpy(&swc_id, &obj.ubData[0], 4);
	mov	d4,#4
	lea	a4,[a10]20
.L1055:
	lea	a5,[a10]10
.L1056:
	call	memcpy
.L1057:

; ..\CAN.c	  2843          	  memcpy(&is_active, &obj.ubData[4], 4);
	mov	d4,#4
	lea	a4,[a10]24
.L1058:
	lea	a5,[a10]14
.L1059:
	call	memcpy
.L1060:

; ..\CAN.c	  2844  
; ..\CAN.c	  2845          	  if (get_jiffies() > 1000) {
	call	get_jiffies
.L1061:
	mov	d15,#1000
.L1062:
	jge.u	d15,d2,.L99				; unsupported prediction taken forward branch
.L1063:

; ..\CAN.c	  2846          		  callback(swc_id, is_active);
	ld.w	d4,[a10]20
.L1064:
	ld.w	d5,[a10]24
	call	callback
.L99:
.L98:

; ..\CAN.c	  2847          	  }
; ..\CAN.c	  2848              // USER CODE END
; ..\CAN.c	  2849            }
; ..\CAN.c	  2850  
; ..\CAN.c	  2851            CAN_MOCTR29.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
	mov	d15,#8
	st.w	[a15],d15
.L96:
	ld.w	d15,__const_f00053bc
.L1065:
	mov.a	a15,d15
.L1066:

; ..\CAN.c	  2852          }
; ..\CAN.c	  2853  
; ..\CAN.c	  2854         CAN_MOCTR29.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
	mov	d15,#1
	st.w	[a15],d15
.L95:

; ..\CAN.c	  2855        }  // End of RXPND29
; ..\CAN.c	  2856  
; ..\CAN.c	  2857  
; ..\CAN.c	  2858         CAN_MSPND0.U =  ~0x20000000; // reset PND bit
	ld.w	d15,__const_dfffffff

; ..\CAN.c	  2859  
; ..\CAN.c	  2860        // USER CODE BEGIN (SRN3_OBJ29,7)
; ..\CAN.c	  2861  
; ..\CAN.c	  2862        // USER CODE END
; ..\CAN.c	  2863  
; ..\CAN.c	  2864        break;
; ..\CAN.c	  2865  
; ..\CAN.c	  2866      default:
; ..\CAN.c	  2867  
; ..\CAN.c	  2868        // USER CODE BEGIN (SRN3,3)
; ..\CAN.c	  2869  
; ..\CAN.c	  2870        // USER CODE END
; ..\CAN.c	  2871  
; ..\CAN.c	  2872        break;
; ..\CAN.c	  2873  
; ..\CAN.c	  2874      }  // end switch 
; ..\CAN.c	  2875  
; ..\CAN.c	  2876      // USER CODE BEGIN (SRN3,7)
; ..\CAN.c	  2877  
; ..\CAN.c	  2878      // USER CODE END
; ..\CAN.c	  2879  
; ..\CAN.c	  2880    }  // end of while CAN_MSID
.L94:
	movh.a	a15,#61440
	st.w	[a15]@los(0xf0004140),d15
.L90:
.L86:
	mov	d15,#32
	ld.w	d8,[a12]
.L1067:
	jne	d15,d8,.L87				; predicted taken
.L1068:

; ..\CAN.c	  2881  
; ..\CAN.c	  2882  
; ..\CAN.c	  2883    // USER CODE BEGIN (SRN3,15)
; ..\CAN.c	  2884  
; ..\CAN.c	  2885    // USER CODE END
; ..\CAN.c	  2886  
; ..\CAN.c	  2887  } //  End of function CAN_viSRN3
	rslcx
	rfe
.L355:
	
__CAN_viSRN3_function_end:
	.size	CAN_viSRN3,__CAN_viSRN3_function_end-CAN_viSRN3
.L270:
	; End of function
	
	.sdecl	'.text.intvec.006',code
	.sect	'.text.intvec.006'

; ..\CAN.c	  2888  
; ..\CAN.c	  2889  
; ..\CAN.c	  2890  //****************************************************************************
; ..\CAN.c	  2891  // @Function      void CAN_viSRN4(void) 
; ..\CAN.c	  2892  //
; ..\CAN.c	  2893  //----------------------------------------------------------------------------
; ..\CAN.c	  2894  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  2895  //                Request Node 4 of the MultiCAN module. 
; ..\CAN.c	  2896  //                Please note that you have to add application specific code 
; ..\CAN.c	  2897  //                to this function.
; ..\CAN.c	  2898  //
; ..\CAN.c	  2899  //----------------------------------------------------------------------------
; ..\CAN.c	  2900  // @Returnvalue   None
; ..\CAN.c	  2901  //
; ..\CAN.c	  2902  //----------------------------------------------------------------------------
; ..\CAN.c	  2903  // @Parameters    None
; ..\CAN.c	  2904  //
; ..\CAN.c	  2905  //----------------------------------------------------------------------------
; ..\CAN.c	  2906  // @Date          2013-11-20
; ..\CAN.c	  2907  //
; ..\CAN.c	  2908  //****************************************************************************
; ..\CAN.c	  2909  
; ..\CAN.c	  2910  // USER CODE BEGIN (SRN4,1)
; ..\CAN.c	  2911  
; ..\CAN.c	  2912  // USER CODE END
; ..\CAN.c	  2913  
; ..\CAN.c	  2914  void INTERRUPT (CAN_SRN4INT) CAN_viSRN4(void)
	movh.a	a14,#@his(CAN_viSRN4)
	lea	a14,[a14]@los(CAN_viSRN4)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN4',code,cluster('CAN_viSRN4')
	.sect	'.text.CAN.CAN_viSRN4'
	.align	2
	
	.global	CAN_viSRN4
; Function CAN_viSRN4
.L171:
CAN_viSRN4:	.type	func

; ..\CAN.c	  2915  {
; ..\CAN.c	  2916  
; ..\CAN.c	  2917  
; ..\CAN.c	  2918    // USER CODE BEGIN (SRN4,2)
; ..\CAN.c	  2919  
; ..\CAN.c	  2920    // USER CODE END
; ..\CAN.c	  2921  
; ..\CAN.c	  2922        CAN_MSIMASK.U  = 0x00000010; // set message index mask register
	mov	d9,#16
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00041c0),d9
.L1073:

; ..\CAN.c	  2923    while (CAN_MSID0.U != 0x00000020)
	ld.w	d8,__const_f0004180
	mov.a	a12,d8
.L1074:
	j	.L100
.L101:

; ..\CAN.c	  2924    {
; ..\CAN.c	  2925      switch(CAN_MSID0.U){
	ld.w	d8,[a12]
.L1075:
	jne	d8,#4,.L102				; predicted taken
.L1076:

; ..\CAN.c	  2926  
; ..\CAN.c	  2927      case 4: // message object 4 interrupt 
; ..\CAN.c	  2928      
; ..\CAN.c	  2929        if(CAN_MOSTAT4.B.RXPND)      // if message object 4 receive interrupt
	ld.w	d8,__const_f000509c
	mov.a	a15,d8
	ld.bu	d8,[a15]
.L1077:
	jz.t	d8:0,.L103				; predicted not taken
.L1078:

; ..\CAN.c	  2930        {
; ..\CAN.c	  2931  
; ..\CAN.c	  2932          if(CAN_MOSTAT4.B.NEWDAT)     // if NEWDAT is set
	ld.bu	d15,[a15]
.L1079:
	jz.t	d15:3,.L104				; predicted not taken
.L1080:

; ..\CAN.c	  2933          {
; ..\CAN.c	  2934  
; ..\CAN.c	  2935            if (CAN_MOSTAT4.B.MSGLST)  // if MSGLST is set
	ld.bu	d15,[a15]
.L1081:
	jz.t	d15:4,.L105				; predicted taken
.L1082:

; ..\CAN.c	  2936            {
; ..\CAN.c	  2937              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  2938              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  2939              // ie. the previously stored message is lost.
; ..\CAN.c	  2940  
; ..\CAN.c	  2941              CAN_MOCTR4.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000509c),d9
.L105:

; ..\CAN.c	  2942  
; ..\CAN.c	  2943              // USER CODE BEGIN (SRN4_OBJ4,1)
; ..\CAN.c	  2944  
; ..\CAN.c	  2945              // USER CODE END
; ..\CAN.c	  2946            }
; ..\CAN.c	  2947            else
; ..\CAN.c	  2948            {
; ..\CAN.c	  2949              // The CAN controller has stored a new message
; ..\CAN.c	  2950              // into this object.
; ..\CAN.c	  2951  
; ..\CAN.c	  2952              // USER CODE BEGIN (SRN4_OBJ4,2)
; ..\CAN.c	  2953  
; ..\CAN.c	  2954              // USER CODE END
; ..\CAN.c	  2955            }
; ..\CAN.c	  2956  
; ..\CAN.c	  2957            CAN_MOCTR4.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
	mov	d15,#8
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000509c),d15
.L104:

; ..\CAN.c	  2958          }
; ..\CAN.c	  2959  
; ..\CAN.c	  2960         CAN_MOCTR4.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
	mov	d15,#1
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000509c),d15
.L103:

; ..\CAN.c	  2961        }  // End of RXPND4
; ..\CAN.c	  2962  
; ..\CAN.c	  2963  
; ..\CAN.c	  2964         CAN_MSPND0.U =  ~0x00000010; // reset PND bit
	mov	d15,#-17
	movh.a	a15,#61440
	st.w	[a15]@los(0xf0004140),d15

; ..\CAN.c	  2965  
; ..\CAN.c	  2966        // USER CODE BEGIN (SRN4_OBJ4,7)
; ..\CAN.c	  2967  
; ..\CAN.c	  2968        // USER CODE END
; ..\CAN.c	  2969  
; ..\CAN.c	  2970        break;
; ..\CAN.c	  2971  
; ..\CAN.c	  2972      default:
.L102:
.L100:
	mov	d15,#32
	ld.w	d8,[a12]
.L1083:
	jne	d15,d8,.L101				; predicted taken
.L1084:

; ..\CAN.c	  2973  
; ..\CAN.c	  2974        // USER CODE BEGIN (SRN4,3)
; ..\CAN.c	  2975  
; ..\CAN.c	  2976        // USER CODE END
; ..\CAN.c	  2977  
; ..\CAN.c	  2978        break;
; ..\CAN.c	  2979  
; ..\CAN.c	  2980      }  // end switch 
; ..\CAN.c	  2981  
; ..\CAN.c	  2982      // USER CODE BEGIN (SRN4,7)
; ..\CAN.c	  2983  
; ..\CAN.c	  2984      // USER CODE END
; ..\CAN.c	  2985  
; ..\CAN.c	  2986    }  // end of while CAN_MSID
; ..\CAN.c	  2987  
; ..\CAN.c	  2988  
; ..\CAN.c	  2989    // USER CODE BEGIN (SRN4,15)
; ..\CAN.c	  2990  
; ..\CAN.c	  2991    // USER CODE END
; ..\CAN.c	  2992  
; ..\CAN.c	  2993  } //  End of function CAN_viSRN4
	rfe
.L361:
	
__CAN_viSRN4_function_end:
	.size	CAN_viSRN4,__CAN_viSRN4_function_end-CAN_viSRN4
.L275:
	; End of function
	
	.sdecl	'.text.intvec.007',code
	.sect	'.text.intvec.007'

; ..\CAN.c	  2994  
; ..\CAN.c	  2995  
; ..\CAN.c	  2996  //****************************************************************************
; ..\CAN.c	  2997  // @Function      void CAN_viSRN5(void) 
; ..\CAN.c	  2998  //
; ..\CAN.c	  2999  //----------------------------------------------------------------------------
; ..\CAN.c	  3000  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  3001  //                Request Node 5 of the MultiCAN module. 
; ..\CAN.c	  3002  //                Please note that you have to add application specific code 
; ..\CAN.c	  3003  //                to this function.
; ..\CAN.c	  3004  //
; ..\CAN.c	  3005  //----------------------------------------------------------------------------
; ..\CAN.c	  3006  // @Returnvalue   None
; ..\CAN.c	  3007  //
; ..\CAN.c	  3008  //----------------------------------------------------------------------------
; ..\CAN.c	  3009  // @Parameters    None
; ..\CAN.c	  3010  //
; ..\CAN.c	  3011  //----------------------------------------------------------------------------
; ..\CAN.c	  3012  // @Date          2013-11-20
; ..\CAN.c	  3013  //
; ..\CAN.c	  3014  //****************************************************************************
; ..\CAN.c	  3015  
; ..\CAN.c	  3016  // USER CODE BEGIN (SRN5,1)
; ..\CAN.c	  3017  
; ..\CAN.c	  3018  // USER CODE END
; ..\CAN.c	  3019  
; ..\CAN.c	  3020  void INTERRUPT (CAN_SRN5INT) CAN_viSRN5(void)
	movh.a	a14,#@his(CAN_viSRN5)
	lea	a14,[a14]@los(CAN_viSRN5)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN5',code,cluster('CAN_viSRN5')
	.sect	'.text.CAN.CAN_viSRN5'
	.align	2
	
	.global	CAN_viSRN5
; Function CAN_viSRN5
.L173:
CAN_viSRN5:	.type	func

; ..\CAN.c	  3021  {
; ..\CAN.c	  3022  
; ..\CAN.c	  3023  
; ..\CAN.c	  3024    // USER CODE BEGIN (SRN5,2)
; ..\CAN.c	  3025  
; ..\CAN.c	  3026    // USER CODE END
; ..\CAN.c	  3027  
; ..\CAN.c	  3028        CAN_MSIMASK.U  = 0x00000020; // set message index mask register
	mov	d15,#32
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00041c0),d15
.L1089:

; ..\CAN.c	  3029    while (CAN_MSID0.U != 0x00000020)
	ld.w	d15,__const_f0004180
	mov.a	a12,d15
.L1090:
	j	.L106
.L107:

; ..\CAN.c	  3030    {
; ..\CAN.c	  3031      switch(CAN_MSID0.U){
	ld.w	d15,[a12]
.L1091:
	jne	d15,#5,.L108				; predicted taken
.L1092:

; ..\CAN.c	  3032  
; ..\CAN.c	  3033      case 5: // message object 5 interrupt 
; ..\CAN.c	  3034      
; ..\CAN.c	  3035        if(CAN_MOSTAT5.B.RXPND)      // if message object 5 receive interrupt
	ld.w	d15,__const_f00050bc
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L1093:
	jz.t	d15:0,.L109				; predicted not taken
.L1094:

; ..\CAN.c	  3036        {
; ..\CAN.c	  3037  
; ..\CAN.c	  3038          if(CAN_MOSTAT5.B.NEWDAT)     // if NEWDAT is set
	ld.bu	d15,[a15]
.L1095:
	jz.t	d15:3,.L110				; predicted not taken
.L1096:

; ..\CAN.c	  3039          {
; ..\CAN.c	  3040  
; ..\CAN.c	  3041            if (CAN_MOSTAT5.B.MSGLST)  // if MSGLST is set
	ld.bu	d15,[a15]
.L1097:
	jz.t	d15:4,.L111				; predicted taken
.L1098:

; ..\CAN.c	  3042            {
; ..\CAN.c	  3043              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  3044              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  3045              // ie. the previously stored message is lost.
; ..\CAN.c	  3046  
; ..\CAN.c	  3047              CAN_MOCTR5.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
	mov	d15,#16
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050bc),d15
.L111:

; ..\CAN.c	  3048  
; ..\CAN.c	  3049              // USER CODE BEGIN (SRN5_OBJ5,1)
; ..\CAN.c	  3050  
; ..\CAN.c	  3051              // USER CODE END
; ..\CAN.c	  3052            }
; ..\CAN.c	  3053            else
; ..\CAN.c	  3054            {
; ..\CAN.c	  3055              // The CAN controller has stored a new message
; ..\CAN.c	  3056              // into this object.
; ..\CAN.c	  3057  
; ..\CAN.c	  3058              // USER CODE BEGIN (SRN5_OBJ5,2)
; ..\CAN.c	  3059  
; ..\CAN.c	  3060              // USER CODE END
; ..\CAN.c	  3061            }
; ..\CAN.c	  3062  
; ..\CAN.c	  3063            CAN_MOCTR5.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
	mov	d15,#8
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050bc),d15
.L110:

; ..\CAN.c	  3064          }
; ..\CAN.c	  3065  
; ..\CAN.c	  3066         CAN_MOCTR5.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
	mov	d15,#1
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050bc),d15
.L109:

; ..\CAN.c	  3067        }  // End of RXPND5
; ..\CAN.c	  3068  
; ..\CAN.c	  3069  
; ..\CAN.c	  3070         CAN_MSPND0.U =  ~0x00000020; // reset PND bit
	mov	d15,#-33
	movh.a	a15,#61440
	st.w	[a15]@los(0xf0004140),d15

; ..\CAN.c	  3071  
; ..\CAN.c	  3072        // USER CODE BEGIN (SRN5_OBJ5,7)
; ..\CAN.c	  3073  
; ..\CAN.c	  3074        // USER CODE END
; ..\CAN.c	  3075  
; ..\CAN.c	  3076        break;
; ..\CAN.c	  3077  
; ..\CAN.c	  3078      default:
.L108:
.L106:
	mov	d15,#32
	ld.w	d8,[a12]
.L1099:
	jne	d15,d8,.L107				; predicted taken
.L1100:

; ..\CAN.c	  3079  
; ..\CAN.c	  3080        // USER CODE BEGIN (SRN5,3)
; ..\CAN.c	  3081  
; ..\CAN.c	  3082        // USER CODE END
; ..\CAN.c	  3083  
; ..\CAN.c	  3084        break;
; ..\CAN.c	  3085  
; ..\CAN.c	  3086      }  // end switch 
; ..\CAN.c	  3087  
; ..\CAN.c	  3088      // USER CODE BEGIN (SRN5,7)
; ..\CAN.c	  3089  
; ..\CAN.c	  3090      // USER CODE END
; ..\CAN.c	  3091  
; ..\CAN.c	  3092    }  // end of while CAN_MSID
; ..\CAN.c	  3093  
; ..\CAN.c	  3094  
; ..\CAN.c	  3095    // USER CODE BEGIN (SRN5,15)
; ..\CAN.c	  3096  
; ..\CAN.c	  3097    // USER CODE END
; ..\CAN.c	  3098  
; ..\CAN.c	  3099  } //  End of function CAN_viSRN5
	rfe
.L362:
	
__CAN_viSRN5_function_end:
	.size	CAN_viSRN5,__CAN_viSRN5_function_end-CAN_viSRN5
.L280:
	; End of function
	
	.sdecl	'.text.intvec.008',code
	.sect	'.text.intvec.008'

; ..\CAN.c	  3100  
; ..\CAN.c	  3101  
; ..\CAN.c	  3102  //****************************************************************************
; ..\CAN.c	  3103  // @Function      void CAN_viSRN6(void) 
; ..\CAN.c	  3104  //
; ..\CAN.c	  3105  //----------------------------------------------------------------------------
; ..\CAN.c	  3106  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  3107  //                Request Node 6 of the MultiCAN module. 
; ..\CAN.c	  3108  //                Please note that you have to add application specific code 
; ..\CAN.c	  3109  //                to this function.
; ..\CAN.c	  3110  //
; ..\CAN.c	  3111  //----------------------------------------------------------------------------
; ..\CAN.c	  3112  // @Returnvalue   None
; ..\CAN.c	  3113  //
; ..\CAN.c	  3114  //----------------------------------------------------------------------------
; ..\CAN.c	  3115  // @Parameters    None
; ..\CAN.c	  3116  //
; ..\CAN.c	  3117  //----------------------------------------------------------------------------
; ..\CAN.c	  3118  // @Date          2013-11-20
; ..\CAN.c	  3119  //
; ..\CAN.c	  3120  //****************************************************************************
; ..\CAN.c	  3121  
; ..\CAN.c	  3122  // USER CODE BEGIN (SRN6,1)
; ..\CAN.c	  3123  
; ..\CAN.c	  3124  // USER CODE END
; ..\CAN.c	  3125  
; ..\CAN.c	  3126  void INTERRUPT (CAN_SRN6INT) CAN_viSRN6(void)
	movh.a	a14,#@his(CAN_viSRN6)
	lea	a14,[a14]@los(CAN_viSRN6)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN6',code,cluster('CAN_viSRN6')
	.sect	'.text.CAN.CAN_viSRN6'
	.align	2
	
	.global	CAN_viSRN6
; Function CAN_viSRN6
.L175:
CAN_viSRN6:	.type	func

; ..\CAN.c	  3127  {
; ..\CAN.c	  3128  
; ..\CAN.c	  3129  
; ..\CAN.c	  3130    // USER CODE BEGIN (SRN6,2)
; ..\CAN.c	  3131  
; ..\CAN.c	  3132    // USER CODE END
; ..\CAN.c	  3133  
; ..\CAN.c	  3134        CAN_MSIMASK.U  = 0x00000040; // set message index mask register
	mov	d15,#64
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00041c0),d15
.L1105:

; ..\CAN.c	  3135    while (CAN_MSID0.U != 0x00000020)
	ld.w	d15,__const_f0004180
	mov.a	a12,d15
.L1106:
	j	.L112
.L113:

; ..\CAN.c	  3136    {
; ..\CAN.c	  3137      switch(CAN_MSID0.U){
	ld.w	d15,[a12]
.L1107:
	jne	d15,#6,.L114				; predicted taken
.L1108:

; ..\CAN.c	  3138  
; ..\CAN.c	  3139      case 6: // message object 6 interrupt 
; ..\CAN.c	  3140      
; ..\CAN.c	  3141        if(CAN_MOSTAT6.B.RXPND)      // if message object 6 receive interrupt
	ld.w	d15,__const_f00050dc
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L1109:
	jz.t	d15:0,.L115				; predicted not taken
.L1110:

; ..\CAN.c	  3142        {
; ..\CAN.c	  3143  
; ..\CAN.c	  3144          if(CAN_MOSTAT6.B.NEWDAT)     // if NEWDAT is set
	ld.bu	d15,[a15]
.L1111:
	jz.t	d15:3,.L116				; predicted not taken
.L1112:

; ..\CAN.c	  3145          {
; ..\CAN.c	  3146  
; ..\CAN.c	  3147            if (CAN_MOSTAT6.B.MSGLST)  // if MSGLST is set
	ld.bu	d15,[a15]
.L1113:
	jz.t	d15:4,.L117				; predicted taken
.L1114:

; ..\CAN.c	  3148            {
; ..\CAN.c	  3149              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  3150              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  3151              // ie. the previously stored message is lost.
; ..\CAN.c	  3152  
; ..\CAN.c	  3153              CAN_MOCTR6.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
	mov	d15,#16
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050dc),d15
.L117:

; ..\CAN.c	  3154  
; ..\CAN.c	  3155              // USER CODE BEGIN (SRN6_OBJ6,1)
; ..\CAN.c	  3156  
; ..\CAN.c	  3157              // USER CODE END
; ..\CAN.c	  3158            }
; ..\CAN.c	  3159            else
; ..\CAN.c	  3160            {
; ..\CAN.c	  3161              // The CAN controller has stored a new message
; ..\CAN.c	  3162              // into this object.
; ..\CAN.c	  3163  
; ..\CAN.c	  3164              // USER CODE BEGIN (SRN6_OBJ6,2)
; ..\CAN.c	  3165  
; ..\CAN.c	  3166              // USER CODE END
; ..\CAN.c	  3167            }
; ..\CAN.c	  3168  
; ..\CAN.c	  3169            CAN_MOCTR6.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
	mov	d15,#8
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050dc),d15
.L116:

; ..\CAN.c	  3170          }
; ..\CAN.c	  3171  
; ..\CAN.c	  3172         CAN_MOCTR6.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
	mov	d15,#1
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050dc),d15
.L115:

; ..\CAN.c	  3173        }  // End of RXPND6
; ..\CAN.c	  3174  
; ..\CAN.c	  3175  
; ..\CAN.c	  3176         CAN_MSPND0.U =  ~0x00000040; // reset PND bit
	mov	d15,#-65
	movh.a	a15,#61440
	st.w	[a15]@los(0xf0004140),d15

; ..\CAN.c	  3177  
; ..\CAN.c	  3178        // USER CODE BEGIN (SRN6_OBJ6,7)
; ..\CAN.c	  3179  
; ..\CAN.c	  3180        // USER CODE END
; ..\CAN.c	  3181  
; ..\CAN.c	  3182        break;
; ..\CAN.c	  3183  
; ..\CAN.c	  3184      default:
.L114:
.L112:
	mov	d15,#32
	ld.w	d8,[a12]
.L1115:
	jne	d15,d8,.L113				; predicted taken
.L1116:

; ..\CAN.c	  3185  
; ..\CAN.c	  3186        // USER CODE BEGIN (SRN6,3)
; ..\CAN.c	  3187  
; ..\CAN.c	  3188        // USER CODE END
; ..\CAN.c	  3189  
; ..\CAN.c	  3190        break;
; ..\CAN.c	  3191  
; ..\CAN.c	  3192      }  // end switch 
; ..\CAN.c	  3193  
; ..\CAN.c	  3194      // USER CODE BEGIN (SRN6,7)
; ..\CAN.c	  3195  
; ..\CAN.c	  3196      // USER CODE END
; ..\CAN.c	  3197  
; ..\CAN.c	  3198    }  // end of while CAN_MSID
; ..\CAN.c	  3199  
; ..\CAN.c	  3200  
; ..\CAN.c	  3201    // USER CODE BEGIN (SRN6,15)
; ..\CAN.c	  3202  
; ..\CAN.c	  3203    // USER CODE END
; ..\CAN.c	  3204  
; ..\CAN.c	  3205  } //  End of function CAN_viSRN6
	rfe
.L363:
	
__CAN_viSRN6_function_end:
	.size	CAN_viSRN6,__CAN_viSRN6_function_end-CAN_viSRN6
.L285:
	; End of function
	
	.sdecl	'.text.intvec.009',code
	.sect	'.text.intvec.009'

; ..\CAN.c	  3206  
; ..\CAN.c	  3207  
; ..\CAN.c	  3208  //****************************************************************************
; ..\CAN.c	  3209  // @Function      void CAN_viSRN7(void) 
; ..\CAN.c	  3210  //
; ..\CAN.c	  3211  //----------------------------------------------------------------------------
; ..\CAN.c	  3212  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  3213  //                Request Node 7 of the MultiCAN module. 
; ..\CAN.c	  3214  //                Please note that you have to add application specific code 
; ..\CAN.c	  3215  //                to this function.
; ..\CAN.c	  3216  //
; ..\CAN.c	  3217  //----------------------------------------------------------------------------
; ..\CAN.c	  3218  // @Returnvalue   None
; ..\CAN.c	  3219  //
; ..\CAN.c	  3220  //----------------------------------------------------------------------------
; ..\CAN.c	  3221  // @Parameters    None
; ..\CAN.c	  3222  //
; ..\CAN.c	  3223  //----------------------------------------------------------------------------
; ..\CAN.c	  3224  // @Date          2013-11-20
; ..\CAN.c	  3225  //
; ..\CAN.c	  3226  //****************************************************************************
; ..\CAN.c	  3227  
; ..\CAN.c	  3228  // USER CODE BEGIN (SRN7,1)
; ..\CAN.c	  3229  
; ..\CAN.c	  3230  // USER CODE END
; ..\CAN.c	  3231  
; ..\CAN.c	  3232  void INTERRUPT (CAN_SRN7INT) CAN_viSRN7(void)
	movh.a	a14,#@his(CAN_viSRN7)
	lea	a14,[a14]@los(CAN_viSRN7)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN7',code,cluster('CAN_viSRN7')
	.sect	'.text.CAN.CAN_viSRN7'
	.align	2
	
	.global	CAN_viSRN7
; Function CAN_viSRN7
.L177:
CAN_viSRN7:	.type	func

; ..\CAN.c	  3233  {
; ..\CAN.c	  3234  
; ..\CAN.c	  3235  
; ..\CAN.c	  3236    // USER CODE BEGIN (SRN7,2)
; ..\CAN.c	  3237  
; ..\CAN.c	  3238    // USER CODE END
; ..\CAN.c	  3239  
; ..\CAN.c	  3240        CAN_MSIMASK.U  = 0x00000080; // set message index mask register
	mov	d15,#128
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00041c0),d15
.L1121:

; ..\CAN.c	  3241    while (CAN_MSID0.U != 0x00000020)
	ld.w	d15,__const_f0004180
	mov.a	a12,d15
.L1122:
	j	.L118
.L119:

; ..\CAN.c	  3242    {
; ..\CAN.c	  3243      switch(CAN_MSID0.U){
	ld.w	d15,[a12]
.L1123:
	jne	d15,#7,.L120				; predicted taken
.L1124:

; ..\CAN.c	  3244  
; ..\CAN.c	  3245      case 7: // message object 7 interrupt 
; ..\CAN.c	  3246      
; ..\CAN.c	  3247        if(CAN_MOSTAT7.B.RXPND)      // if message object 7 receive interrupt
	ld.w	d15,__const_f00050fc
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L1125:
	jz.t	d15:0,.L121				; predicted not taken
.L1126:

; ..\CAN.c	  3248        {
; ..\CAN.c	  3249  
; ..\CAN.c	  3250          if(CAN_MOSTAT7.B.NEWDAT)     // if NEWDAT is set
	ld.bu	d15,[a15]
.L1127:
	jz.t	d15:3,.L122				; predicted not taken
.L1128:

; ..\CAN.c	  3251          {
; ..\CAN.c	  3252  
; ..\CAN.c	  3253            if (CAN_MOSTAT7.B.MSGLST)  // if MSGLST is set
	ld.bu	d15,[a15]
.L1129:
	jz.t	d15:4,.L123				; predicted taken
.L1130:

; ..\CAN.c	  3254            {
; ..\CAN.c	  3255              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  3256              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  3257              // ie. the previously stored message is lost.
; ..\CAN.c	  3258  
; ..\CAN.c	  3259              CAN_MOCTR7.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
	mov	d15,#16
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050fc),d15
.L123:

; ..\CAN.c	  3260  
; ..\CAN.c	  3261              // USER CODE BEGIN (SRN7_OBJ7,1)
; ..\CAN.c	  3262  
; ..\CAN.c	  3263              // USER CODE END
; ..\CAN.c	  3264            }
; ..\CAN.c	  3265            else
; ..\CAN.c	  3266            {
; ..\CAN.c	  3267              // The CAN controller has stored a new message
; ..\CAN.c	  3268              // into this object.
; ..\CAN.c	  3269  
; ..\CAN.c	  3270              // USER CODE BEGIN (SRN7_OBJ7,2)
; ..\CAN.c	  3271  
; ..\CAN.c	  3272              // USER CODE END
; ..\CAN.c	  3273            }
; ..\CAN.c	  3274  
; ..\CAN.c	  3275            CAN_MOCTR7.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
	mov	d15,#8
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050fc),d15
.L122:

; ..\CAN.c	  3276          }
; ..\CAN.c	  3277  
; ..\CAN.c	  3278         CAN_MOCTR7.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
	mov	d15,#1
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00050fc),d15
.L121:

; ..\CAN.c	  3279        }  // End of RXPND7
; ..\CAN.c	  3280  
; ..\CAN.c	  3281  
; ..\CAN.c	  3282         CAN_MSPND0.U =  ~0x00000080; // reset PND bit
	mov	d15,#-129
	movh.a	a15,#61440
	st.w	[a15]@los(0xf0004140),d15

; ..\CAN.c	  3283  
; ..\CAN.c	  3284        // USER CODE BEGIN (SRN7_OBJ7,7)
; ..\CAN.c	  3285  
; ..\CAN.c	  3286        // USER CODE END
; ..\CAN.c	  3287  
; ..\CAN.c	  3288        break;
; ..\CAN.c	  3289  
; ..\CAN.c	  3290      default:
.L120:
.L118:
	mov	d15,#32
	ld.w	d8,[a12]
.L1131:
	jne	d15,d8,.L119				; predicted taken
.L1132:

; ..\CAN.c	  3291  
; ..\CAN.c	  3292        // USER CODE BEGIN (SRN7,3)
; ..\CAN.c	  3293  
; ..\CAN.c	  3294        // USER CODE END
; ..\CAN.c	  3295  
; ..\CAN.c	  3296        break;
; ..\CAN.c	  3297  
; ..\CAN.c	  3298      }  // end switch 
; ..\CAN.c	  3299  
; ..\CAN.c	  3300      // USER CODE BEGIN (SRN7,7)
; ..\CAN.c	  3301  
; ..\CAN.c	  3302      // USER CODE END
; ..\CAN.c	  3303  
; ..\CAN.c	  3304    }  // end of while CAN_MSID
; ..\CAN.c	  3305  
; ..\CAN.c	  3306  
; ..\CAN.c	  3307    // USER CODE BEGIN (SRN7,15)
; ..\CAN.c	  3308  
; ..\CAN.c	  3309    // USER CODE END
; ..\CAN.c	  3310  
; ..\CAN.c	  3311  } //  End of function CAN_viSRN7
	rfe
.L364:
	
__CAN_viSRN7_function_end:
	.size	CAN_viSRN7,__CAN_viSRN7_function_end-CAN_viSRN7
.L290:
	; End of function
	
	.sdecl	'.text.intvec.00a',code
	.sect	'.text.intvec.00a'

; ..\CAN.c	  3312  
; ..\CAN.c	  3313  
; ..\CAN.c	  3314  //****************************************************************************
; ..\CAN.c	  3315  // @Function      void CAN_viSRN8(void) 
; ..\CAN.c	  3316  //
; ..\CAN.c	  3317  //----------------------------------------------------------------------------
; ..\CAN.c	  3318  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  3319  //                Request Node 8 of the MultiCAN module. 
; ..\CAN.c	  3320  //                Please note that you have to add application specific code 
; ..\CAN.c	  3321  //                to this function.
; ..\CAN.c	  3322  //
; ..\CAN.c	  3323  //----------------------------------------------------------------------------
; ..\CAN.c	  3324  // @Returnvalue   None
; ..\CAN.c	  3325  //
; ..\CAN.c	  3326  //----------------------------------------------------------------------------
; ..\CAN.c	  3327  // @Parameters    None
; ..\CAN.c	  3328  //
; ..\CAN.c	  3329  //----------------------------------------------------------------------------
; ..\CAN.c	  3330  // @Date          2013-11-20
; ..\CAN.c	  3331  //
; ..\CAN.c	  3332  //****************************************************************************
; ..\CAN.c	  3333  
; ..\CAN.c	  3334  // USER CODE BEGIN (SRN8,1)
; ..\CAN.c	  3335  
; ..\CAN.c	  3336  // USER CODE END
; ..\CAN.c	  3337  
; ..\CAN.c	  3338  void INTERRUPT (CAN_SRN8INT) CAN_viSRN8(void)
	movh.a	a14,#@his(CAN_viSRN8)
	lea	a14,[a14]@los(CAN_viSRN8)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN8',code,cluster('CAN_viSRN8')
	.sect	'.text.CAN.CAN_viSRN8'
	.align	2
	
	.global	CAN_viSRN8
; Function CAN_viSRN8
.L179:
CAN_viSRN8:	.type	func

; ..\CAN.c	  3339  {
; ..\CAN.c	  3340  
; ..\CAN.c	  3341  
; ..\CAN.c	  3342    // USER CODE BEGIN (SRN8,2)
; ..\CAN.c	  3343  
; ..\CAN.c	  3344    // USER CODE END
; ..\CAN.c	  3345  
; ..\CAN.c	  3346        CAN_MSIMASK.U  = 0x00000100; // set message index mask register
	mov	d15,#256
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00041c0),d15
.L1137:

; ..\CAN.c	  3347    while (CAN_MSID0.U != 0x00000020)
	mov	d9,#8
	ld.w	d15,__const_f0004180
	mov.a	a12,d15
.L1138:
	j	.L124
.L125:

; ..\CAN.c	  3348    {
; ..\CAN.c	  3349      switch(CAN_MSID0.U){
	ld.w	d8,[a12]
.L1139:
	jne	d8,d9,.L126				; unsupported prediction taken forward branch
.L1140:

; ..\CAN.c	  3350  
; ..\CAN.c	  3351      case 8: // message object 8 interrupt 
; ..\CAN.c	  3352      
; ..\CAN.c	  3353        if(CAN_MOSTAT8.B.RXPND)      // if message object 8 receive interrupt
	ld.w	d8,__const_f000511c
	mov.a	a15,d8
	ld.bu	d8,[a15]
.L1141:
	jz.t	d8:0,.L127				; predicted not taken
.L1142:

; ..\CAN.c	  3354        {
; ..\CAN.c	  3355  
; ..\CAN.c	  3356          if(CAN_MOSTAT8.B.NEWDAT)     // if NEWDAT is set
	ld.bu	d15,[a15]
.L1143:
	jz.t	d15:3,.L128				; predicted not taken
.L1144:

; ..\CAN.c	  3357          {
; ..\CAN.c	  3358  
; ..\CAN.c	  3359            if (CAN_MOSTAT8.B.MSGLST)  // if MSGLST is set
	ld.bu	d15,[a15]
.L1145:
	jz.t	d15:4,.L129				; predicted taken
.L1146:

; ..\CAN.c	  3360            {
; ..\CAN.c	  3361              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  3362              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  3363              // ie. the previously stored message is lost.
; ..\CAN.c	  3364  
; ..\CAN.c	  3365              CAN_MOCTR8.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
	mov	d15,#16
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000511c),d15
.L129:

; ..\CAN.c	  3366  
; ..\CAN.c	  3367              // USER CODE BEGIN (SRN8_OBJ8,1)
; ..\CAN.c	  3368  
; ..\CAN.c	  3369              // USER CODE END
; ..\CAN.c	  3370            }
; ..\CAN.c	  3371            else
; ..\CAN.c	  3372            {
; ..\CAN.c	  3373              // The CAN controller has stored a new message
; ..\CAN.c	  3374              // into this object.
; ..\CAN.c	  3375  
; ..\CAN.c	  3376              // USER CODE BEGIN (SRN8_OBJ8,2)
; ..\CAN.c	  3377  
; ..\CAN.c	  3378              // USER CODE END
; ..\CAN.c	  3379            }
; ..\CAN.c	  3380  
; ..\CAN.c	  3381            CAN_MOCTR8.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000511c),d9
.L128:

; ..\CAN.c	  3382          }
; ..\CAN.c	  3383  
; ..\CAN.c	  3384         CAN_MOCTR8.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
	mov	d8,#1
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000511c),d8
.L127:

; ..\CAN.c	  3385        }  // End of RXPND8
; ..\CAN.c	  3386  
; ..\CAN.c	  3387  
; ..\CAN.c	  3388         CAN_MSPND0.U =  ~0x00000100; // reset PND bit
	mov	d15,#-257
	movh.a	a15,#61440
	st.w	[a15]@los(0xf0004140),d15

; ..\CAN.c	  3389  
; ..\CAN.c	  3390        // USER CODE BEGIN (SRN8_OBJ8,7)
; ..\CAN.c	  3391  
; ..\CAN.c	  3392        // USER CODE END
; ..\CAN.c	  3393  
; ..\CAN.c	  3394        break;
; ..\CAN.c	  3395  
; ..\CAN.c	  3396      default:
.L126:
.L124:
	mov	d15,#32
	ld.w	d8,[a12]
.L1147:
	jne	d15,d8,.L125				; predicted taken
.L1148:

; ..\CAN.c	  3397  
; ..\CAN.c	  3398        // USER CODE BEGIN (SRN8,3)
; ..\CAN.c	  3399  
; ..\CAN.c	  3400        // USER CODE END
; ..\CAN.c	  3401  
; ..\CAN.c	  3402        break;
; ..\CAN.c	  3403  
; ..\CAN.c	  3404      }  // end switch 
; ..\CAN.c	  3405  
; ..\CAN.c	  3406      // USER CODE BEGIN (SRN8,7)
; ..\CAN.c	  3407  
; ..\CAN.c	  3408      // USER CODE END
; ..\CAN.c	  3409  
; ..\CAN.c	  3410    }  // end of while CAN_MSID
; ..\CAN.c	  3411  
; ..\CAN.c	  3412  
; ..\CAN.c	  3413    // USER CODE BEGIN (SRN8,15)
; ..\CAN.c	  3414  
; ..\CAN.c	  3415    // USER CODE END
; ..\CAN.c	  3416  
; ..\CAN.c	  3417  } //  End of function CAN_viSRN8
	rfe
.L365:
	
__CAN_viSRN8_function_end:
	.size	CAN_viSRN8,__CAN_viSRN8_function_end-CAN_viSRN8
.L295:
	; End of function
	
	.sdecl	'.text.intvec.00b',code
	.sect	'.text.intvec.00b'

; ..\CAN.c	  3418  
; ..\CAN.c	  3419  
; ..\CAN.c	  3420  //****************************************************************************
; ..\CAN.c	  3421  // @Function      void CAN_viSRN9(void) 
; ..\CAN.c	  3422  //
; ..\CAN.c	  3423  //----------------------------------------------------------------------------
; ..\CAN.c	  3424  // @Description   This is the interrupt service routine for the Service 
; ..\CAN.c	  3425  //                Request Node 9 of the MultiCAN module. 
; ..\CAN.c	  3426  //                Please note that you have to add application specific code 
; ..\CAN.c	  3427  //                to this function.
; ..\CAN.c	  3428  //
; ..\CAN.c	  3429  //----------------------------------------------------------------------------
; ..\CAN.c	  3430  // @Returnvalue   None
; ..\CAN.c	  3431  //
; ..\CAN.c	  3432  //----------------------------------------------------------------------------
; ..\CAN.c	  3433  // @Parameters    None
; ..\CAN.c	  3434  //
; ..\CAN.c	  3435  //----------------------------------------------------------------------------
; ..\CAN.c	  3436  // @Date          2013-11-20
; ..\CAN.c	  3437  //
; ..\CAN.c	  3438  //****************************************************************************
; ..\CAN.c	  3439  
; ..\CAN.c	  3440  // USER CODE BEGIN (SRN9,1)
; ..\CAN.c	  3441  
; ..\CAN.c	  3442  // USER CODE END
; ..\CAN.c	  3443  
; ..\CAN.c	  3444  void INTERRUPT (CAN_SRN9INT) CAN_viSRN9(void)
	movh.a	a14,#@his(CAN_viSRN9)
	lea	a14,[a14]@los(CAN_viSRN9)
	ji	a14
	.sdecl	'.text.CAN.CAN_viSRN9',code,cluster('CAN_viSRN9')
	.sect	'.text.CAN.CAN_viSRN9'
	.align	2
	
	.global	CAN_viSRN9
; Function CAN_viSRN9
.L181:
CAN_viSRN9:	.type	func

; ..\CAN.c	  3445  {
; ..\CAN.c	  3446  
; ..\CAN.c	  3447  
; ..\CAN.c	  3448    // USER CODE BEGIN (SRN9,2)
; ..\CAN.c	  3449  
; ..\CAN.c	  3450    // USER CODE END
; ..\CAN.c	  3451  
; ..\CAN.c	  3452        CAN_MSIMASK.U  = 0x00000200; // set message index mask register
	mov	d15,#512
	movh.a	a15,#61440
	st.w	[a15]@los(0xf00041c0),d15
.L1153:

; ..\CAN.c	  3453    while (CAN_MSID0.U != 0x00000020)
	ld.w	d15,__const_f0004180
	mov.a	a12,d15
.L1154:
	j	.L130
.L131:

; ..\CAN.c	  3454    {
; ..\CAN.c	  3455      switch(CAN_MSID0.U){
; ..\CAN.c	  3456  
; ..\CAN.c	  3457      case 9: // message object 9 interrupt 
	mov	d15,#9
	ld.w	d8,[a12]
.L1155:
	jne	d15,d8,.L132				; predicted taken
.L1156:

; ..\CAN.c	  3458      
; ..\CAN.c	  3459        if(CAN_MOSTAT9.B.RXPND)      // if message object 9 receive interrupt
	ld.w	d15,__const_f000513c
	mov.a	a15,d15
	ld.bu	d15,[a15]
.L1157:
	jz.t	d15:0,.L133				; predicted not taken
.L1158:

; ..\CAN.c	  3460        {
; ..\CAN.c	  3461  
; ..\CAN.c	  3462          if(CAN_MOSTAT9.B.NEWDAT)     // if NEWDAT is set
	ld.bu	d15,[a15]
.L1159:
	jz.t	d15:3,.L134				; predicted not taken
.L1160:

; ..\CAN.c	  3463          {
; ..\CAN.c	  3464  
; ..\CAN.c	  3465            if (CAN_MOSTAT9.B.MSGLST)  // if MSGLST is set
	ld.bu	d15,[a15]
.L1161:
	jz.t	d15:4,.L135				; predicted taken
.L1162:

; ..\CAN.c	  3466            {
; ..\CAN.c	  3467              // Indicates that the CAN controller has stored a new 
; ..\CAN.c	  3468              // message into this object, while NEWDAT was still set,
; ..\CAN.c	  3469              // ie. the previously stored message is lost.
; ..\CAN.c	  3470  
; ..\CAN.c	  3471              CAN_MOCTR9.U = CAN_MOCTRm_CTR_RESMSGLST_MASK;    // reset MSGLST
	mov	d15,#16
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000513c),d15
.L135:

; ..\CAN.c	  3472  
; ..\CAN.c	  3473              // USER CODE BEGIN (SRN9_OBJ9,1)
; ..\CAN.c	  3474  
; ..\CAN.c	  3475              // USER CODE END
; ..\CAN.c	  3476            }
; ..\CAN.c	  3477            else
; ..\CAN.c	  3478            {
; ..\CAN.c	  3479              // The CAN controller has stored a new message
; ..\CAN.c	  3480              // into this object.
; ..\CAN.c	  3481  
; ..\CAN.c	  3482              // USER CODE BEGIN (SRN9_OBJ9,2)
; ..\CAN.c	  3483  
; ..\CAN.c	  3484              // USER CODE END
; ..\CAN.c	  3485            }
; ..\CAN.c	  3486  
; ..\CAN.c	  3487            CAN_MOCTR9.U = CAN_MOCTRm_CTR_RESNEWDAT_MASK;      // reset NEWDAT
	mov	d15,#8
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000513c),d15
.L134:

; ..\CAN.c	  3488          }
; ..\CAN.c	  3489  
; ..\CAN.c	  3490         CAN_MOCTR9.U = CAN_MOCTRm_CTR_RESRXPND_MASK;         // reset RXPND
	mov	d15,#1
	movh.a	a15,#61440
	st.w	[a15]@los(0xf000513c),d15
.L133:

; ..\CAN.c	  3491        }  // End of RXPND9
; ..\CAN.c	  3492  
; ..\CAN.c	  3493  
; ..\CAN.c	  3494         CAN_MSPND0.U =  ~0x00000200; // reset PND bit
	mov	d15,#-513
	movh.a	a15,#61440
	st.w	[a15]@los(0xf0004140),d15

; ..\CAN.c	  3495  
; ..\CAN.c	  3496        // USER CODE BEGIN (SRN9_OBJ9,7)
; ..\CAN.c	  3497  
; ..\CAN.c	  3498        // USER CODE END
; ..\CAN.c	  3499  
; ..\CAN.c	  3500        break;
; ..\CAN.c	  3501  
; ..\CAN.c	  3502      default:
.L132:
.L130:
	mov	d15,#32
	ld.w	d8,[a12]
.L1163:
	jne	d15,d8,.L131				; predicted taken
.L1164:

; ..\CAN.c	  3503  
; ..\CAN.c	  3504        // USER CODE BEGIN (SRN9,3)
; ..\CAN.c	  3505  
; ..\CAN.c	  3506        // USER CODE END
; ..\CAN.c	  3507  
; ..\CAN.c	  3508        break;
; ..\CAN.c	  3509  
; ..\CAN.c	  3510      }  // end switch 
; ..\CAN.c	  3511  
; ..\CAN.c	  3512      // USER CODE BEGIN (SRN9,7)
; ..\CAN.c	  3513  
; ..\CAN.c	  3514      // USER CODE END
; ..\CAN.c	  3515  
; ..\CAN.c	  3516    }  // end of while CAN_MSID
; ..\CAN.c	  3517  
; ..\CAN.c	  3518  
; ..\CAN.c	  3519    // USER CODE BEGIN (SRN9,15)
; ..\CAN.c	  3520  
; ..\CAN.c	  3521    // USER CODE END
; ..\CAN.c	  3522  
; ..\CAN.c	  3523  } //  End of function CAN_viSRN9
	rfe
.L366:
	
__CAN_viSRN9_function_end:
	.size	CAN_viSRN9,__CAN_viSRN9_function_end-CAN_viSRN9
.L300:
	; End of function
	
	.sdecl	'.bss.CAN.aubFIFOWritePtr',data,cluster('aubFIFOWritePtr')
	.sect	'.bss.CAN.aubFIFOWritePtr'
aubFIFOWritePtr:	.type	object
	.size	aubFIFOWritePtr,128
	.space	128
	.sdecl	'.bss.CAN.aubFIFOReadPtr',data,cluster('aubFIFOReadPtr')
	.sect	'.bss.CAN.aubFIFOReadPtr'
aubFIFOReadPtr:	.type	object
	.size	aubFIFOReadPtr,128
	.space	128
	.calls	'CAN_vInit','MAIN_vWriteWDTCON0'
	.calls	'CAN_viSRN3','CAN_vGetMsgObj'
	.calls	'CAN_viSRN3','CAN_vReleaseObj'
	.calls	'CAN_viSRN3','memcpy'
	.calls	'CAN_viSRN3','get_jiffies'
	.calls	'CAN_viSRN3','callback'
	.calls	'CAN_vInit','',0
	.calls	'CAN_vGetMsgObj','',0
	.calls	'CAN_ubRequestMsgObj','',0
	.calls	'CAN_ubNewData','',0
	.calls	'CAN_vTransmit','',0
	.calls	'CAN_vConfigMsgObj','',0
	.calls	'CAN_vLoadData','',0
	.calls	'CAN_ubMsgLost','',0
	.calls	'CAN_ubDelMsgObj','',0
	.calls	'CAN_vReleaseObj','',0
	.calls	'CAN_vSetMSGVAL','',0
	.calls	'CAN_ubWriteFIFO','',0
	.calls	'CAN_ubReadFIFO','',0
	.calls	'CAN_viSRN0','',0
	.calls	'CAN_viSRN1','',0
	.calls	'CAN_viSRN2','',0
	.calls	'CAN_viSRN3','',32
	.calls	'CAN_viSRN4','',0
	.calls	'CAN_viSRN5','',0
	.calls	'CAN_viSRN6','',0
	.calls	'CAN_viSRN7','',0
	.calls	'CAN_viSRN8','',0
	.extern	MAIN_vWriteWDTCON0
	.extern	memcpy
	.extern	_Errno
	.extern	get_jiffies
	.extern	callback
	.calls	'CAN_viSRN9','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L183:
	.word	1982
	.half	3
	.word	.L184
	.byte	4
.L182:
	.byte	1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L185
	.byte	2
	.byte	'endinit_clear',0,3,1,159,1,13,1,1,3
	.byte	'int',0,4,5,4
	.byte	'x',0,1,159,1,31
	.word	176
	.byte	5,0,2
	.byte	'endinit_set',0,3,1,169,1,13,1,1,4
	.byte	'x',0,1,169,1,29
	.word	176
	.byte	5,0,2
	.byte	'nops',0,3,1,143,2,13,1,1,6
	.byte	'void',0,7
	.word	242
	.byte	4
	.byte	'cnt',0,1,143,2,24
	.word	248
	.byte	5,0,8
	.byte	'MAIN_vWriteWDTCON0',0,2,139,1,6,1,1,1,1
.L358:
	.byte	3
	.byte	'unsigned int',0,4,7,4
	.byte	'uwValue',0,2,139,1,31
	.word	296
	.byte	0
.L306:
	.byte	3
	.byte	'unsigned char',0,1,8
.L356:
	.byte	9,3,93,9,20,3
	.byte	'unsigned short int',0,2,7,10
	.byte	'usMOCfg',0,2
	.word	352
	.byte	2,35,0,10
	.byte	'uwID',0,4
	.word	296
	.byte	2,35,2,10
	.byte	'uwMask',0,4
	.word	296
	.byte	2,35,6,11,8
	.word	330
	.byte	12,7,0,10
	.byte	'ubData',0,8
	.word	421
	.byte	2,35,10,10
	.byte	'usCounter',0,2
	.word	352
	.byte	2,35,18,0
.L310:
	.byte	7
	.word	347
.L327:
	.byte	7
	.word	330
	.byte	13
	.byte	'memcpy',0,4,45,17
	.word	248
	.byte	1,1,1,1,14
	.word	248
	.byte	15,4,45,33
	.word	495
	.byte	16
	.word	242
	.byte	7
	.word	508
	.byte	14
	.word	513
	.byte	15,4,45,56
	.word	518
	.byte	15,4,45,68
	.word	296
	.byte	0,17
	.word	154
	.byte	18
	.word	183
	.byte	5,0,17
	.word	196
	.byte	18
	.word	216
	.byte	5,0,17
	.word	229
	.byte	18
	.word	253
	.byte	5,0,19
	.byte	'get_jiffies',0,5,100,10
	.word	296
	.byte	1,1,1,1,8
	.byte	'callback',0,6,58,6,1,1,1,1,4
	.byte	'swc_id',0,6,58,24
	.word	296
	.byte	4
	.byte	'flag',0,6,58,41
	.word	296
	.byte	0,20
	.byte	'__prof_adm',0,6,1,1
	.word	248
	.byte	21,1,7
	.word	665
	.byte	20
	.byte	'__codeptr',0,6,1,1
	.word	667
	.byte	22,7,145,19,18,4,9,7,147,19,2,4,3
	.byte	'unsigned int',0,4,7,23
	.byte	'CNT1',0,4
	.word	702
	.byte	12,20,2,35,0,24,4
	.word	702
	.byte	2,18,2,35,0,23
	.byte	'TOS',0,4
	.word	702
	.byte	2,16,2,35,0,23
	.byte	'SRPN',0,4
	.word	702
	.byte	8,8,2,35,0,23
	.byte	'CPPN',0,4
	.word	702
	.byte	8,0,2,35,0,0,10
	.byte	'B',0,4
	.word	696
	.byte	2,35,0,10
	.byte	'I',0,4
	.word	176
	.byte	2,35,0,10
	.byte	'U',0,4
	.word	296
	.byte	2,35,0,0,25
	.word	690
	.byte	20
	.byte	'PCP_GPR6_type',0,7,158,19,3
	.word	827
	.byte	22,7,160,19,18,4,9,7,162,19,2,4,23
	.byte	'Z',0,4
	.word	702
	.byte	1,31,2,35,0,23
	.byte	'N',0,4
	.word	702
	.byte	1,30,2,35,0,23
	.byte	'C',0,4
	.word	702
	.byte	1,29,2,35,0,23
	.byte	'V',0,4
	.word	702
	.byte	1,28,2,35,0,23
	.byte	'CNZ',0,4
	.word	702
	.byte	1,27,2,35,0,23
	.byte	'IEN',0,4
	.word	702
	.byte	1,26,2,35,0,23
	.byte	'CEN',0,4
	.word	702
	.byte	1,25,2,35,0,24,4
	.word	702
	.byte	1,24,2,35,0,23
	.byte	'DPTR',0,4
	.word	702
	.byte	8,16,2,35,0,24,4
	.word	702
	.byte	16,0,2,35,0,0,10
	.byte	'B',0,4
	.word	861
	.byte	2,35,0,10
	.byte	'I',0,4
	.word	176
	.byte	2,35,0,10
	.byte	'U',0,4
	.word	296
	.byte	2,35,0,0,25
	.word	855
	.byte	20
	.byte	'PCP_GPR7_type',0,7,178,19,3
	.word	1037
	.byte	20
	.byte	'ubyte',0,2,69,24
	.word	330
	.byte	20
	.byte	'ushort',0,2,71,24
	.word	352
	.byte	20
	.byte	'uword',0,2,73,24
	.word	296
	.byte	20
	.byte	'CAN_SWObj',0,3,100,4
	.word	347
	.byte	20
	.byte	'size_t',0,4,20,25
	.word	296
	.byte	20
	.byte	'uint16_t',0,8,24,33
	.word	352
	.byte	20
	.byte	'uint32_t',0,8,26,33
	.word	296
	.byte	26
	.byte	'_Errno',0,9,19,21
	.word	176
	.byte	1,1,3
	.byte	'unsigned long long int',0,8,7,20
	.byte	'clock_t',0,10,32,33
	.word	1192
	.byte	22,1,75,9,64,9,1,76,5,64,10
	.byte	'pcxi',0,4
	.word	296
	.byte	2,35,0,10
	.byte	'psw',0,4
	.word	296
	.byte	2,35,4,10
	.byte	'a10',0,4
	.word	248
	.byte	2,35,8,10
	.byte	'a11',0,4
	.word	248
	.byte	2,35,12,10
	.byte	'd8',0,4
	.word	296
	.byte	2,35,16,10
	.byte	'd9',0,4
	.word	296
	.byte	2,35,20,10
	.byte	'd10',0,4
	.word	296
	.byte	2,35,24,10
	.byte	'd11',0,4
	.word	296
	.byte	2,35,28,10
	.byte	'a12',0,4
	.word	296
	.byte	2,35,32,10
	.byte	'a13',0,4
	.word	296
	.byte	2,35,36,10
	.byte	'a14',0,4
	.word	296
	.byte	2,35,40,10
	.byte	'a15',0,4
	.word	296
	.byte	2,35,44,10
	.byte	'd12',0,4
	.word	296
	.byte	2,35,48,10
	.byte	'd13',0,4
	.word	296
	.byte	2,35,52,10
	.byte	'd14',0,4
	.word	296
	.byte	2,35,56,10
	.byte	'd15',0,4
	.word	296
	.byte	2,35,60,0,10
	.byte	'u',0,64
	.word	1239
	.byte	2,35,0,9,1,94,5,64,10
	.byte	'pcxi',0,4
	.word	296
	.byte	2,35,0,27,1,1,28
	.word	248
	.byte	0,7
	.word	1482
	.byte	10
	.byte	'pc',0,4
	.word	1491
	.byte	2,35,4,10
	.byte	'a2',0,4
	.word	296
	.byte	2,35,8,10
	.byte	'a3',0,4
	.word	296
	.byte	2,35,12,10
	.byte	'd0',0,4
	.word	296
	.byte	2,35,16,10
	.byte	'd1',0,4
	.word	296
	.byte	2,35,20,10
	.byte	'd2',0,4
	.word	296
	.byte	2,35,24,10
	.byte	'd3',0,4
	.word	296
	.byte	2,35,28,10
	.byte	'a4',0,4
	.word	248
	.byte	2,35,32,10
	.byte	'a5',0,4
	.word	296
	.byte	2,35,36,10
	.byte	'a6',0,4
	.word	296
	.byte	2,35,40,10
	.byte	'a7',0,4
	.word	296
	.byte	2,35,44,10
	.byte	'd4',0,4
	.word	296
	.byte	2,35,48,10
	.byte	'd5',0,4
	.word	296
	.byte	2,35,52,10
	.byte	'd6',0,4
	.word	296
	.byte	2,35,56,10
	.byte	'd7',0,4
	.word	296
	.byte	2,35,60,0,10
	.byte	'l',0,64
	.word	1463
	.byte	2,35,0,0,20
	.byte	'context_t',0,1,112,3
	.word	1234
	.byte	20
	.byte	'_iob_flag_t',0,11,75,25
	.word	352
	.byte	29
	.byte	'swc_s',0,5,23,16,44,10
	.byte	'task_state',0,4
	.word	296
	.byte	2,35,0,10
	.byte	'absolute_deadline',0,4
	.word	296
	.byte	2,35,4,10
	.byte	'relative_deadline',0,4
	.word	296
	.byte	2,35,8,10
	.byte	'next_release_time',0,4
	.word	296
	.byte	2,35,12,10
	.byte	'lcx',0,4
	.word	296
	.byte	2,35,16,10
	.byte	'priority',0,4
	.word	296
	.byte	2,35,20,10
	.byte	'period',0,4
	.word	296
	.byte	2,35,24,10
	.byte	'release_timestamp',0,8
	.word	1192
	.byte	2,35,28,7
	.word	296
	.byte	10
	.byte	'arg',0,4
	.word	1913
	.byte	2,35,36,11,4
	.word	296
	.byte	12,0,0,10
	.byte	'stack',0,4
	.word	1931
	.byte	2,35,40,0,7
	.word	1727
	.byte	20
	.byte	'swc_t',0,5,34,4
	.word	1956
.L367:
	.byte	11,128,1
	.word	330
	.byte	12,127,0,0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L184:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,36
	.byte	0,3,8,11,15,62,15,0,0,4,5,0,3,8,58,15,59,15,57,15,73,19,0,0,5,11,0,0,0,6,59,0,3,8,0,0,7,15,0,73,19,0,0
	.byte	8,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,9,19,1,58,15,59,15,57,15,11,15,0,0,10,13,0,3
	.byte	8,11,15,73,19,56,9,0,0,11,1,1,11,15,73,19,0,0,12,33,0,47,15,0,0,13,46,1,3,8,58,15,59,15,57,15,73,19,54
	.byte	15,39,12,63,12,60,12,0,0,14,55,0,73,19,0,0,15,5,0,58,15,59,15,57,15,73,19,0,0,16,38,0,73,19,0,0,17,46
	.byte	1,49,19,0,0,18,5,0,49,19,0,0,19,46,0,3,8,58,15,59,15,57,15,73,19,54,15,39,12,63,12,60,12,0,0,20,22,0,3
	.byte	8,58,15,59,15,57,15,73,19,0,0,21,21,0,54,15,0,0,22,23,1,58,15,59,15,57,15,11,15,0,0,23,13,0,3,8,11,15
	.byte	73,19,13,15,12,15,56,9,0,0,24,13,0,11,15,73,19,13,15,12,15,56,9,0,0,25,53,0,73,19,0,0,26,52,0,3,8,58,15
	.byte	59,15,57,15,73,19,63,12,60,12,0,0,27,21,1,54,15,39,12,0,0,28,5,0,73,19,0,0,29,19,1,3,8,58,15,59,15,57
	.byte	15,11,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L185:
	.word	.L408-.L407
.L407:
	.half	3
	.word	.L410-.L409
.L409:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'C:\\Program Files (x86)\\TASKING\\TriCore v4.1r1\\ctc\\include\\',0,0
	.byte	'..\\intrinsic.h',0,0,0,0
	.byte	'..\\MAIN.h',0,0,0,0
	.byte	'..\\CAN.h',0,0,0,0
	.byte	'string.h',0,1,0,0
	.byte	'..\\kernel.h',0,0,0,0
	.byte	'..\\CAN.c',0,0,0,0
	.byte	'C:\\Program Files (x86)\\TASKING\\TriCore v4.1r1\\ctc\\include\\sfr\\regtc1797.sfr',0,0,0,0
	.byte	'stdint.h',0,1,0,0
	.byte	'errno.h',0,1,0,0
	.byte	'time.h',0,1,0,0
	.byte	'stdio.h',0,1,0,0,0
.L410:
.L408:
	.sdecl	'.debug_info',debug,cluster('CAN_vInit')
	.sect	'.debug_info'
.L186:
	.word	216
	.half	3
	.word	.L187
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L189,.L188
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_vInit',0,1,159,1,6,1,1,1
	.word	.L137,.L305,.L136
	.byte	4
	.word	.L137,.L305
	.byte	5
	.byte	'i',0,1,161,1,7
	.word	.L306,.L307
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_vInit')
	.sect	'.debug_abbrev'
.L187:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_vInit')
	.sect	'.debug_line'
.L188:
	.word	.L412-.L411
.L411:
	.half	3
	.word	.L414-.L413
.L413:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L414:
	.byte	5,3,7,0,5,2
	.word	.L137
	.byte	3,175,1,1,5,10,9
	.half	.L415-.L137
	.byte	3,1,1,5,20,9
	.half	.L416-.L415
	.byte	1,5,18,1,9
	.half	.L3-.L416
	.byte	3,1,1,5,37,9
	.half	.L417-.L3
	.byte	1,5,20,7,9
	.half	.L418-.L417
	.byte	3,1,1,5,18,1,5,3,9
	.half	.L419-.L418
	.byte	3,1,1,5,22,9
	.half	.L420-.L419
	.byte	3,3,1,5,30,9
	.half	.L421-.L420
	.byte	3,124,1,5,22,9
	.half	.L4-.L421
	.byte	3,4,1,5,27,9
	.half	.L422-.L4
	.byte	1,5,20,7,9
	.half	.L423-.L422
	.byte	3,9,1,5,18,1,5,11,9
	.half	.L424-.L423
	.byte	3,9,1,5,20,9
	.half	.L425-.L424
	.byte	3,1,1,5,18,3,127,1,5,20,9
	.half	.L426-.L425
	.byte	3,6,1,5,18,3,123,1,9
	.half	.L427-.L426
	.byte	3,5,1,9
	.half	.L428-.L427
	.byte	3,3,1,5,29,9
	.half	.L429-.L428
	.byte	3,7,1,5,47,9
	.half	.L430-.L429
	.byte	1,5,18,1,5,49,9
	.half	.L431-.L430
	.byte	3,7,1,5,29,1,5,32,9
	.half	.L432-.L431
	.byte	1,5,47,9
	.half	.L433-.L432
	.byte	1,5,18,1,5,20,9
	.half	.L434-.L433
	.byte	3,11,1,5,18,1,9
	.half	.L435-.L434
	.byte	3,7,1,9
	.half	.L436-.L435
	.byte	3,9,1,9
	.half	.L437-.L436
	.byte	3,9,1,5,3,9
	.half	.L438-.L437
	.byte	3,6,1,5,49,9
	.half	.L439-.L438
	.byte	3,79,1,5,3,3,49,1,9
	.half	.L440-.L439
	.byte	3,1,1,9
	.half	.L441-.L440
	.byte	3,1,1,9
	.half	.L442-.L441
	.byte	3,1,1,9
	.half	.L443-.L442
	.byte	3,1,1,9
	.half	.L444-.L443
	.byte	3,1,1,9
	.half	.L445-.L444
	.byte	3,1,1,9
	.half	.L446-.L445
	.byte	3,1,1,9
	.half	.L447-.L446
	.byte	3,1,1,9
	.half	.L448-.L447
	.byte	3,1,1,9
	.half	.L449-.L448
	.byte	3,1,1,9
	.half	.L450-.L449
	.byte	3,1,1,9
	.half	.L451-.L450
	.byte	3,1,1,9
	.half	.L452-.L451
	.byte	3,1,1,9
	.half	.L453-.L452
	.byte	3,1,1,9
	.half	.L454-.L453
	.byte	3,1,1,9
	.half	.L455-.L454
	.byte	3,1,1,9
	.half	.L456-.L455
	.byte	3,1,1,9
	.half	.L457-.L456
	.byte	3,1,1,9
	.half	.L458-.L457
	.byte	3,1,1,9
	.half	.L459-.L458
	.byte	3,1,1,9
	.half	.L460-.L459
	.byte	3,1,1,9
	.half	.L461-.L460
	.byte	3,1,1,9
	.half	.L462-.L461
	.byte	3,1,1,9
	.half	.L463-.L462
	.byte	3,1,1,9
	.half	.L464-.L463
	.byte	3,1,1,9
	.half	.L465-.L464
	.byte	3,1,1,9
	.half	.L466-.L465
	.byte	3,1,1,9
	.half	.L467-.L466
	.byte	3,1,1,9
	.half	.L468-.L467
	.byte	3,1,1,5,20,9
	.half	.L469-.L468
	.byte	3,12,1,5,13,1,5,18,9
	.half	.L470-.L469
	.byte	1,5,20,9
	.half	.L471-.L470
	.byte	3,5,1,5,18,1,5,20,9
	.half	.L472-.L471
	.byte	3,3,1,5,18,1,5,20,9
	.half	.L368-.L472
	.byte	3,5,1,5,18,9
	.half	.L473-.L368
	.byte	1,5,20,9
	.half	.L474-.L473
	.byte	3,7,1,5,18,1,5,19,9
	.half	.L475-.L474
	.byte	3,2,1,9
	.half	.L476-.L475
	.byte	3,1,1,5,18,9
	.half	.L477-.L476
	.byte	3,4,1,9
	.half	.L478-.L477
	.byte	3,1,1,5,13,9
	.half	.L479-.L478
	.byte	3,9,1,5,18,9
	.half	.L480-.L479
	.byte	1,9
	.half	.L481-.L480
	.byte	3,5,1,9
	.half	.L482-.L481
	.byte	3,3,1,9
	.half	.L483-.L482
	.byte	3,5,1,5,20,9
	.half	.L484-.L483
	.byte	3,7,1,5,18,1,5,19,9
	.half	.L485-.L484
	.byte	3,2,1,9
	.half	.L486-.L485
	.byte	3,1,1,5,20,9
	.half	.L487-.L486
	.byte	3,4,1,5,18,1,9
	.half	.L488-.L487
	.byte	3,1,1,5,20,9
	.half	.L489-.L488
	.byte	3,9,1,5,13,1,5,18,9
	.half	.L490-.L489
	.byte	1,5,20,9
	.half	.L491-.L490
	.byte	3,7,1,5,18,1,9
	.half	.L492-.L491
	.byte	3,3,1,9
	.half	.L493-.L492
	.byte	3,5,1,5,20,9
	.half	.L494-.L493
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L495-.L494
	.byte	3,5,1,5,18,1,9
	.half	.L496-.L495
	.byte	3,1,1,5,13,9
	.half	.L497-.L496
	.byte	3,9,1,5,18,9
	.half	.L498-.L497
	.byte	1,9
	.half	.L499-.L498
	.byte	3,7,1,9
	.half	.L500-.L499
	.byte	3,3,1,9
	.half	.L501-.L500
	.byte	3,5,1,5,20,9
	.half	.L502-.L501
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L503-.L502
	.byte	3,5,1,5,18,1,9
	.half	.L504-.L503
	.byte	3,1,1,5,13,9
	.half	.L505-.L504
	.byte	3,9,1,5,18,9
	.half	.L506-.L505
	.byte	1,9
	.half	.L507-.L506
	.byte	3,7,1,9
	.half	.L508-.L507
	.byte	3,3,1,9
	.half	.L509-.L508
	.byte	3,5,1,5,20,9
	.half	.L510-.L509
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L511-.L510
	.byte	3,5,1,5,18,1,9
	.half	.L512-.L511
	.byte	3,1,1,5,13,9
	.half	.L513-.L512
	.byte	3,9,1,5,18,9
	.half	.L514-.L513
	.byte	1,9
	.half	.L515-.L514
	.byte	3,7,1,9
	.half	.L516-.L515
	.byte	3,3,1,9
	.half	.L517-.L516
	.byte	3,5,1,5,20,9
	.half	.L518-.L517
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L519-.L518
	.byte	3,5,1,5,18,1,9
	.half	.L520-.L519
	.byte	3,1,1,5,13,9
	.half	.L521-.L520
	.byte	3,9,1,5,18,9
	.half	.L522-.L521
	.byte	1,9
	.half	.L523-.L522
	.byte	3,7,1,9
	.half	.L524-.L523
	.byte	3,3,1,9
	.half	.L525-.L524
	.byte	3,5,1,5,20,9
	.half	.L526-.L525
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L527-.L526
	.byte	3,5,1,5,18,1,9
	.half	.L528-.L527
	.byte	3,1,1,5,13,9
	.half	.L529-.L528
	.byte	3,9,1,5,18,9
	.half	.L530-.L529
	.byte	1,9
	.half	.L531-.L530
	.byte	3,7,1,9
	.half	.L532-.L531
	.byte	3,3,1,9
	.half	.L533-.L532
	.byte	3,5,1,5,20,9
	.half	.L534-.L533
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L535-.L534
	.byte	3,5,1,5,18,1,9
	.half	.L536-.L535
	.byte	3,1,1,5,13,9
	.half	.L537-.L536
	.byte	3,9,1,5,18,9
	.half	.L538-.L537
	.byte	1,9
	.half	.L539-.L538
	.byte	3,7,1,9
	.half	.L540-.L539
	.byte	3,3,1,9
	.half	.L541-.L540
	.byte	3,5,1,5,20,9
	.half	.L542-.L541
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L543-.L542
	.byte	3,5,1,5,18,1,9
	.half	.L544-.L543
	.byte	3,1,1,5,13,9
	.half	.L545-.L544
	.byte	3,9,1,5,18,9
	.half	.L546-.L545
	.byte	1,9
	.half	.L547-.L546
	.byte	3,7,1,9
	.half	.L548-.L547
	.byte	3,3,1,9
	.half	.L549-.L548
	.byte	3,5,1,5,20,9
	.half	.L550-.L549
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L551-.L550
	.byte	3,5,1,5,18,1,9
	.half	.L552-.L551
	.byte	3,1,1,5,14,9
	.half	.L553-.L552
	.byte	3,9,1,5,18,9
	.half	.L554-.L553
	.byte	1,9
	.half	.L555-.L554
	.byte	3,5,1,5,19,9
	.half	.L556-.L555
	.byte	3,3,1,5,18,9
	.half	.L557-.L556
	.byte	3,5,1,5,20,9
	.half	.L558-.L557
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L559-.L558
	.byte	3,4,1,5,18,1,9
	.half	.L560-.L559
	.byte	3,1,1,5,14,9
	.half	.L561-.L560
	.byte	3,9,1,5,18,9
	.half	.L562-.L561
	.byte	1,9
	.half	.L563-.L562
	.byte	3,5,1,5,19,9
	.half	.L564-.L563
	.byte	3,3,1,5,18,9
	.half	.L565-.L564
	.byte	3,5,1,5,20,9
	.half	.L566-.L565
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L567-.L566
	.byte	3,2,1,9
	.half	.L568-.L567
	.byte	3,1,1,9
	.half	.L569-.L568
	.byte	3,4,1,5,18,1,9
	.half	.L570-.L569
	.byte	3,1,1,5,14,9
	.half	.L571-.L570
	.byte	3,9,1,5,18,9
	.half	.L572-.L571
	.byte	1,9
	.half	.L573-.L572
	.byte	3,5,1,5,19,9
	.half	.L574-.L573
	.byte	3,3,1,5,18,9
	.half	.L575-.L574
	.byte	3,5,1,5,20,9
	.half	.L576-.L575
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L577-.L576
	.byte	3,2,1,9
	.half	.L578-.L577
	.byte	3,1,1,9
	.half	.L579-.L578
	.byte	3,4,1,5,18,1,9
	.half	.L580-.L579
	.byte	3,1,1,5,14,9
	.half	.L581-.L580
	.byte	3,9,1,5,18,9
	.half	.L582-.L581
	.byte	1,9
	.half	.L583-.L582
	.byte	3,5,1,5,19,9
	.half	.L584-.L583
	.byte	3,3,1,5,18,9
	.half	.L585-.L584
	.byte	3,5,1,5,20,9
	.half	.L586-.L585
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L587-.L586
	.byte	3,2,1,9
	.half	.L588-.L587
	.byte	3,1,1,9
	.half	.L589-.L588
	.byte	3,4,1,5,18,1,9
	.half	.L590-.L589
	.byte	3,1,1,5,14,9
	.half	.L591-.L590
	.byte	3,9,1,5,18,9
	.half	.L592-.L591
	.byte	1,9
	.half	.L593-.L592
	.byte	3,5,1,5,19,9
	.half	.L594-.L593
	.byte	3,3,1,5,18,9
	.half	.L595-.L594
	.byte	3,5,1,5,20,9
	.half	.L596-.L595
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L597-.L596
	.byte	3,2,1,9
	.half	.L598-.L597
	.byte	3,1,1,9
	.half	.L599-.L598
	.byte	3,4,1,5,18,1,9
	.half	.L600-.L599
	.byte	3,1,1,5,14,9
	.half	.L601-.L600
	.byte	3,9,1,5,18,9
	.half	.L602-.L601
	.byte	1,9
	.half	.L603-.L602
	.byte	3,5,1,5,19,9
	.half	.L604-.L603
	.byte	3,3,1,5,18,9
	.half	.L605-.L604
	.byte	3,5,1,5,20,9
	.half	.L606-.L605
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L607-.L606
	.byte	3,2,1,9
	.half	.L608-.L607
	.byte	3,1,1,9
	.half	.L609-.L608
	.byte	3,4,1,5,18,1,9
	.half	.L610-.L609
	.byte	3,1,1,5,14,9
	.half	.L611-.L610
	.byte	3,9,1,5,18,9
	.half	.L612-.L611
	.byte	1,9
	.half	.L613-.L612
	.byte	3,5,1,5,19,9
	.half	.L614-.L613
	.byte	3,3,1,5,18,9
	.half	.L615-.L614
	.byte	3,5,1,5,20,9
	.half	.L616-.L615
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L617-.L616
	.byte	3,2,1,9
	.half	.L618-.L617
	.byte	3,1,1,9
	.half	.L619-.L618
	.byte	3,4,1,5,18,1,9
	.half	.L620-.L619
	.byte	3,1,1,5,14,9
	.half	.L621-.L620
	.byte	3,9,1,5,18,9
	.half	.L622-.L621
	.byte	1,9
	.half	.L623-.L622
	.byte	3,5,1,5,19,9
	.half	.L624-.L623
	.byte	3,3,1,5,18,9
	.half	.L625-.L624
	.byte	3,5,1,5,20,9
	.half	.L626-.L625
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L627-.L626
	.byte	3,2,1,9
	.half	.L628-.L627
	.byte	3,1,1,9
	.half	.L629-.L628
	.byte	3,4,1,5,18,1,9
	.half	.L630-.L629
	.byte	3,1,1,5,14,9
	.half	.L631-.L630
	.byte	3,9,1,5,18,9
	.half	.L632-.L631
	.byte	1,9
	.half	.L633-.L632
	.byte	3,5,1,5,19,9
	.half	.L634-.L633
	.byte	3,3,1,5,18,9
	.half	.L635-.L634
	.byte	3,5,1,5,20,9
	.half	.L636-.L635
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L637-.L636
	.byte	3,2,1,9
	.half	.L638-.L637
	.byte	3,1,1,9
	.half	.L639-.L638
	.byte	3,4,1,5,18,1,9
	.half	.L640-.L639
	.byte	3,1,1,5,14,9
	.half	.L641-.L640
	.byte	3,9,1,5,18,9
	.half	.L642-.L641
	.byte	1,9
	.half	.L643-.L642
	.byte	3,5,1,5,19,9
	.half	.L644-.L643
	.byte	3,3,1,5,18,9
	.half	.L645-.L644
	.byte	3,5,1,5,20,9
	.half	.L646-.L645
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L647-.L646
	.byte	3,2,1,9
	.half	.L648-.L647
	.byte	3,1,1,9
	.half	.L649-.L648
	.byte	3,4,1,5,18,1,9
	.half	.L650-.L649
	.byte	3,1,1,5,14,9
	.half	.L651-.L650
	.byte	3,9,1,5,18,9
	.half	.L652-.L651
	.byte	1,9
	.half	.L653-.L652
	.byte	3,5,1,5,19,9
	.half	.L654-.L653
	.byte	3,3,1,5,18,9
	.half	.L655-.L654
	.byte	3,5,1,5,20,9
	.half	.L656-.L655
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L657-.L656
	.byte	3,2,1,9
	.half	.L658-.L657
	.byte	3,1,1,9
	.half	.L659-.L658
	.byte	3,4,1,5,18,1,9
	.half	.L660-.L659
	.byte	3,1,1,5,14,9
	.half	.L661-.L660
	.byte	3,9,1,5,18,9
	.half	.L662-.L661
	.byte	1,9
	.half	.L663-.L662
	.byte	3,5,1,5,19,9
	.half	.L664-.L663
	.byte	3,3,1,5,18,9
	.half	.L665-.L664
	.byte	3,5,1,5,20,9
	.half	.L666-.L665
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L667-.L666
	.byte	3,2,1,9
	.half	.L668-.L667
	.byte	3,1,1,9
	.half	.L669-.L668
	.byte	3,4,1,5,18,1,9
	.half	.L670-.L669
	.byte	3,1,1,5,14,9
	.half	.L671-.L670
	.byte	3,9,1,5,18,9
	.half	.L672-.L671
	.byte	1,9
	.half	.L673-.L672
	.byte	3,5,1,5,19,9
	.half	.L674-.L673
	.byte	3,3,1,5,18,9
	.half	.L675-.L674
	.byte	3,5,1,5,20,9
	.half	.L676-.L675
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L677-.L676
	.byte	3,2,1,9
	.half	.L678-.L677
	.byte	3,1,1,9
	.half	.L679-.L678
	.byte	3,4,1,5,18,1,9
	.half	.L680-.L679
	.byte	3,1,1,5,14,9
	.half	.L681-.L680
	.byte	3,9,1,5,18,9
	.half	.L682-.L681
	.byte	1,9
	.half	.L683-.L682
	.byte	3,5,1,5,19,9
	.half	.L684-.L683
	.byte	3,3,1,5,18,9
	.half	.L685-.L684
	.byte	3,5,1,5,20,9
	.half	.L686-.L685
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L687-.L686
	.byte	3,2,1,9
	.half	.L688-.L687
	.byte	3,1,1,9
	.half	.L689-.L688
	.byte	3,4,1,5,18,1,9
	.half	.L690-.L689
	.byte	3,1,1,5,14,9
	.half	.L691-.L690
	.byte	3,9,1,5,18,9
	.half	.L692-.L691
	.byte	1,9
	.half	.L693-.L692
	.byte	3,5,1,5,19,9
	.half	.L694-.L693
	.byte	3,3,1,5,18,9
	.half	.L695-.L694
	.byte	3,5,1,5,20,9
	.half	.L696-.L695
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L697-.L696
	.byte	3,2,1,9
	.half	.L698-.L697
	.byte	3,1,1,9
	.half	.L699-.L698
	.byte	3,4,1,5,18,1,9
	.half	.L700-.L699
	.byte	3,1,1,5,14,9
	.half	.L701-.L700
	.byte	3,9,1,5,18,9
	.half	.L702-.L701
	.byte	1,9
	.half	.L703-.L702
	.byte	3,5,1,5,19,9
	.half	.L704-.L703
	.byte	3,3,1,5,18,9
	.half	.L705-.L704
	.byte	3,5,1,5,20,9
	.half	.L706-.L705
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L707-.L706
	.byte	3,2,1,9
	.half	.L708-.L707
	.byte	3,1,1,9
	.half	.L709-.L708
	.byte	3,4,1,5,18,1,9
	.half	.L710-.L709
	.byte	3,1,1,5,14,9
	.half	.L711-.L710
	.byte	3,9,1,5,18,9
	.half	.L712-.L711
	.byte	1,9
	.half	.L713-.L712
	.byte	3,5,1,5,19,9
	.half	.L714-.L713
	.byte	3,3,1,5,18,9
	.half	.L715-.L714
	.byte	3,5,1,5,20,9
	.half	.L716-.L715
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L717-.L716
	.byte	3,2,1,9
	.half	.L718-.L717
	.byte	3,1,1,9
	.half	.L719-.L718
	.byte	3,4,1,5,18,1,9
	.half	.L720-.L719
	.byte	3,1,1,5,14,9
	.half	.L721-.L720
	.byte	3,9,1,5,18,9
	.half	.L722-.L721
	.byte	1,9
	.half	.L723-.L722
	.byte	3,5,1,5,19,9
	.half	.L724-.L723
	.byte	3,3,1,5,18,9
	.half	.L725-.L724
	.byte	3,5,1,5,20,9
	.half	.L726-.L725
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L727-.L726
	.byte	3,2,1,9
	.half	.L728-.L727
	.byte	3,1,1,9
	.half	.L729-.L728
	.byte	3,4,1,5,18,1,9
	.half	.L730-.L729
	.byte	3,1,1,5,14,9
	.half	.L731-.L730
	.byte	3,9,1,5,18,9
	.half	.L732-.L731
	.byte	1,9
	.half	.L733-.L732
	.byte	3,5,1,5,19,9
	.half	.L734-.L733
	.byte	3,3,1,5,18,9
	.half	.L735-.L734
	.byte	3,5,1,5,20,9
	.half	.L736-.L735
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L737-.L736
	.byte	3,2,1,9
	.half	.L738-.L737
	.byte	3,1,1,9
	.half	.L739-.L738
	.byte	3,4,1,5,18,1,9
	.half	.L740-.L739
	.byte	3,1,1,5,14,9
	.half	.L741-.L740
	.byte	3,9,1,5,18,9
	.half	.L742-.L741
	.byte	1,9
	.half	.L743-.L742
	.byte	3,7,1,5,19,9
	.half	.L744-.L743
	.byte	3,3,1,5,18,9
	.half	.L745-.L744
	.byte	3,5,1,5,20,9
	.half	.L746-.L745
	.byte	3,7,1,5,18,1,5,20,9
	.half	.L747-.L746
	.byte	3,5,1,5,18,1,9
	.half	.L748-.L747
	.byte	3,1,1,5,20,9
	.half	.L749-.L748
	.byte	3,146,3,1,5,18,1,5,20,9
	.half	.L750-.L749
	.byte	3,6,1,5,18,1,5,20,9
	.half	.L751-.L750
	.byte	3,6,1,5,18,1,5,20,9
	.half	.L752-.L751
	.byte	3,6,1,5,18,1,5,20,9
	.half	.L753-.L752
	.byte	3,6,1,5,18,1,5,20,9
	.half	.L754-.L753
	.byte	3,6,1,5,18,1,5,20,9
	.half	.L755-.L754
	.byte	3,6,1,5,18,1,5,20,9
	.half	.L756-.L755
	.byte	3,6,1,5,18,1,5,20,9
	.half	.L757-.L756
	.byte	3,6,1,5,18,1,5,20,9
	.half	.L758-.L757
	.byte	3,6,1,5,18,1,5,5,9
	.half	.L759-.L758
	.byte	3,8,1,9
	.half	.L760-.L759
	.byte	3,1,1,5,22,9
	.half	.L761-.L760
	.byte	3,125,1,5,37,9
	.half	.L35-.L761
	.byte	3,2,1,5,27,1,5,36,9
	.half	.L762-.L35
	.byte	1,5,39,9
	.half	.L763-.L762
	.byte	1,5,25,9
	.half	.L764-.L763
	.byte	3,126,1,5,39,3,2,1,5,24,9
	.half	.L765-.L764
	.byte	1,5,39,9
	.half	.L766-.L765
	.byte	3,1,1,5,24,9
	.half	.L767-.L766
	.byte	1,5,22,9
	.half	.L768-.L767
	.byte	3,125,1,5,20,7,9
	.half	.L769-.L768
	.byte	3,9,1,5,11,1,5,17,9
	.half	.L770-.L769
	.byte	1,5,1,9
	.half	.L771-.L770
	.byte	3,7,1,7,9
	.half	.L190-.L771
	.byte	0,1,1
.L412:
	.sdecl	'.debug_ranges',debug,cluster('CAN_vInit')
	.sect	'.debug_ranges'
.L189:
	.word	-1,.L137,0,.L190-.L137,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_vGetMsgObj')
	.sect	'.debug_info'
.L191:
	.word	262
	.half	3
	.word	.L192
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L194,.L193
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_vGetMsgObj',0,1,250,14,6,1,1,1
	.word	.L139,.L308,.L138
	.byte	4
	.byte	'ubObjNr',0,1,250,14,27
	.word	.L306,.L309
	.byte	4
	.byte	'pstObj',0,1,250,14,47
	.word	.L310,.L311
	.byte	5
	.word	.L139,.L308
	.byte	6
	.byte	'i',0,1,252,14,9
	.word	.L306,.L312
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_vGetMsgObj')
	.sect	'.debug_abbrev'
.L192:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_vGetMsgObj')
	.sect	'.debug_line'
.L193:
	.word	.L773-.L772
.L772:
	.half	3
	.word	.L775-.L774
.L774:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L775:
	.byte	5,33,7,0,5,2
	.word	.L139
	.byte	3,254,14,1,5,23,1,5,32,9
	.half	.L369-.L139
	.byte	1,5,41,9
	.half	.L776-.L369
	.byte	1,5,64,9
	.half	.L777-.L776
	.byte	1,5,50,9
	.half	.L778-.L777
	.byte	1,5,20,1,5,9,9
	.half	.L779-.L778
	.byte	3,1,1,5,33,9
	.half	.L370-.L779
	.byte	1,5,19,9
	.half	.L37-.L370
	.byte	3,2,1,5,50,9
	.half	.L780-.L37
	.byte	1,5,36,9
	.half	.L781-.L780
	.byte	3,126,1,5,50,3,2,1,5,36,9
	.half	.L371-.L781
	.byte	3,126,1,5,23,3,2,1,5,24,9
	.half	.L36-.L371
	.byte	3,126,1,5,33,9
	.half	.L782-.L36
	.byte	1,5,39,7,9
	.half	.L783-.L782
	.byte	3,5,1,5,20,1,5,24,9
	.half	.L784-.L783
	.byte	3,1,1,5,3,9
	.half	.L372-.L784
	.byte	1,5,30,7,9
	.half	.L785-.L372
	.byte	3,2,1,5,40,9
	.half	.L786-.L785
	.byte	1,5,22,1,5,42,9
	.half	.L38-.L786
	.byte	3,6,1,5,24,9
	.half	.L787-.L38
	.byte	3,125,1,5,3,9
	.half	.L788-.L787
	.byte	1,5,42,7,9
	.half	.L789-.L788
	.byte	3,2,1,5,50,9
	.half	.L790-.L789
	.byte	1,5,22,1,5,42,9
	.half	.L791-.L790
	.byte	3,1,1,5,51,9
	.half	.L792-.L791
	.byte	1,5,22,1,5,30,9
	.half	.L793-.L792
	.byte	3,1,1,5,40,9
	.half	.L794-.L793
	.byte	1,5,22,1,5,62,9
	.half	.L795-.L794
	.byte	3,126,1,5,41,9
	.half	.L39-.L795
	.byte	3,6,1,5,49,9
	.half	.L796-.L39
	.byte	1,5,20,1,5,41,9
	.half	.L797-.L796
	.byte	3,1,1,5,50,9
	.half	.L798-.L797
	.byte	1,5,20,1,5,42,9
	.half	.L40-.L798
	.byte	3,3,1,5,65,9
	.half	.L799-.L40
	.byte	1,5,21,1,5,1,9
	.half	.L800-.L799
	.byte	3,2,1,7,9
	.half	.L195-.L800
	.byte	0,1,1
.L773:
	.sdecl	'.debug_ranges',debug,cluster('CAN_vGetMsgObj')
	.sect	'.debug_ranges'
.L194:
	.word	-1,.L139,0,.L195-.L139,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_ubRequestMsgObj')
	.sect	'.debug_info'
.L196:
	.word	258
	.half	3
	.word	.L197
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L199,.L198
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_ubRequestMsgObj',0,1,189,15,7
	.word	.L306
	.byte	1,1,1
	.word	.L141,.L313,.L140
	.byte	4
	.byte	'ubObjNr',0,1,189,15,33
	.word	.L306,.L314
	.byte	5
	.word	.L141,.L313
	.byte	6
	.byte	'ubReturn',0,1,191,15,9
	.word	.L306,.L315
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_ubRequestMsgObj')
	.sect	'.debug_abbrev'
.L197:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_ubRequestMsgObj')
	.sect	'.debug_line'
.L198:
	.word	.L802-.L801
.L801:
	.half	3
	.word	.L804-.L803
.L803:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L804:
	.byte	5,17,7,0,5,2
	.word	.L141
	.byte	3,193,15,1,5,7,1,5,16,9
	.half	.L373-.L141
	.byte	1,5,25,9
	.half	.L805-.L373
	.byte	1,5,12,9
	.half	.L806-.L805
	.byte	3,127,1,5,25,3,1,1,5,3,9
	.half	.L374-.L806
	.byte	1,5,34,7,9
	.half	.L807-.L374
	.byte	3,2,1,5,32,1,5,14,9
	.half	.L808-.L807
	.byte	3,1,1,5,1,9
	.half	.L41-.L808
	.byte	3,4,1,7,9
	.half	.L200-.L41
	.byte	0,1,1
.L802:
	.sdecl	'.debug_ranges',debug,cluster('CAN_ubRequestMsgObj')
	.sect	'.debug_ranges'
.L199:
	.word	-1,.L141,0,.L200-.L141,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_ubNewData')
	.sect	'.debug_info'
.L201:
	.word	252
	.half	3
	.word	.L202
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L204,.L203
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_ubNewData',0,1,228,15,7
	.word	.L306
	.byte	1,1,1
	.word	.L143,.L316,.L142
	.byte	4
	.byte	'ubObjNr',0,1,228,15,27
	.word	.L306,.L317
	.byte	5
	.word	.L143,.L316
	.byte	6
	.byte	'ubReturn',0,1,230,15,9
	.word	.L306,.L318
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_ubNewData')
	.sect	'.debug_abbrev'
.L202:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_ubNewData')
	.sect	'.debug_line'
.L203:
	.word	.L810-.L809
.L809:
	.half	3
	.word	.L812-.L811
.L811:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L812:
	.byte	5,17,7,0,5,2
	.word	.L143
	.byte	3,232,15,1,5,7,1,5,16,9
	.half	.L375-.L143
	.byte	1,5,25,9
	.half	.L813-.L375
	.byte	1,5,12,9
	.half	.L814-.L813
	.byte	3,127,1,5,25,3,1,1,5,3,9
	.half	.L376-.L814
	.byte	1,5,14,7,9
	.half	.L815-.L376
	.byte	3,2,1,5,1,9
	.half	.L43-.L815
	.byte	3,4,1,7,9
	.half	.L205-.L43
	.byte	0,1,1
.L810:
	.sdecl	'.debug_ranges',debug,cluster('CAN_ubNewData')
	.sect	'.debug_ranges'
.L204:
	.word	-1,.L143,0,.L205-.L143,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_vTransmit')
	.sect	'.debug_info'
.L206:
	.word	225
	.half	3
	.word	.L207
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L209,.L208
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_vTransmit',0,1,141,16,6,1,1,1
	.word	.L145,.L319,.L144
	.byte	4
	.byte	'ubObjNr',0,1,141,16,26
	.word	.L306,.L320
	.byte	5
	.word	.L145,.L319
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_vTransmit')
	.sect	'.debug_abbrev'
.L207:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_vTransmit')
	.sect	'.debug_line'
.L208:
	.word	.L817-.L816
.L816:
	.half	3
	.word	.L819-.L818
.L818:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L819:
	.byte	5,13,7,0,5,2
	.word	.L145
	.byte	3,142,16,1,5,3,1,5,12,9
	.half	.L377-.L145
	.byte	1,5,21,9
	.half	.L820-.L377
	.byte	1,5,32,9
	.half	.L821-.L820
	.byte	1,5,30,1,5,1,9
	.half	.L822-.L821
	.byte	3,2,1,7,9
	.half	.L210-.L822
	.byte	0,1,1
.L817:
	.sdecl	'.debug_ranges',debug,cluster('CAN_vTransmit')
	.sect	'.debug_ranges'
.L209:
	.word	-1,.L145,0,.L210-.L145,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_vConfigMsgObj')
	.sect	'.debug_info'
.L211:
	.word	265
	.half	3
	.word	.L212
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L214,.L213
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_vConfigMsgObj',0,1,182,16,6,1,1,1
	.word	.L147,.L321,.L146
	.byte	4
	.byte	'ubObjNr',0,1,182,16,30
	.word	.L306,.L322
	.byte	4
	.byte	'pstObj',0,1,182,16,50
	.word	.L310,.L323
	.byte	5
	.word	.L147,.L321
	.byte	6
	.byte	'i',0,1,184,16,9
	.word	.L306,.L324
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_vConfigMsgObj')
	.sect	'.debug_abbrev'
.L212:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_vConfigMsgObj')
	.sect	'.debug_line'
.L213:
	.word	.L824-.L823
.L823:
	.half	3
	.word	.L826-.L825
.L825:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L826:
	.byte	5,13,7,0,5,2
	.word	.L147
	.byte	3,185,16,1,5,3,1,5,12,9
	.half	.L378-.L147
	.byte	1,5,32,9
	.half	.L827-.L378
	.byte	1,5,21,1,5,30,9
	.half	.L828-.L827
	.byte	1,5,12,9
	.half	.L829-.L828
	.byte	3,2,1,5,23,9
	.half	.L830-.L829
	.byte	3,2,1,9
	.half	.L831-.L830
	.byte	3,2,1,5,3,9
	.half	.L832-.L831
	.byte	3,124,1,5,23,7,9
	.half	.L833-.L832
	.byte	3,2,1,5,32,9
	.half	.L834-.L833
	.byte	1,5,54,9
	.half	.L835-.L834
	.byte	3,1,1,5,46,9
	.half	.L836-.L835
	.byte	1,5,23,1,5,32,9
	.half	.L837-.L836
	.byte	1,5,23,9
	.half	.L838-.L837
	.byte	3,1,1,5,32,9
	.half	.L839-.L838
	.byte	1,5,23,9
	.half	.L840-.L839
	.byte	3,1,1,5,41,9
	.half	.L841-.L840
	.byte	1,5,46,9
	.half	.L842-.L841
	.byte	3,125,1,5,23,9
	.half	.L45-.L842
	.byte	3,7,1,5,32,9
	.half	.L843-.L45
	.byte	1,5,41,9
	.half	.L844-.L843
	.byte	3,1,1,5,48,9
	.half	.L845-.L844
	.byte	1,5,23,1,5,32,9
	.half	.L846-.L845
	.byte	1,5,23,9
	.half	.L847-.L846
	.byte	3,1,1,5,32,9
	.half	.L848-.L847
	.byte	1,5,41,9
	.half	.L849-.L848
	.byte	3,1,1,5,50,9
	.half	.L850-.L849
	.byte	1,5,23,1,5,32,9
	.half	.L46-.L850
	.byte	1,5,21,9
	.half	.L851-.L46
	.byte	3,3,1,5,30,9
	.half	.L852-.L851
	.byte	1,5,39,9
	.half	.L853-.L852
	.byte	3,1,1,5,51,9
	.half	.L854-.L853
	.byte	1,5,21,1,5,30,9
	.half	.L855-.L854
	.byte	1,5,52,9
	.half	.L856-.L855
	.byte	3,2,1,5,61,9
	.half	.L857-.L856
	.byte	1,5,86,1,5,96,9
	.half	.L858-.L857
	.byte	1,5,106,9
	.half	.L859-.L858
	.byte	1,5,31,9
	.half	.L860-.L859
	.byte	1,5,24,9
	.half	.L861-.L860
	.byte	3,2,1,5,3,9
	.half	.L862-.L861
	.byte	1,5,11,7,9
	.half	.L863-.L862
	.byte	3,2,1,5,51,9
	.half	.L379-.L863
	.byte	1,5,32,9
	.half	.L49-.L379
	.byte	3,2,1,5,52,9
	.half	.L864-.L49
	.byte	1,5,54,9
	.half	.L865-.L864
	.byte	3,126,1,5,52,3,2,1,5,54,9
	.half	.L380-.L865
	.byte	3,126,1,5,36,3,2,1,5,27,9
	.half	.L48-.L380
	.byte	3,126,1,5,37,9
	.half	.L866-.L48
	.byte	1,5,47,9
	.half	.L867-.L866
	.byte	1,5,51,9
	.half	.L868-.L867
	.byte	1,5,35,7,9
	.half	.L869-.L868
	.byte	3,4,1,5,45,9
	.half	.L381-.L869
	.byte	1,5,35,9
	.half	.L47-.L381
	.byte	3,4,1,5,33,9
	.half	.L50-.L47
	.byte	1,5,1,9
	.half	.L870-.L50
	.byte	3,3,1,7,9
	.half	.L215-.L870
	.byte	0,1,1
.L824:
	.sdecl	'.debug_ranges',debug,cluster('CAN_vConfigMsgObj')
	.sect	'.debug_ranges'
.L214:
	.word	-1,.L147,0,.L215-.L147,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_vLoadData')
	.sect	'.debug_info'
.L216:
	.word	262
	.half	3
	.word	.L217
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L219,.L218
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_vLoadData',0,1,253,16,6,1,1,1
	.word	.L149,.L325,.L148
	.byte	4
	.byte	'ubObjNr',0,1,253,16,26
	.word	.L306,.L326
	.byte	4
	.byte	'pubData',0,1,253,16,42
	.word	.L327,.L328
	.byte	5
	.word	.L149,.L325
	.byte	6
	.byte	'i',0,1,255,16,9
	.word	.L306,.L329
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_vLoadData')
	.sect	'.debug_abbrev'
.L217:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,52,0,3
	.byte	8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_vLoadData')
	.sect	'.debug_line'
.L218:
	.word	.L872-.L871
.L871:
	.half	3
	.word	.L874-.L873
.L873:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L874:
	.byte	5,13,7,0,5,2
	.word	.L149
	.byte	3,128,17,1,5,3,1,5,12,9
	.half	.L382-.L149
	.byte	1,5,32,9
	.half	.L875-.L382
	.byte	1,5,21,1,5,46,9
	.half	.L876-.L875
	.byte	3,2,1,5,30,3,126,1,5,9,9
	.half	.L877-.L876
	.byte	3,2,1,5,37,1,5,46,9
	.half	.L383-.L877
	.byte	1,5,65,9
	.half	.L878-.L383
	.byte	1,5,30,7,9
	.half	.L52-.L878
	.byte	3,2,1,5,68,9
	.half	.L879-.L52
	.byte	3,126,1,5,36,3,2,1,5,34,9
	.half	.L384-.L879
	.byte	1,5,68,9
	.half	.L880-.L384
	.byte	3,126,1,5,37,1,5,46,9
	.half	.L385-.L880
	.byte	1,5,65,9
	.half	.L881-.L385
	.byte	1,5,32,7,9
	.half	.L51-.L881
	.byte	3,5,1,5,30,9
	.half	.L386-.L51
	.byte	1,5,1,9
	.half	.L882-.L386
	.byte	3,2,1,7,9
	.half	.L220-.L882
	.byte	0,1,1
.L872:
	.sdecl	'.debug_ranges',debug,cluster('CAN_vLoadData')
	.sect	'.debug_ranges'
.L219:
	.word	-1,.L149,0,.L220-.L149,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_ubMsgLost')
	.sect	'.debug_info'
.L221:
	.word	252
	.half	3
	.word	.L222
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L224,.L223
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_ubMsgLost',0,1,169,17,7
	.word	.L306
	.byte	1,1,1
	.word	.L151,.L330,.L150
	.byte	4
	.byte	'ubObjNr',0,1,169,17,27
	.word	.L306,.L331
	.byte	5
	.word	.L151,.L330
	.byte	6
	.byte	'ubReturn',0,1,171,17,9
	.word	.L306,.L332
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_ubMsgLost')
	.sect	'.debug_abbrev'
.L222:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_ubMsgLost')
	.sect	'.debug_line'
.L223:
	.word	.L884-.L883
.L883:
	.half	3
	.word	.L886-.L885
.L885:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L886:
	.byte	5,16,7,0,5,2
	.word	.L151
	.byte	3,173,17,1,5,6,1,5,15,9
	.half	.L387-.L151
	.byte	1,5,24,9
	.half	.L887-.L387
	.byte	1,5,12,9
	.half	.L888-.L887
	.byte	3,127,1,5,24,3,1,1,5,3,9
	.half	.L388-.L888
	.byte	1,5,34,7,9
	.half	.L889-.L388
	.byte	3,2,1,5,32,1,5,14,9
	.half	.L890-.L889
	.byte	3,1,1,5,1,9
	.half	.L53-.L890
	.byte	3,4,1,7,9
	.half	.L225-.L53
	.byte	0,1,1
.L884:
	.sdecl	'.debug_ranges',debug,cluster('CAN_ubMsgLost')
	.sect	'.debug_ranges'
.L224:
	.word	-1,.L151,0,.L225-.L151,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_ubDelMsgObj')
	.sect	'.debug_info'
.L226:
	.word	254
	.half	3
	.word	.L227
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L229,.L228
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_ubDelMsgObj',0,1,211,17,7
	.word	.L306
	.byte	1,1,1
	.word	.L153,.L333,.L152
	.byte	4
	.byte	'ubObjNr',0,1,211,17,29
	.word	.L306,.L334
	.byte	5
	.word	.L153,.L333
	.byte	6
	.byte	'ubReturn',0,1,213,17,9
	.word	.L306,.L335
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_ubDelMsgObj')
	.sect	'.debug_abbrev'
.L227:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_ubDelMsgObj')
	.sect	'.debug_line'
.L228:
	.word	.L892-.L891
.L891:
	.half	3
	.word	.L894-.L893
.L893:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L894:
	.byte	5,12,7,0,5,2
	.word	.L153
	.byte	3,214,17,1,5,8,3,1,1,5,18,9
	.half	.L390-.L153
	.byte	1,5,17,9
	.half	.L389-.L390
	.byte	1,5,26,9
	.half	.L895-.L389
	.byte	1,5,35,9
	.half	.L896-.L895
	.byte	1,5,7,9
	.half	.L897-.L896
	.byte	1,5,34,7,9
	.half	.L898-.L897
	.byte	3,2,1,5,32,1,5,14,9
	.half	.L899-.L898
	.byte	3,1,1,5,1,9
	.half	.L55-.L899
	.byte	3,4,1,7,9
	.half	.L230-.L55
	.byte	0,1,1
.L892:
	.sdecl	'.debug_ranges',debug,cluster('CAN_ubDelMsgObj')
	.sect	'.debug_ranges'
.L229:
	.word	-1,.L153,0,.L230-.L153,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_vReleaseObj')
	.sect	'.debug_info'
.L231:
	.word	227
	.half	3
	.word	.L232
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L234,.L233
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_vReleaseObj',0,1,253,17,6,1,1,1
	.word	.L155,.L336,.L154
	.byte	4
	.byte	'ubObjNr',0,1,253,17,28
	.word	.L306,.L337
	.byte	5
	.word	.L155,.L336
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_vReleaseObj')
	.sect	'.debug_abbrev'
.L232:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_vReleaseObj')
	.sect	'.debug_line'
.L233:
	.word	.L901-.L900
.L900:
	.half	3
	.word	.L903-.L902
.L902:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L903:
	.byte	5,13,7,0,5,2
	.word	.L155
	.byte	3,254,17,1,5,3,1,5,12,9
	.half	.L391-.L155
	.byte	1,5,21,9
	.half	.L904-.L391
	.byte	1,5,32,9
	.half	.L905-.L904
	.byte	1,5,30,1,5,1,9
	.half	.L906-.L905
	.byte	3,2,1,7,9
	.half	.L235-.L906
	.byte	0,1,1
.L901:
	.sdecl	'.debug_ranges',debug,cluster('CAN_vReleaseObj')
	.sect	'.debug_ranges'
.L234:
	.word	-1,.L155,0,.L235-.L155,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_vSetMSGVAL')
	.sect	'.debug_info'
.L236:
	.word	226
	.half	3
	.word	.L237
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L239,.L238
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_vSetMSGVAL',0,1,158,18,6,1,1,1
	.word	.L157,.L338,.L156
	.byte	4
	.byte	'ubObjNr',0,1,158,18,27
	.word	.L306,.L339
	.byte	5
	.word	.L157,.L338
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_vSetMSGVAL')
	.sect	'.debug_abbrev'
.L237:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_vSetMSGVAL')
	.sect	'.debug_line'
.L238:
	.word	.L908-.L907
.L907:
	.half	3
	.word	.L910-.L909
.L909:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L910:
	.byte	5,13,7,0,5,2
	.word	.L157
	.byte	3,159,18,1,5,3,1,5,12,9
	.half	.L392-.L157
	.byte	1,5,21,9
	.half	.L911-.L392
	.byte	1,5,32,9
	.half	.L912-.L911
	.byte	1,5,30,1,5,1,9
	.half	.L913-.L912
	.byte	3,2,1,7,9
	.half	.L240-.L913
	.byte	0,1,1
.L908:
	.sdecl	'.debug_ranges',debug,cluster('CAN_vSetMSGVAL')
	.sect	'.debug_ranges'
.L239:
	.word	-1,.L157,0,.L240-.L157,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_ubWriteFIFO')
	.sect	'.debug_info'
.L241:
	.word	304
	.half	3
	.word	.L242
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L244,.L243
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_ubWriteFIFO',0,1,203,18,7
	.word	.L306
	.byte	1,1,1
	.word	.L159,.L340,.L158
	.byte	4
	.byte	'ubObjNr',0,1,203,18,29
	.word	.L306,.L341
	.byte	4
	.byte	'pstObj',0,1,203,18,49
	.word	.L310,.L342
	.byte	5
	.word	.L159,.L340
	.byte	6
	.byte	'i',0,1,205,18,9
	.word	.L306,.L343
	.byte	6
	.byte	'j',0,1,205,18,11
	.word	.L306,.L344
	.byte	6
	.byte	'ubReturn',0,1,206,18,9
	.word	.L306,.L345
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_ubWriteFIFO')
	.sect	'.debug_abbrev'
.L242:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_ubWriteFIFO')
	.sect	'.debug_line'
.L243:
	.word	.L915-.L914
.L914:
	.half	3
	.word	.L917-.L916
.L916:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L917:
	.byte	5,12,7,0,5,2
	.word	.L159
	.byte	3,207,18,1,5,7,3,2,1,5,17,9
	.half	.L918-.L159
	.byte	1,5,16,9
	.half	.L919-.L918
	.byte	1,5,25,9
	.half	.L920-.L919
	.byte	1,5,34,9
	.half	.L921-.L920
	.byte	1,5,3,9
	.half	.L922-.L921
	.byte	1,5,9,7,9
	.half	.L923-.L922
	.byte	3,2,1,5,24,9
	.half	.L924-.L923
	.byte	1,5,19,9
	.half	.L394-.L924
	.byte	3,3,1,5,18,9
	.half	.L925-.L394
	.byte	1,5,21,9
	.half	.L926-.L925
	.byte	1,5,14,9
	.half	.L927-.L926
	.byte	3,127,1,5,21,3,1,1,5,5,9
	.half	.L928-.L927
	.byte	1,5,28,7,9
	.half	.L929-.L928
	.byte	3,2,1,5,51,9
	.half	.L930-.L929
	.byte	1,5,7,9
	.half	.L931-.L930
	.byte	1,5,55,7,9
	.half	.L932-.L931
	.byte	3,3,1,5,78,9
	.half	.L933-.L932
	.byte	1,5,49,9
	.half	.L59-.L933
	.byte	3,5,1,5,72,9
	.half	.L934-.L59
	.byte	1,5,34,9
	.half	.L60-.L934
	.byte	1,5,30,9
	.half	.L935-.L60
	.byte	3,3,1,5,28,1,5,22,9
	.half	.L936-.L935
	.byte	3,2,1,5,7,9
	.half	.L937-.L936
	.byte	1,5,21,7,9
	.half	.L938-.L937
	.byte	3,2,1,5,30,9
	.half	.L939-.L938
	.byte	1,5,52,9
	.half	.L940-.L939
	.byte	3,1,1,5,44,9
	.half	.L395-.L940
	.byte	1,5,21,1,5,44,9
	.half	.L941-.L395
	.byte	3,127,1,5,21,9
	.half	.L61-.L941
	.byte	3,5,1,5,30,9
	.half	.L942-.L61
	.byte	1,5,39,9
	.half	.L943-.L942
	.byte	3,1,1,5,46,9
	.half	.L396-.L943
	.byte	1,5,21,1,5,30,9
	.half	.L62-.L396
	.byte	1,5,44,9
	.half	.L944-.L62
	.byte	3,3,1,5,53,9
	.half	.L945-.L944
	.byte	1,5,78,1,5,88,9
	.half	.L946-.L945
	.byte	1,5,98,9
	.half	.L947-.L946
	.byte	1,5,29,9
	.half	.L948-.L947
	.byte	1,5,13,9
	.half	.L949-.L948
	.byte	3,2,1,5,53,9
	.half	.L397-.L949
	.byte	1,5,28,9
	.half	.L64-.L397
	.byte	3,2,1,5,48,9
	.half	.L950-.L64
	.byte	1,5,56,9
	.half	.L951-.L950
	.byte	3,126,1,5,48,3,2,1,5,56,9
	.half	.L398-.L951
	.byte	3,126,1,5,32,3,2,1,5,29,9
	.half	.L63-.L398
	.byte	3,126,1,5,39,9
	.half	.L952-.L63
	.byte	1,5,49,9
	.half	.L953-.L952
	.byte	1,5,53,9
	.half	.L954-.L953
	.byte	1,5,31,7,9
	.half	.L955-.L954
	.byte	3,4,1,5,29,1,5,16,9
	.half	.L399-.L955
	.byte	3,2,1,5,1,9
	.half	.L57-.L399
	.byte	3,5,1,7,9
	.half	.L245-.L57
	.byte	0,1,1
.L915:
	.sdecl	'.debug_ranges',debug,cluster('CAN_ubWriteFIFO')
	.sect	'.debug_ranges'
.L244:
	.word	-1,.L159,0,.L245-.L159,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_ubReadFIFO')
	.sect	'.debug_info'
.L246:
	.word	303
	.half	3
	.word	.L247
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L249,.L248
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_ubReadFIFO',0,1,166,19,7
	.word	.L306
	.byte	1,1,1
	.word	.L161,.L346,.L160
	.byte	4
	.byte	'ubObjNr',0,1,166,19,28
	.word	.L306,.L347
	.byte	4
	.byte	'pstObj',0,1,166,19,48
	.word	.L310,.L348
	.byte	5
	.word	.L161,.L346
	.byte	6
	.byte	'i',0,1,168,19,9
	.word	.L306,.L349
	.byte	6
	.byte	'j',0,1,168,19,11
	.word	.L306,.L350
	.byte	6
	.byte	'ubReturn',0,1,169,19,9
	.word	.L306,.L351
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_ubReadFIFO')
	.sect	'.debug_abbrev'
.L247:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,73,16
	.byte	54,15,39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6
	.byte	52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_ubReadFIFO')
	.sect	'.debug_line'
.L248:
	.word	.L957-.L956
.L956:
	.half	3
	.word	.L959-.L958
.L958:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L959:
	.byte	5,12,7,0,5,2
	.word	.L161
	.byte	3,170,19,1,5,7,3,2,1,5,17,9
	.half	.L960-.L161
	.byte	1,5,16,9
	.half	.L961-.L960
	.byte	1,5,25,9
	.half	.L962-.L961
	.byte	1,5,34,9
	.half	.L963-.L962
	.byte	1,5,3,9
	.half	.L964-.L963
	.byte	1,5,9,7,9
	.half	.L965-.L964
	.byte	3,2,1,5,23,9
	.half	.L966-.L965
	.byte	1,5,18,9
	.half	.L401-.L966
	.byte	3,3,1,5,17,9
	.half	.L967-.L401
	.byte	1,5,20,9
	.half	.L968-.L967
	.byte	1,5,14,9
	.half	.L969-.L968
	.byte	3,127,1,5,20,3,1,1,5,5,9
	.half	.L970-.L969
	.byte	1,5,30,7,9
	.half	.L971-.L970
	.byte	3,2,1,5,28,1,9
	.half	.L972-.L971
	.byte	3,2,1,5,51,9
	.half	.L973-.L972
	.byte	1,5,7,9
	.half	.L974-.L973
	.byte	1,5,54,7,9
	.half	.L975-.L974
	.byte	3,3,1,5,77,9
	.half	.L976-.L975
	.byte	1,5,48,9
	.half	.L68-.L976
	.byte	3,5,1,5,71,9
	.half	.L977-.L68
	.byte	1,5,33,9
	.half	.L69-.L977
	.byte	1,5,22,9
	.half	.L978-.L69
	.byte	3,4,1,5,7,9
	.half	.L979-.L978
	.byte	1,5,32,7,9
	.half	.L980-.L979
	.byte	3,2,1,5,30,1,5,16,9
	.half	.L981-.L980
	.byte	3,1,1,5,1,9
	.half	.L66-.L981
	.byte	3,38,1,5,39,7,9
	.half	.L70-.L66
	.byte	3,93,1,5,62,9
	.half	.L982-.L70
	.byte	1,5,48,9
	.half	.L983-.L982
	.byte	1,5,24,1,5,13,9
	.half	.L984-.L983
	.byte	3,1,1,5,37,9
	.half	.L403-.L984
	.byte	1,5,23,9
	.half	.L73-.L403
	.byte	3,2,1,5,48,9
	.half	.L985-.L73
	.byte	1,5,40,9
	.half	.L986-.L985
	.byte	3,126,1,5,48,3,2,1,5,40,9
	.half	.L404-.L986
	.byte	3,126,1,5,27,3,2,1,5,28,9
	.half	.L72-.L404
	.byte	3,126,1,5,37,9
	.half	.L987-.L72
	.byte	1,5,43,7,9
	.half	.L988-.L987
	.byte	3,5,1,5,24,1,5,22,9
	.half	.L989-.L988
	.byte	3,1,1,5,7,9
	.half	.L405-.L989
	.byte	1,5,34,7,9
	.half	.L990-.L405
	.byte	3,2,1,5,44,9
	.half	.L991-.L990
	.byte	1,5,26,1,5,22,9
	.half	.L74-.L991
	.byte	3,3,1,5,7,9
	.half	.L992-.L74
	.byte	1,5,40,7,9
	.half	.L993-.L992
	.byte	3,2,1,5,48,9
	.half	.L994-.L993
	.byte	1,5,26,1,5,34,9
	.half	.L995-.L994
	.byte	3,1,1,5,44,9
	.half	.L996-.L995
	.byte	1,5,26,1,5,60,9
	.half	.L997-.L996
	.byte	3,127,1,5,39,9
	.half	.L75-.L997
	.byte	3,5,1,5,47,9
	.half	.L998-.L75
	.byte	1,5,24,1,5,40,9
	.half	.L76-.L998
	.byte	3,3,1,5,63,9
	.half	.L999-.L76
	.byte	1,5,25,1,5,22,9
	.half	.L1000-.L999
	.byte	3,3,1,5,7,9
	.half	.L1001-.L1000
	.byte	1,5,32,7,9
	.half	.L1002-.L1001
	.byte	3,2,1,5,30,1,5,16,9
	.half	.L1003-.L1002
	.byte	3,1,1,5,1,9
	.half	.L402-.L1003
	.byte	3,7,1,5,16,7,9
	.half	.L77-.L402
	.byte	3,123,1,5,1,9
	.half	.L1004-.L77
	.byte	3,5,1,7,9
	.half	.L250-.L1004
	.byte	0,1,1
.L957:
	.sdecl	'.debug_ranges',debug,cluster('CAN_ubReadFIFO')
	.sect	'.debug_ranges'
.L249:
	.word	-1,.L161,0,.L250-.L161,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN0')
	.sect	'.debug_info'
.L251:
	.word	201
	.half	3
	.word	.L252
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L254,.L253
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN0',0,1,134,20,30,1,1,1
	.word	.L163,.L352,.L162
	.byte	4
	.word	.L163,.L352
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN0')
	.sect	'.debug_abbrev'
.L252:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN0')
	.sect	'.debug_line'
.L253:
	.word	.L1006-.L1005
.L1005:
	.half	3
	.word	.L1008-.L1007
.L1007:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1008:
	.byte	5,1,7,0,5,2
	.word	.L163
	.byte	3,146,20,1,7,9
	.half	.L255-.L163
	.byte	0,1,1
.L1006:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN0')
	.sect	'.debug_ranges'
.L254:
	.word	-1,.L163,0,.L255-.L163,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN1')
	.sect	'.debug_info'
.L256:
	.word	201
	.half	3
	.word	.L257
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L259,.L258
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN1',0,1,174,20,30,1,1,1
	.word	.L165,.L353,.L164
	.byte	4
	.word	.L165,.L353
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN1')
	.sect	'.debug_abbrev'
.L257:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN1')
	.sect	'.debug_line'
.L258:
	.word	.L1010-.L1009
.L1009:
	.half	3
	.word	.L1012-.L1011
.L1011:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1012:
	.byte	5,1,7,0,5,2
	.word	.L165
	.byte	3,186,20,1,7,9
	.half	.L260-.L165
	.byte	0,1,1
.L1010:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN1')
	.sect	'.debug_ranges'
.L259:
	.word	-1,.L165,0,.L260-.L165,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN2')
	.sect	'.debug_info'
.L261:
	.word	201
	.half	3
	.word	.L262
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L264,.L263
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN2',0,1,214,20,30,1,1,1
	.word	.L167,.L354,.L166
	.byte	4
	.word	.L167,.L354
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN2')
	.sect	'.debug_abbrev'
.L262:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN2')
	.sect	'.debug_line'
.L263:
	.word	.L1014-.L1013
.L1013:
	.half	3
	.word	.L1016-.L1015
.L1015:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1016:
	.byte	5,24,7,0,5,2
	.word	.L167
	.byte	3,221,20,1,5,22,1,5,19,9
	.half	.L1017-.L167
	.byte	3,1,1,5,35,9
	.half	.L1018-.L1017
	.byte	1,5,21,9
	.half	.L81-.L1018
	.byte	3,2,1,5,5,9
	.half	.L1019-.L81
	.byte	1,5,23,7,9
	.half	.L1020-.L1019
	.byte	3,4,1,5,7,9
	.half	.L1021-.L1020
	.byte	1,5,25,7,9
	.half	.L1022-.L1021
	.byte	3,3,1,5,9,9
	.half	.L1023-.L1022
	.byte	1,5,28,7,9
	.half	.L1024-.L1023
	.byte	3,3,1,5,11,9
	.half	.L1025-.L1024
	.byte	1,5,28,7,9
	.half	.L1026-.L1025
	.byte	3,6,1,5,26,1,9
	.half	.L85-.L1026
	.byte	3,16,1,5,24,1,5,23,9
	.half	.L84-.L85
	.byte	3,3,1,5,21,1,5,24,9
	.half	.L83-.L84
	.byte	3,4,1,5,21,1,5,25,9
	.half	.L80-.L83
	.byte	3,87,1,5,19,1,5,35,9
	.half	.L1027-.L80
	.byte	1,5,1,7,9
	.half	.L1028-.L1027
	.byte	3,198,0,1,7,9
	.half	.L265-.L1028
	.byte	0,1,1
.L1014:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN2')
	.sect	'.debug_ranges'
.L264:
	.word	-1,.L167,0,.L265-.L167,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN3')
	.sect	'.debug_info'
.L266:
	.word	262
	.half	3
	.word	.L267
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L269,.L268
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN3',0,1,192,21,30,1,1,1
	.word	.L169,.L355,.L168
	.byte	4
	.word	.L169,.L355
	.byte	5
	.byte	'obj',0,1,197,21,12
	.word	.L356,.L357
	.byte	5
	.byte	'swc_id',0,1,198,21,11
	.word	.L358,.L359
	.byte	5
	.byte	'is_active',0,1,199,21,11
	.word	.L358,.L360
	.byte	0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN3')
	.sect	'.debug_abbrev'
.L267:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN3')
	.sect	'.debug_line'
.L268:
	.word	.L1030-.L1029
.L1029:
	.half	3
	.word	.L1032-.L1031
.L1031:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1032:
	.byte	5,30,7,0,5,2
	.word	.L169
	.byte	3,191,21,1,5,24,9
	.half	.L1033-.L169
	.byte	3,11,1,5,22,9
	.half	.L1034-.L1033
	.byte	1,5,19,9
	.half	.L1035-.L1034
	.byte	3,1,1,5,35,9
	.half	.L1036-.L1035
	.byte	1,5,21,9
	.half	.L87-.L1036
	.byte	3,2,1,5,10,9
	.half	.L1037-.L87
	.byte	3,2,1,7,9
	.half	.L1038-.L1037
	.byte	3,46,1,5,23,9
	.half	.L88-.L1038
	.byte	3,84,1,5,7,9
	.half	.L1039-.L88
	.byte	1,5,25,7,9
	.half	.L1040-.L1039
	.byte	3,3,1,5,9,9
	.half	.L1041-.L1040
	.byte	1,5,28,7,9
	.half	.L1042-.L1041
	.byte	3,3,1,5,11,9
	.half	.L1043-.L1042
	.byte	1,5,28,7,9
	.half	.L1044-.L1043
	.byte	3,6,1,5,26,1,9
	.half	.L93-.L1044
	.byte	3,16,1,5,24,1,5,23,9
	.half	.L92-.L93
	.byte	3,3,1,5,21,1,5,24,9
	.half	.L91-.L92
	.byte	3,4,1,5,7,9
	.half	.L1045-.L91
	.byte	3,6,1,5,24,9
	.half	.L89-.L1045
	.byte	3,5,1,5,7,9
	.half	.L1046-.L89
	.byte	1,5,26,7,9
	.half	.L1047-.L1046
	.byte	3,3,1,5,9,9
	.half	.L1048-.L1047
	.byte	1,5,29,7,9
	.half	.L1049-.L1048
	.byte	3,3,1,5,11,9
	.half	.L1050-.L1049
	.byte	1,5,29,7,9
	.half	.L1051-.L1050
	.byte	3,6,1,5,27,1,5,58,9
	.half	.L1052-.L1051
	.byte	1,5,27,9
	.half	.L97-.L1052
	.byte	3,12,1,5,32,1,5,28,9
	.half	.L1053-.L97
	.byte	3,1,1,5,44,9
	.half	.L1054-.L1053
	.byte	3,1,1,5,20,1,5,32,9
	.half	.L1055-.L1054
	.byte	1,5,44,9
	.half	.L1056-.L1055
	.byte	1,5,47,9
	.half	.L1057-.L1056
	.byte	3,1,1,5,20,1,5,35,9
	.half	.L1058-.L1057
	.byte	1,5,47,9
	.half	.L1059-.L1058
	.byte	1,5,27,9
	.half	.L1060-.L1059
	.byte	3,2,1,5,32,9
	.half	.L1061-.L1060
	.byte	1,5,12,9
	.half	.L1062-.L1061
	.byte	1,5,22,7,9
	.half	.L1063-.L1062
	.byte	3,1,1,5,30,9
	.half	.L1064-.L1063
	.byte	1,5,27,9
	.half	.L98-.L1064
	.byte	3,5,1,5,25,1,5,24,9
	.half	.L96-.L98
	.byte	3,105,1,5,9,9
	.half	.L1065-.L96
	.byte	3,119,1,5,24,9
	.half	.L1066-.L1065
	.byte	3,35,1,5,22,1,5,24,9
	.half	.L95-.L1066
	.byte	3,4,1,5,21,9
	.half	.L94-.L95
	.byte	1,5,25,9
	.half	.L86-.L94
	.byte	3,162,127,1,5,19,1,5,35,9
	.half	.L1067-.L86
	.byte	1,5,1,7,9
	.half	.L1068-.L1067
	.byte	3,251,0,1,9
	.half	.L270-.L1068
	.byte	0,1,1
.L1030:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN3')
	.sect	'.debug_ranges'
.L269:
	.word	-1,.L169,0,.L270-.L169,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN4')
	.sect	'.debug_info'
.L271:
	.word	201
	.half	3
	.word	.L272
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L274,.L273
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN4',0,1,226,22,30,1,1,1
	.word	.L171,.L361,.L170
	.byte	4
	.word	.L171,.L361
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN4')
	.sect	'.debug_abbrev'
.L272:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN4')
	.sect	'.debug_line'
.L273:
	.word	.L1070-.L1069
.L1069:
	.half	3
	.word	.L1072-.L1071
.L1071:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1072:
	.byte	5,24,7,0,5,2
	.word	.L171
	.byte	3,233,22,1,5,22,1,5,19,9
	.half	.L1073-.L171
	.byte	3,1,1,5,35,9
	.half	.L1074-.L1073
	.byte	1,5,21,9
	.half	.L101-.L1074
	.byte	3,2,1,5,5,9
	.half	.L1075-.L101
	.byte	1,5,23,7,9
	.half	.L1076-.L1075
	.byte	3,4,1,5,7,9
	.half	.L1077-.L1076
	.byte	1,5,25,7,9
	.half	.L1078-.L1077
	.byte	3,3,1,5,9,9
	.half	.L1079-.L1078
	.byte	1,5,28,7,9
	.half	.L1080-.L1079
	.byte	3,3,1,5,11,9
	.half	.L1081-.L1080
	.byte	1,5,26,7,9
	.half	.L1082-.L1081
	.byte	3,6,1,9
	.half	.L105-.L1082
	.byte	3,16,1,5,24,1,5,23,9
	.half	.L104-.L105
	.byte	3,3,1,5,21,1,5,24,9
	.half	.L103-.L104
	.byte	3,4,1,5,21,1,5,25,9
	.half	.L100-.L103
	.byte	3,87,1,5,19,1,5,35,9
	.half	.L1083-.L100
	.byte	1,5,1,7,9
	.half	.L1084-.L1083
	.byte	3,198,0,1,7,9
	.half	.L275-.L1084
	.byte	0,1,1
.L1070:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN4')
	.sect	'.debug_ranges'
.L274:
	.word	-1,.L171,0,.L275-.L171,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN5')
	.sect	'.debug_info'
.L276:
	.word	201
	.half	3
	.word	.L277
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L279,.L278
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN5',0,1,204,23,30,1,1,1
	.word	.L173,.L362,.L172
	.byte	4
	.word	.L173,.L362
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN5')
	.sect	'.debug_abbrev'
.L277:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN5')
	.sect	'.debug_line'
.L278:
	.word	.L1086-.L1085
.L1085:
	.half	3
	.word	.L1088-.L1087
.L1087:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1088:
	.byte	5,24,7,0,5,2
	.word	.L173
	.byte	3,211,23,1,5,22,1,5,19,9
	.half	.L1089-.L173
	.byte	3,1,1,5,35,9
	.half	.L1090-.L1089
	.byte	1,5,21,9
	.half	.L107-.L1090
	.byte	3,2,1,5,5,9
	.half	.L1091-.L107
	.byte	1,5,23,7,9
	.half	.L1092-.L1091
	.byte	3,4,1,5,7,9
	.half	.L1093-.L1092
	.byte	1,5,25,7,9
	.half	.L1094-.L1093
	.byte	3,3,1,5,9,9
	.half	.L1095-.L1094
	.byte	1,5,28,7,9
	.half	.L1096-.L1095
	.byte	3,3,1,5,11,9
	.half	.L1097-.L1096
	.byte	1,5,28,7,9
	.half	.L1098-.L1097
	.byte	3,6,1,5,26,1,9
	.half	.L111-.L1098
	.byte	3,16,1,5,24,1,5,23,9
	.half	.L110-.L111
	.byte	3,3,1,5,21,1,5,24,9
	.half	.L109-.L110
	.byte	3,4,1,5,21,1,5,25,9
	.half	.L106-.L109
	.byte	3,87,1,5,19,1,5,35,9
	.half	.L1099-.L106
	.byte	1,5,1,7,9
	.half	.L1100-.L1099
	.byte	3,198,0,1,7,9
	.half	.L280-.L1100
	.byte	0,1,1
.L1086:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN5')
	.sect	'.debug_ranges'
.L279:
	.word	-1,.L173,0,.L280-.L173,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN6')
	.sect	'.debug_info'
.L281:
	.word	201
	.half	3
	.word	.L282
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L284,.L283
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN6',0,1,182,24,30,1,1,1
	.word	.L175,.L363,.L174
	.byte	4
	.word	.L175,.L363
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN6')
	.sect	'.debug_abbrev'
.L282:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN6')
	.sect	'.debug_line'
.L283:
	.word	.L1102-.L1101
.L1101:
	.half	3
	.word	.L1104-.L1103
.L1103:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1104:
	.byte	5,24,7,0,5,2
	.word	.L175
	.byte	3,189,24,1,5,22,1,5,19,9
	.half	.L1105-.L175
	.byte	3,1,1,5,35,9
	.half	.L1106-.L1105
	.byte	1,5,21,9
	.half	.L113-.L1106
	.byte	3,2,1,5,5,9
	.half	.L1107-.L113
	.byte	1,5,23,7,9
	.half	.L1108-.L1107
	.byte	3,4,1,5,7,9
	.half	.L1109-.L1108
	.byte	1,5,25,7,9
	.half	.L1110-.L1109
	.byte	3,3,1,5,9,9
	.half	.L1111-.L1110
	.byte	1,5,28,7,9
	.half	.L1112-.L1111
	.byte	3,3,1,5,11,9
	.half	.L1113-.L1112
	.byte	1,5,28,7,9
	.half	.L1114-.L1113
	.byte	3,6,1,5,26,1,9
	.half	.L117-.L1114
	.byte	3,16,1,5,24,1,5,23,9
	.half	.L116-.L117
	.byte	3,3,1,5,21,1,5,24,9
	.half	.L115-.L116
	.byte	3,4,1,5,21,1,5,25,9
	.half	.L112-.L115
	.byte	3,87,1,5,19,1,5,35,9
	.half	.L1115-.L112
	.byte	1,5,1,7,9
	.half	.L1116-.L1115
	.byte	3,198,0,1,7,9
	.half	.L285-.L1116
	.byte	0,1,1
.L1102:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN6')
	.sect	'.debug_ranges'
.L284:
	.word	-1,.L175,0,.L285-.L175,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN7')
	.sect	'.debug_info'
.L286:
	.word	201
	.half	3
	.word	.L287
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L289,.L288
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN7',0,1,160,25,30,1,1,1
	.word	.L177,.L364,.L176
	.byte	4
	.word	.L177,.L364
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN7')
	.sect	'.debug_abbrev'
.L287:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN7')
	.sect	'.debug_line'
.L288:
	.word	.L1118-.L1117
.L1117:
	.half	3
	.word	.L1120-.L1119
.L1119:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1120:
	.byte	5,24,7,0,5,2
	.word	.L177
	.byte	3,167,25,1,5,22,1,5,19,9
	.half	.L1121-.L177
	.byte	3,1,1,5,35,9
	.half	.L1122-.L1121
	.byte	1,5,21,9
	.half	.L119-.L1122
	.byte	3,2,1,5,5,9
	.half	.L1123-.L119
	.byte	1,5,23,7,9
	.half	.L1124-.L1123
	.byte	3,4,1,5,7,9
	.half	.L1125-.L1124
	.byte	1,5,25,7,9
	.half	.L1126-.L1125
	.byte	3,3,1,5,9,9
	.half	.L1127-.L1126
	.byte	1,5,28,7,9
	.half	.L1128-.L1127
	.byte	3,3,1,5,11,9
	.half	.L1129-.L1128
	.byte	1,5,28,7,9
	.half	.L1130-.L1129
	.byte	3,6,1,5,26,1,9
	.half	.L123-.L1130
	.byte	3,16,1,5,24,1,5,23,9
	.half	.L122-.L123
	.byte	3,3,1,5,21,1,5,24,9
	.half	.L121-.L122
	.byte	3,4,1,5,21,1,5,25,9
	.half	.L118-.L121
	.byte	3,87,1,5,19,1,5,35,9
	.half	.L1131-.L118
	.byte	1,5,1,7,9
	.half	.L1132-.L1131
	.byte	3,198,0,1,7,9
	.half	.L290-.L1132
	.byte	0,1,1
.L1118:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN7')
	.sect	'.debug_ranges'
.L289:
	.word	-1,.L177,0,.L290-.L177,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN8')
	.sect	'.debug_info'
.L291:
	.word	201
	.half	3
	.word	.L292
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L294,.L293
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN8',0,1,138,26,30,1,1,1
	.word	.L179,.L365,.L178
	.byte	4
	.word	.L179,.L365
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN8')
	.sect	'.debug_abbrev'
.L292:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN8')
	.sect	'.debug_line'
.L293:
	.word	.L1134-.L1133
.L1133:
	.half	3
	.word	.L1136-.L1135
.L1135:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1136:
	.byte	5,24,7,0,5,2
	.word	.L179
	.byte	3,145,26,1,5,22,1,5,34,9
	.half	.L1137-.L179
	.byte	1,5,19,3,1,1,5,35,9
	.half	.L1138-.L1137
	.byte	1,5,21,9
	.half	.L125-.L1138
	.byte	3,2,1,5,5,9
	.half	.L1139-.L125
	.byte	1,5,23,7,9
	.half	.L1140-.L1139
	.byte	3,4,1,5,7,9
	.half	.L1141-.L1140
	.byte	1,5,25,7,9
	.half	.L1142-.L1141
	.byte	3,3,1,5,9,9
	.half	.L1143-.L1142
	.byte	1,5,28,7,9
	.half	.L1144-.L1143
	.byte	3,3,1,5,11,9
	.half	.L1145-.L1144
	.byte	1,5,28,7,9
	.half	.L1146-.L1145
	.byte	3,6,1,5,26,1,5,24,9
	.half	.L129-.L1146
	.byte	3,16,1,5,23,9
	.half	.L128-.L129
	.byte	3,3,1,5,21,1,5,24,9
	.half	.L127-.L128
	.byte	3,4,1,5,21,1,5,25,9
	.half	.L124-.L127
	.byte	3,87,1,5,19,1,5,35,9
	.half	.L1147-.L124
	.byte	1,5,1,7,9
	.half	.L1148-.L1147
	.byte	3,198,0,1,7,9
	.half	.L295-.L1148
	.byte	0,1,1
.L1134:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN8')
	.sect	'.debug_ranges'
.L294:
	.word	-1,.L179,0,.L295-.L179,0,0
	.sdecl	'.debug_info',debug,cluster('CAN_viSRN9')
	.sect	'.debug_info'
.L296:
	.word	201
	.half	3
	.word	.L297
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1
	.word	.L299,.L298
	.byte	2
	.word	.L182
	.byte	3
	.byte	'CAN_viSRN9',0,1,244,26,30,1,1,1
	.word	.L181,.L366,.L180
	.byte	4
	.word	.L181,.L366
	.byte	0,0
	.sdecl	'.debug_abbrev',debug,cluster('CAN_viSRN9')
	.sect	'.debug_abbrev'
.L297:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,0,17,1,18,1,0,0,0
	.sdecl	'.debug_line',debug,cluster('CAN_viSRN9')
	.sect	'.debug_line'
.L298:
	.word	.L1150-.L1149
.L1149:
	.half	3
	.word	.L1152-.L1151
.L1151:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\CAN.c',0,0,0,0,0
.L1152:
	.byte	5,24,7,0,5,2
	.word	.L181
	.byte	3,251,26,1,5,22,1,5,19,9
	.half	.L1153-.L181
	.byte	3,1,1,5,35,9
	.half	.L1154-.L1153
	.byte	1,5,10,9
	.half	.L131-.L1154
	.byte	3,4,1,5,21,3,126,1,5,5,9
	.half	.L1155-.L131
	.byte	1,5,23,7,9
	.half	.L1156-.L1155
	.byte	3,4,1,5,7,9
	.half	.L1157-.L1156
	.byte	1,5,25,7,9
	.half	.L1158-.L1157
	.byte	3,3,1,5,9,9
	.half	.L1159-.L1158
	.byte	1,5,28,7,9
	.half	.L1160-.L1159
	.byte	3,3,1,5,11,9
	.half	.L1161-.L1160
	.byte	1,5,28,7,9
	.half	.L1162-.L1161
	.byte	3,6,1,5,26,1,9
	.half	.L135-.L1162
	.byte	3,16,1,5,24,1,5,23,9
	.half	.L134-.L135
	.byte	3,3,1,5,21,1,5,24,9
	.half	.L133-.L134
	.byte	3,4,1,5,21,1,5,25,9
	.half	.L130-.L133
	.byte	3,87,1,5,19,1,5,35,9
	.half	.L1163-.L130
	.byte	1,5,1,7,9
	.half	.L1164-.L1163
	.byte	3,198,0,1,7,9
	.half	.L300-.L1164
	.byte	0,1,1
.L1150:
	.sdecl	'.debug_ranges',debug,cluster('CAN_viSRN9')
	.sect	'.debug_ranges'
.L299:
	.word	-1,.L181,0,.L300-.L181,0,0
	.sdecl	'.debug_info',debug,cluster('aubFIFOWritePtr')
	.sect	'.debug_info'
.L301:
	.word	182
	.half	3
	.word	.L302
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1,2
	.word	.L182
	.byte	3
	.byte	'aubFIFOWritePtr',0,6,110,14
	.word	.L367
	.byte	5,3
	.word	aubFIFOWritePtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('aubFIFOWritePtr')
	.sect	'.debug_abbrev'
.L302:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('aubFIFOReadPtr')
	.sect	'.debug_info'
.L303:
	.word	181
	.half	3
	.word	.L304
	.byte	4,1
	.byte	'..\\CAN.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Users\\Rubis\\Desktop\\workspace_garda_CPS_Demo\\workspace_garda\\Garda_origin\\Debug\\',0,12,1,2
	.word	.L182
	.byte	3
	.byte	'aubFIFOReadPtr',0,6,111,14
	.word	.L367
	.byte	5,3
	.word	aubFIFOReadPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('aubFIFOReadPtr')
	.sect	'.debug_abbrev'
.L304:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_ubDelMsgObj')
	.sect	'.debug_loc'
.L152:
	.word	-1,.L153,0,.L333-.L153
	.half	2
	.byte	138,0
	.word	0,0
.L334:
	.word	-1,.L153,0,.L389-.L153
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
.L335:
	.word	-1,.L153,.L390-.L153,.L333-.L153
	.half	5
	.byte	144,33,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_ubMsgLost')
	.sect	'.debug_loc'
.L150:
	.word	-1,.L151,0,.L330-.L151
	.half	2
	.byte	138,0
	.word	0,0
.L331:
	.word	-1,.L151,0,.L387-.L151
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
.L332:
	.word	-1,.L151,.L388-.L151,.L330-.L151
	.half	5
	.byte	144,33,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_ubNewData')
	.sect	'.debug_loc'
.L142:
	.word	-1,.L143,0,.L316-.L143
	.half	2
	.byte	138,0
	.word	0,0
.L317:
	.word	-1,.L143,0,.L375-.L143
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
.L318:
	.word	-1,.L143,.L376-.L143,.L316-.L143
	.half	5
	.byte	144,33,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_ubReadFIFO')
	.sect	'.debug_loc'
.L160:
	.word	-1,.L161,0,.L346-.L161
	.half	2
	.byte	138,0
	.word	0,0
.L349:
	.word	-1,.L161,.L403-.L161,.L404-.L161
	.half	5
	.byte	144,39,157,32,32
	.word	.L72-.L161,.L405-.L161
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L350:
	.word	-1,.L161,.L401-.L161,.L66-.L161
	.half	5
	.byte	144,32,157,32,0
	.word	.L70-.L161,.L73-.L161
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L348:
	.word	-1,.L161,0,.L346-.L161
	.half	1
	.byte	100
	.word	0,0
.L347:
	.word	-1,.L161,0,.L346-.L161
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
.L351:
	.word	-1,.L161,.L400-.L161,.L66-.L161
	.half	5
	.byte	144,33,157,32,0
	.word	.L70-.L161,.L402-.L161
	.half	5
	.byte	144,33,157,32,0
	.word	.L77-.L161,.L346-.L161
	.half	5
	.byte	144,33,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_ubRequestMsgObj')
	.sect	'.debug_loc'
.L140:
	.word	-1,.L141,0,.L313-.L141
	.half	2
	.byte	138,0
	.word	0,0
.L314:
	.word	-1,.L141,0,.L373-.L141
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
.L315:
	.word	-1,.L141,.L374-.L141,.L313-.L141
	.half	5
	.byte	144,33,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_ubWriteFIFO')
	.sect	'.debug_loc'
.L158:
	.word	-1,.L159,0,.L340-.L159
	.half	2
	.byte	138,0
	.word	0,0
.L343:
	.word	-1,.L159,.L397-.L159,.L398-.L159
	.half	5
	.byte	144,39,157,32,32
	.word	.L63-.L159,.L399-.L159
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L344:
	.word	-1,.L159,.L394-.L159,.L395-.L159
	.half	5
	.byte	144,32,157,32,0
	.word	.L61-.L159,.L396-.L159
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L342:
	.word	-1,.L159,0,.L340-.L159
	.half	1
	.byte	100
	.word	0,0
.L341:
	.word	-1,.L159,0,.L340-.L159
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
.L345:
	.word	-1,.L159,.L393-.L159,.L340-.L159
	.half	5
	.byte	144,33,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_vConfigMsgObj')
	.sect	'.debug_loc'
.L146:
	.word	-1,.L147,0,.L321-.L147
	.half	2
	.byte	138,0
	.word	0,0
.L324:
	.word	-1,.L147,.L379-.L147,.L380-.L147
	.half	5
	.byte	144,39,157,32,32
	.word	.L48-.L147,.L381-.L147
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L323:
	.word	-1,.L147,0,.L321-.L147
	.half	1
	.byte	100
	.word	0,0
.L322:
	.word	-1,.L147,0,.L378-.L147
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_vGetMsgObj')
	.sect	'.debug_loc'
.L138:
	.word	-1,.L139,0,.L308-.L139
	.half	2
	.byte	138,0
	.word	0,0
.L312:
	.word	-1,.L139,.L370-.L139,.L371-.L139
	.half	5
	.byte	144,39,157,32,32
	.word	.L36-.L139,.L372-.L139
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L311:
	.word	-1,.L139,0,.L308-.L139
	.half	1
	.byte	100
	.word	0,0
.L309:
	.word	-1,.L139,0,.L369-.L139
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_vInit')
	.sect	'.debug_loc'
.L136:
	.word	-1,.L137,0,.L305-.L137
	.half	2
	.byte	138,0
	.word	0,0
.L307:
	.word	-1,.L137,.L368-.L137,.L305-.L137
	.half	5
	.byte	144,32,157,32,32
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_vLoadData')
	.sect	'.debug_loc'
.L148:
	.word	-1,.L149,0,.L325-.L149
	.half	2
	.byte	138,0
	.word	0,0
.L329:
	.word	-1,.L149,.L383-.L149,.L384-.L149
	.half	5
	.byte	144,39,157,32,32
	.word	.L385-.L149,.L386-.L149
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L328:
	.word	-1,.L149,0,.L325-.L149
	.half	1
	.byte	100
	.word	0,0
.L326:
	.word	-1,.L149,0,.L382-.L149
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_vReleaseObj')
	.sect	'.debug_loc'
.L154:
	.word	-1,.L155,0,.L336-.L155
	.half	2
	.byte	138,0
	.word	0,0
.L337:
	.word	-1,.L155,0,.L391-.L155
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_vSetMSGVAL')
	.sect	'.debug_loc'
.L156:
	.word	-1,.L157,0,.L338-.L157
	.half	2
	.byte	138,0
	.word	0,0
.L339:
	.word	-1,.L157,0,.L392-.L157
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_vTransmit')
	.sect	'.debug_loc'
.L144:
	.word	-1,.L145,0,.L319-.L145
	.half	2
	.byte	138,0
	.word	0,0
.L320:
	.word	-1,.L145,0,.L377-.L145
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN0')
	.sect	'.debug_loc'
.L162:
	.word	-1,.L163,0,.L352-.L163
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN1')
	.sect	'.debug_loc'
.L164:
	.word	-1,.L165,0,.L353-.L165
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN2')
	.sect	'.debug_loc'
.L166:
	.word	-1,.L167,0,.L354-.L167
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN3')
	.sect	'.debug_loc'
.L168:
	.word	-1,.L169,0,.L406-.L169
	.half	2
	.byte	138,0
	.word	.L406-.L169,.L355-.L169
	.half	2
	.byte	138,32
	.word	.L355-.L169,.L355-.L169
	.half	2
	.byte	138,0
	.word	0,0
.L360:
	.word	-1,.L169,0,.L355-.L169
	.half	2
	.byte	145,120
	.word	0,0
.L357:
	.word	-1,.L169,0,.L355-.L169
	.half	2
	.byte	145,96
	.word	0,0
.L359:
	.word	-1,.L169,0,.L355-.L169
	.half	2
	.byte	145,116
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN4')
	.sect	'.debug_loc'
.L170:
	.word	-1,.L171,0,.L361-.L171
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN5')
	.sect	'.debug_loc'
.L172:
	.word	-1,.L173,0,.L362-.L173
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN6')
	.sect	'.debug_loc'
.L174:
	.word	-1,.L175,0,.L363-.L175
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN7')
	.sect	'.debug_loc'
.L176:
	.word	-1,.L177,0,.L364-.L177
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN8')
	.sect	'.debug_loc'
.L178:
	.word	-1,.L179,0,.L365-.L179
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('CAN_viSRN9')
	.sect	'.debug_loc'
.L180:
	.word	-1,.L181,0,.L366-.L181
	.half	2
	.byte	138,0
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L1165:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,26,8,27,8,30,8,29,8,28,8,16,8,17,8,24,8,25,8,31,8,32,8,33,8,34,8,35,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('CAN_vInit')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L137,.L305-.L137
	.sdecl	'.debug_frame',debug,cluster('CAN_vGetMsgObj')
	.sect	'.debug_frame'
	.word	20
	.word	.L1165,.L139,.L308-.L139
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('CAN_ubRequestMsgObj')
	.sect	'.debug_frame'
	.word	24
	.word	.L1165,.L141,.L313-.L141
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_ubNewData')
	.sect	'.debug_frame'
	.word	24
	.word	.L1165,.L143,.L316-.L143
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_vTransmit')
	.sect	'.debug_frame'
	.word	24
	.word	.L1165,.L145,.L319-.L145
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_vConfigMsgObj')
	.sect	'.debug_frame'
	.word	16
	.word	.L1165,.L147,.L321-.L147
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_vLoadData')
	.sect	'.debug_frame'
	.word	20
	.word	.L1165,.L149,.L325-.L149
	.byte	8,19,8,22,8,23,0,0
	.sdecl	'.debug_frame',debug,cluster('CAN_ubMsgLost')
	.sect	'.debug_frame'
	.word	24
	.word	.L1165,.L151,.L330-.L151
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_ubDelMsgObj')
	.sect	'.debug_frame'
	.word	24
	.word	.L1165,.L153,.L333-.L153
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_vReleaseObj')
	.sect	'.debug_frame'
	.word	24
	.word	.L1165,.L155,.L336-.L155
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_vSetMSGVAL')
	.sect	'.debug_frame'
	.word	24
	.word	.L1165,.L157,.L338-.L157
	.byte	8,18,8,19,8,20,8,21,8,22,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_ubWriteFIFO')
	.sect	'.debug_frame'
	.word	16
	.word	.L1165,.L159,.L340-.L159
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_ubReadFIFO')
	.sect	'.debug_frame'
	.word	16
	.word	.L1165,.L161,.L346-.L161
	.byte	8,19,8,23
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN0')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L163,.L352-.L163
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN1')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L165,.L353-.L165
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN2')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L167,.L354-.L167
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN3')
	.sect	'.debug_frame'
	.word	36
	.word	.L1165,.L169,.L355-.L169
	.byte	4
	.word	(.L406-.L169)/2
	.byte	19,32,22,26,3,19,138,32,4
	.word	(.L355-.L406)/2
	.byte	19,0,8,26,0,0
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN4')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L171,.L361-.L171
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN5')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L173,.L362-.L173
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN6')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L175,.L363-.L175
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN7')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L177,.L364-.L177
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN8')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L179,.L365-.L179
	.sdecl	'.debug_frame',debug,cluster('CAN_viSRN9')
	.sect	'.debug_frame'
	.word	12
	.word	.L1165,.L181,.L366-.L181

; ..\CAN.c	  3524  
; ..\CAN.c	  3525  
; ..\CAN.c	  3526  
; ..\CAN.c	  3527  // USER CODE BEGIN (CAN_General,10)
; ..\CAN.c	  3528  
; ..\CAN.c	  3529  // USER CODE END
; ..\CAN.c	  3530  

	; Module end
